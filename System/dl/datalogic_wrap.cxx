/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ArrayT_BasicType_t swig_types[0]
#define SWIGTYPE_p_ArrayT_SWIGLUA_REF_t swig_types[1]
#define SWIGTYPE_p_ArrayT_double_t swig_types[2]
#define SWIGTYPE_p_ArrayT_float_t swig_types[3]
#define SWIGTYPE_p_ArrayT_int_t swig_types[4]
#define SWIGTYPE_p_ArrayT_long_long_t swig_types[5]
#define SWIGTYPE_p_ArrayT_short_t swig_types[6]
#define SWIGTYPE_p_ArrayT_signed_char_t swig_types[7]
#define SWIGTYPE_p_ArrayT_std__string_t swig_types[8]
#define SWIGTYPE_p_ArrayT_string_t swig_types[9]
#define SWIGTYPE_p_ArrayT_unsigned_char_t swig_types[10]
#define SWIGTYPE_p_ArrayT_unsigned_int_t swig_types[11]
#define SWIGTYPE_p_ArrayT_unsigned_long_long_t swig_types[12]
#define SWIGTYPE_p_ArrayT_unsigned_short_t swig_types[13]
#define SWIGTYPE_p_ArrayT_void_p_t swig_types[14]
#define SWIGTYPE_p_AssociativeArrayT_string_BasicType_t swig_types[15]
#define SWIGTYPE_p_AssociativeArrayT_string_string_t swig_types[16]
#define SWIGTYPE_p_AssociativeArrayT_string_void_p_t swig_types[17]
#define SWIGTYPE_p_BasicType swig_types[18]
#define SWIGTYPE_p_BitArray swig_types[19]
#define SWIGTYPE_p_CBufferT_char_t swig_types[20]
#define SWIGTYPE_p_CBufferT_double_t swig_types[21]
#define SWIGTYPE_p_CBufferT_float_t swig_types[22]
#define SWIGTYPE_p_CBufferT_int_t swig_types[23]
#define SWIGTYPE_p_CBufferT_long_long_t swig_types[24]
#define SWIGTYPE_p_CBufferT_short_t swig_types[25]
#define SWIGTYPE_p_CBufferT_signed_char_t swig_types[26]
#define SWIGTYPE_p_CBufferT_unsigned_char_t swig_types[27]
#define SWIGTYPE_p_CBufferT_unsigned_int_t swig_types[28]
#define SWIGTYPE_p_CBufferT_unsigned_long_long_t swig_types[29]
#define SWIGTYPE_p_CBufferT_unsigned_short_t swig_types[30]
#define SWIGTYPE_p_CSVParser swig_types[31]
#define SWIGTYPE_p_DequeT_double_t swig_types[32]
#define SWIGTYPE_p_DequeT_float_t swig_types[33]
#define SWIGTYPE_p_DequeT_int_t swig_types[34]
#define SWIGTYPE_p_DequeT_long_long_t swig_types[35]
#define SWIGTYPE_p_DequeT_short_t swig_types[36]
#define SWIGTYPE_p_DequeT_signed_char_t swig_types[37]
#define SWIGTYPE_p_DequeT_string_t swig_types[38]
#define SWIGTYPE_p_DequeT_unsigned_char_t swig_types[39]
#define SWIGTYPE_p_DequeT_unsigned_int_t swig_types[40]
#define SWIGTYPE_p_DequeT_unsigned_long_long_t swig_types[41]
#define SWIGTYPE_p_DequeT_unsigned_short_t swig_types[42]
#define SWIGTYPE_p_DequeT_void_p_t swig_types[43]
#define SWIGTYPE_p_ForwardListT_BasicType_t swig_types[44]
#define SWIGTYPE_p_ForwardListT_double_t swig_types[45]
#define SWIGTYPE_p_ForwardListT_float_t swig_types[46]
#define SWIGTYPE_p_ForwardListT_int_t swig_types[47]
#define SWIGTYPE_p_ForwardListT_long_long_t swig_types[48]
#define SWIGTYPE_p_ForwardListT_short_t swig_types[49]
#define SWIGTYPE_p_ForwardListT_signed_char_t swig_types[50]
#define SWIGTYPE_p_ForwardListT_string_t swig_types[51]
#define SWIGTYPE_p_ForwardListT_unsigned_char_t swig_types[52]
#define SWIGTYPE_p_ForwardListT_unsigned_int_t swig_types[53]
#define SWIGTYPE_p_ForwardListT_unsigned_long_long_t swig_types[54]
#define SWIGTYPE_p_ForwardListT_unsigned_short_t swig_types[55]
#define SWIGTYPE_p_ForwardListT_void_p_t swig_types[56]
#define SWIGTYPE_p_ListT_BasicType_t swig_types[57]
#define SWIGTYPE_p_ListT_double_t swig_types[58]
#define SWIGTYPE_p_ListT_float_t swig_types[59]
#define SWIGTYPE_p_ListT_int_t swig_types[60]
#define SWIGTYPE_p_ListT_long_long_t swig_types[61]
#define SWIGTYPE_p_ListT_short_t swig_types[62]
#define SWIGTYPE_p_ListT_signed_char_t swig_types[63]
#define SWIGTYPE_p_ListT_string_t swig_types[64]
#define SWIGTYPE_p_ListT_unsigned_char_t swig_types[65]
#define SWIGTYPE_p_ListT_unsigned_int_t swig_types[66]
#define SWIGTYPE_p_ListT_unsigned_long_long_t swig_types[67]
#define SWIGTYPE_p_ListT_unsigned_short_t swig_types[68]
#define SWIGTYPE_p_ListT_void_p_t swig_types[69]
#define SWIGTYPE_p_MatrixT_BasicType_t swig_types[70]
#define SWIGTYPE_p_MatrixT_double_t swig_types[71]
#define SWIGTYPE_p_MatrixT_float_t swig_types[72]
#define SWIGTYPE_p_MatrixT_int_t swig_types[73]
#define SWIGTYPE_p_MatrixT_long_long_t swig_types[74]
#define SWIGTYPE_p_MatrixT_short_t swig_types[75]
#define SWIGTYPE_p_MatrixT_signed_char_t swig_types[76]
#define SWIGTYPE_p_MatrixT_std__string_t swig_types[77]
#define SWIGTYPE_p_MatrixT_string_t swig_types[78]
#define SWIGTYPE_p_MatrixT_unsigned_char_t swig_types[79]
#define SWIGTYPE_p_MatrixT_unsigned_int_t swig_types[80]
#define SWIGTYPE_p_MatrixT_unsigned_long_long_t swig_types[81]
#define SWIGTYPE_p_MatrixT_unsigned_short_t swig_types[82]
#define SWIGTYPE_p_RegEx swig_types[83]
#define SWIGTYPE_p_SWIGLUA_FN swig_types[84]
#define SWIGTYPE_p_SWIGLUA_REF swig_types[85]
#define SWIGTYPE_p_SetT_double_t swig_types[86]
#define SWIGTYPE_p_SetT_float_t swig_types[87]
#define SWIGTYPE_p_SetT_int_t swig_types[88]
#define SWIGTYPE_p_SetT_long_long_t swig_types[89]
#define SWIGTYPE_p_SetT_short_t swig_types[90]
#define SWIGTYPE_p_SetT_signed_char_t swig_types[91]
#define SWIGTYPE_p_SetT_string_t swig_types[92]
#define SWIGTYPE_p_SetT_unsigned_char_t swig_types[93]
#define SWIGTYPE_p_SetT_unsigned_int_t swig_types[94]
#define SWIGTYPE_p_SetT_unsigned_long_long_t swig_types[95]
#define SWIGTYPE_p_SetT_unsigned_short_t swig_types[96]
#define SWIGTYPE_p_SetT_void_p_t swig_types[97]
#define SWIGTYPE_p_StackT_BasicType_t swig_types[98]
#define SWIGTYPE_p_StackT_double_t swig_types[99]
#define SWIGTYPE_p_StackT_float_t swig_types[100]
#define SWIGTYPE_p_StackT_int_t swig_types[101]
#define SWIGTYPE_p_StackT_long_long_t swig_types[102]
#define SWIGTYPE_p_StackT_short_t swig_types[103]
#define SWIGTYPE_p_StackT_signed_char_t swig_types[104]
#define SWIGTYPE_p_StackT_string_t swig_types[105]
#define SWIGTYPE_p_StackT_unsigned_char_t swig_types[106]
#define SWIGTYPE_p_StackT_unsigned_int_t swig_types[107]
#define SWIGTYPE_p_StackT_unsigned_long_long_t swig_types[108]
#define SWIGTYPE_p_StackT_unsigned_short_t swig_types[109]
#define SWIGTYPE_p_StackT_void_p_t swig_types[110]
#define SWIGTYPE_p_String swig_types[111]
#define SWIGTYPE_p_char swig_types[112]
#define SWIGTYPE_p_difference_type swig_types[113]
#define SWIGTYPE_p_double swig_types[114]
#define SWIGTYPE_p_float swig_types[115]
#define SWIGTYPE_p_int swig_types[116]
#define SWIGTYPE_p_key_type swig_types[117]
#define SWIGTYPE_p_long_long swig_types[118]
#define SWIGTYPE_p_mapped_type swig_types[119]
#define SWIGTYPE_p_p_void swig_types[120]
#define SWIGTYPE_p_short swig_types[121]
#define SWIGTYPE_p_signed_char swig_types[122]
#define SWIGTYPE_p_size_type swig_types[123]
#define SWIGTYPE_p_std__dequeT_double_t swig_types[124]
#define SWIGTYPE_p_std__dequeT_float_t swig_types[125]
#define SWIGTYPE_p_std__dequeT_int_t swig_types[126]
#define SWIGTYPE_p_std__dequeT_long_long_t swig_types[127]
#define SWIGTYPE_p_std__dequeT_short_t swig_types[128]
#define SWIGTYPE_p_std__dequeT_signed_char_t swig_types[129]
#define SWIGTYPE_p_std__dequeT_std__string_t swig_types[130]
#define SWIGTYPE_p_std__dequeT_unsigned_char_t swig_types[131]
#define SWIGTYPE_p_std__dequeT_unsigned_int_t swig_types[132]
#define SWIGTYPE_p_std__dequeT_unsigned_long_long_t swig_types[133]
#define SWIGTYPE_p_std__dequeT_unsigned_short_t swig_types[134]
#define SWIGTYPE_p_std__dequeT_void_p_t swig_types[135]
#define SWIGTYPE_p_std__listT_BasicType_t swig_types[136]
#define SWIGTYPE_p_std__listT_double_t swig_types[137]
#define SWIGTYPE_p_std__listT_float_t swig_types[138]
#define SWIGTYPE_p_std__listT_int_t swig_types[139]
#define SWIGTYPE_p_std__listT_long_long_t swig_types[140]
#define SWIGTYPE_p_std__listT_short_t swig_types[141]
#define SWIGTYPE_p_std__listT_signed_char_t swig_types[142]
#define SWIGTYPE_p_std__listT_string_t swig_types[143]
#define SWIGTYPE_p_std__listT_unsigned_char_t swig_types[144]
#define SWIGTYPE_p_std__listT_unsigned_int_t swig_types[145]
#define SWIGTYPE_p_std__listT_unsigned_long_long_t swig_types[146]
#define SWIGTYPE_p_std__listT_unsigned_short_t swig_types[147]
#define SWIGTYPE_p_std__listT_void_p_t swig_types[148]
#define SWIGTYPE_p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t swig_types[149]
#define SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t swig_types[150]
#define SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t swig_types[151]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t swig_types[152]
#define SWIGTYPE_p_std__mapT_std__string_void_p_std__lessT_std__string_t_t swig_types[153]
#define SWIGTYPE_p_std__regex swig_types[154]
#define SWIGTYPE_p_std__setT_double_t swig_types[155]
#define SWIGTYPE_p_std__setT_float_t swig_types[156]
#define SWIGTYPE_p_std__setT_int_t swig_types[157]
#define SWIGTYPE_p_std__setT_long_long_t swig_types[158]
#define SWIGTYPE_p_std__setT_short_t swig_types[159]
#define SWIGTYPE_p_std__setT_signed_char_t swig_types[160]
#define SWIGTYPE_p_std__setT_string_t swig_types[161]
#define SWIGTYPE_p_std__setT_unsigned_char_t swig_types[162]
#define SWIGTYPE_p_std__setT_unsigned_int_t swig_types[163]
#define SWIGTYPE_p_std__setT_unsigned_long_long_t swig_types[164]
#define SWIGTYPE_p_std__setT_unsigned_short_t swig_types[165]
#define SWIGTYPE_p_std__setT_void_p_t swig_types[166]
#define SWIGTYPE_p_std__stackT_BasicType_t swig_types[167]
#define SWIGTYPE_p_std__stackT_double_t swig_types[168]
#define SWIGTYPE_p_std__stackT_float_t swig_types[169]
#define SWIGTYPE_p_std__stackT_int_t swig_types[170]
#define SWIGTYPE_p_std__stackT_long_long_t swig_types[171]
#define SWIGTYPE_p_std__stackT_short_t swig_types[172]
#define SWIGTYPE_p_std__stackT_signed_char_t swig_types[173]
#define SWIGTYPE_p_std__stackT_string_t swig_types[174]
#define SWIGTYPE_p_std__stackT_unsigned_char_t swig_types[175]
#define SWIGTYPE_p_std__stackT_unsigned_int_t swig_types[176]
#define SWIGTYPE_p_std__stackT_unsigned_long_long_t swig_types[177]
#define SWIGTYPE_p_std__stackT_unsigned_short_t swig_types[178]
#define SWIGTYPE_p_std__stackT_void_p_t swig_types[179]
#define SWIGTYPE_p_std__string swig_types[180]
#define SWIGTYPE_p_std__vectorT_BasicType_t swig_types[181]
#define SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t swig_types[182]
#define SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t swig_types[183]
#define SWIGTYPE_p_std__vectorT_bool_t swig_types[184]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[185]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[186]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[187]
#define SWIGTYPE_p_std__vectorT_long_long_t swig_types[188]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[189]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[190]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[191]
#define SWIGTYPE_p_std__vectorT_std__vectorT_BasicType_t_t swig_types[192]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[193]
#define SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t swig_types[194]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t swig_types[195]
#define SWIGTYPE_p_std__vectorT_std__vectorT_long_long_t_t swig_types[196]
#define SWIGTYPE_p_std__vectorT_std__vectorT_short_t_t swig_types[197]
#define SWIGTYPE_p_std__vectorT_std__vectorT_signed_char_t_t swig_types[198]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t swig_types[199]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t swig_types[200]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t swig_types[201]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t swig_types[202]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t swig_types[203]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[204]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[205]
#define SWIGTYPE_p_std__vectorT_unsigned_long_long_t swig_types[206]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[207]
#define SWIGTYPE_p_std__vectorT_void_p_t swig_types[208]
#define SWIGTYPE_p_string swig_types[209]
#define SWIGTYPE_p_unsigned_char swig_types[210]
#define SWIGTYPE_p_unsigned_int swig_types[211]
#define SWIGTYPE_p_unsigned_long_long swig_types[212]
#define SWIGTYPE_p_unsigned_short swig_types[213]
#define SWIGTYPE_p_value_type swig_types[214]
#define SWIGTYPE_p_void swig_types[215]
static swig_type_info *swig_types[217];
static swig_module_info swig_module = {swig_types, 216, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "dl"
#define SWIG_init      luaopen_dl
#define SWIG_init_user luaopen_dl_user

#define SWIG_LUACODE   luaopen_dl_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "datalogic.h"
#include "vecarray.h"
#include "assocmap.h"
#include "cbuffer.h"
#include "deque.h"
#include "forwardlist.h"
#include "list.h"
#include "queue.h"
#include "set.h"
#include "stack.h"
#include "string.h"

#include "csv-parser/parser.hpp"
#include <fstream>

#include <climits>

using namespace std;
using namespace aria;




#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <deque>
#include <stdexcept>


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char)
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char)
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int)
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int)
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short)
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short)
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long)
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long)
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float)
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double)

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}


SWIGINTERN std::string std_vector_Sl_string_Sg____getitem__(std::vector< string > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_string_Sg____setitem__(std::vector< string > *self,unsigned int idx,std::string val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN SWIGLUA_REF std_vector_Sl_SWIGLUA_REF_Sg____getitem__(std::vector< SWIGLUA_REF > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_SWIGLUA_REF_Sg____setitem__(std::vector< SWIGLUA_REF > *self,unsigned int idx,SWIGLUA_REF val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN SWIGLUA_FN std_vector_Sl_SWIGLUA_FN_Sg____getitem__(std::vector< SWIGLUA_FN > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_SWIGLUA_FN_Sg____setitem__(std::vector< SWIGLUA_FN > *self,unsigned int idx,SWIGLUA_FN val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN SWIGLUA_REF const &std_map_Sl_string_Sc_SWIGLUA_REF_Sg__get(std::map< string,SWIGLUA_REF > *self,std::string const &key){
                std::map< std::string, SWIGLUA_REF, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_string_Sc_SWIGLUA_REF_Sg__set(std::map< string,SWIGLUA_REF > *self,std::string const &key,SWIGLUA_REF const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_string_Sc_SWIGLUA_REF_Sg__del(std::map< string,SWIGLUA_REF > *self,std::string const &key){
                std::map< std::string, SWIGLUA_REF, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_string_Sc_SWIGLUA_REF_Sg__has_key(std::map< string,SWIGLUA_REF > *self,std::string const &key){
                std::map< std::string, SWIGLUA_REF, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN SWIGLUA_FN const &std_map_Sl_string_Sc_SWIGLUA_FN_Sg__get(std::map< string,SWIGLUA_FN > *self,std::string const &key){
                std::map< std::string, SWIGLUA_FN, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_string_Sc_SWIGLUA_FN_Sg__set(std::map< string,SWIGLUA_FN > *self,std::string const &key,SWIGLUA_FN const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_string_Sc_SWIGLUA_FN_Sg__del(std::map< string,SWIGLUA_FN > *self,std::string const &key){
                std::map< std::string, SWIGLUA_FN, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_string_Sc_SWIGLUA_FN_Sg__has_key(std::map< string,SWIGLUA_FN > *self,std::string const &key){
                std::map< std::string, SWIGLUA_FN, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }


    struct CSVParser
    {
        std::vector<std::vector<std::string>> m;

        CSVParser(const std::string & file)
        {            
            ifstream f;
            size_t r = 0;
            f.open(file);
            if(f.is_open())
            {
                size_t row = 0;
                size_t col = 0;
                csv::CsvParser parser(f);
                while(!parser.empty())
                {                
                    std::vector<std::string> row;                    
                    while(1)
                    {
                        csv::Field field = parser.next_field();
                        if(field.type == csv::FieldType::ROW_END)
                        {
                            m.push_back(row);                            
                        }
                        else
                        {
                            row.push_back(*field.data);
                        }
                        if(field.type == csv::FieldType::ROW_END || parser.empty()) break;
                    }
                    
                }
            }            
        }

        size_t num_rows() { return m.size(); }
        size_t num_cols(size_t r) { return m[r].size(); }

        Array<std::string> get_row(size_t r)
        {
            assert(r < m.size());
            return Array<std::string>(m[r]);
        }
        std::string get_col(size_t r, size_t c) { return m[r][c]; }

        Matrix<std::string>& get_data(Matrix<std::string>& r)
        {
            r.v = std::vector<std::vector<std::string>>();
            r.v.resize(m.size());
            for(int i = 0; i < m.size(); i++)
                r.v[i] = m[i];
            return r;
        }

        void write_file(const char * file)
        {
            FILE * f = fopen(file,"w");
            for(size_t i = 0; i < m.size(); i++)
            {
                for(size_t j = 0; j < m[i].size()-1; j++)
                {
                    fprintf(f,"%s,",m[i][j].c_str());
                }
                fprintf(f,"\n");
            }
            fclose(f);
        }

        void print_row(size_t r)
        {
            for(size_t i = 0; i < m[r].size(); i++)
            {
                cout << m[r][i];
                if(i != m[r].size()-1) cout << ",";
            }
            cout << endl;
        }
    };




    double SwigRefTableGet(SWIGLUA_REF  r, size_t index){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,index);
    return lua_tonumber(r.L,-1);
}
double SwigRefTableGet2(SWIGLUA_REF  r, size_t row, size_t col){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,row);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,col);
    return lua_tonumber(r.L,-1);
}
void SwigRefTableSet(SWIGLUA_REF  r, size_t index, double val){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_pushnumber(r.L,val);
    lua_rawseti(r.L,-1,index);    
}
void SwigRefTableSet2(SWIGLUA_REF  r, size_t row, size_t col, double val){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,row);
    assert(lua_istable(r.L,-1));
    lua_rawseti(r.L,-1,val);
}

size_t SwigRefGetTableSize(SWIGLUA_REF ref)
{
    // i am not sure if this needs to be popped from the lua stack.
    swiglua_ref_get(&ref);
    assert(lua_istable(ref.L,-1));
    size_t s = lua_objlen(ref.L,-1);    
    return s;
}

template<typename T>
Array<T> CreateArray(SWIGLUA_REF ref)
{
    Array<T> r;
    size_t size = SwigRefGetTableSize(ref);
    r.resize(size);
    for(size_t i = 0; i < size; i++)
        r[i] = SwigRefTableGet(ref,i+1);
    return r;
}




    // these need to be made outside the class
    
    template<typename T>
    void sort(Array<T> & v) { std::sort(v.v.begin(),v.v.end()); }

    template<typename T>
    void rsort(Array<T> & v) { std::sort(v.v.rbegin(),v.v.rend()); }

    template<typename T>
    void reverse(Array<T> & v) { std::reverse(v.v.begin(), v.v.end()); }

    template<typename T>
    bool binary_search(Array<T> & v, const T val)     {
        return std::binary_search(v.v.begin(),v.v.end(),val);
    }
    
    template<typename T>
    int count(Array<T> & v,const T val) { return std::count(v.v.begin(),v.v.end(),val); }        

    template<typename T>
    void fill(Array<T> & v, size_t i1, size_t i2,const T& val)    {
        assert(i1 < i2);
        std::fill(v.v.begin()+i1,v.v.begin()+i2,val);
    }        
    template<typename T>
    void make_heap(Array<T> & v)     {
        std::make_heap(v.v.begin(),v.v.end());
    
    } 
    template<typename T>
    void pop_heap(Array<T> & v) { std::pop_heap(v.v.begin(),v.v.end()); }

    template<typename T>
    void push_heap(Array<T> & v,const T val){
        v.push_back(val);
        std::push_heap(v.v.begin(),v.v.end()); 
    }

    template<typename T>
    void sort_heap(Array<T> & v) { std::sort_heap(v.v.begin(),v.v.end()); }

    template<typename T>
    T get_max(Array<T> & v)    {
        return *std::max_element(v.v.begin(),v.v.end());
    }

    template<typename T>
    T get_min(Array<T> & v)    {
        return *std::min_element(v.v.begin(),v.v.end());
    }        

    template<typename T>
    Pair<T,T> minmax(Array<T> & v) { 
        Pair<T,T> p;
        auto x = std::minmax_element(v.v.begin(),v.v.end());
        p.p.first = *x.first;
        p.p.second = *x.second;
        return p;
    }
    
    template<typename T>
    bool next_permutation(Array<T> & v) { return std::next_permutation(v.v.begin(),v.v.end()); }
    
    template<typename T>
    bool is_sorted(Array<T> & v) { return std::is_sorted(v.v.begin(), v.v.end()); }

    template<typename T>
    bool is_heap(Array<T> & v) { return std::is_heap(v.v.begin(),v.v.end()); }
    //bool is_partitioned() { return std::is_partitioned(v.begin(),v.end()); }

    template<typename T>
    bool is_permutation(const Array<T> &a, Array<T> & v) { return std::is_permutation(a.v.begin(),a.v.end(),v.v.begin()); }


    template<typename T>
    void merge_front(const Array<T> & a, const Array<T> &b, Array<T> & v)    {
        std::merge(a.v.begin(),a.v.end(),b.v.begin(),b.v.end(),v.v.begin());
    }

    template<typename T>
    void merge_back(const Array<T> & a, const Array<T> &b, Array<T> & v)    {
        std::merge(a.v.begin(),a.v.end(),b.v.begin(),b.v.end(),v.v.end());
    }

    template<typename T>
    void random_shuffle(Array<T> & v) { std::random_shuffle(v.v.begin(),v.v.end()); }

    template<typename T>
    void replace(Array<T> & v,const T a, const T b)    {
        std::replace(v.v.begin(),v.v.end(),a,b);
    }

    template<typename T>
    void shuffle(Array<T> & v) { 
        unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
        std::shuffle(v.v.begin(),v.v.end(),std::default_random_engine(seed));
    }

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_string_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< string >::vector",0,0)
  result = (std::vector< string > *)new std::vector< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< string >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< string >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< string > *)new std::vector< string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< string >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< string >::vector",1,"std::vector< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("new_string_vector",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (std::vector< string > *)new std::vector< string >((std::vector< std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::string arg2 ;
  std::vector< string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< string >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< string >::vector",1,"unsigned int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< string >::vector",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (std::vector< string > *)new std::vector< string >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_string_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_string_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< string >::vector()\n"
    "    std::vector< string >::vector(unsigned int)\n"
    "    std::vector< string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< string >::vector(unsigned int,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_string_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::size",1,"std::vector< string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (unsigned int)((std::vector< string > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::max_size",1,"std::vector< string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (unsigned int)((std::vector< string > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::empty",1,"std::vector< string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_empty",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)((std::vector< string > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  
  SWIG_check_num_args("std::vector< string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::clear",1,"std::vector< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_clear",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("std::vector< string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::push_back",1,"std::vector< string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< string >::push_back",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  
  SWIG_check_num_args("std::vector< string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::pop_back",1,"std::vector< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::front",1,"std::vector< string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_front",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = ((std::vector< string > const *)arg1)->front();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::back",1,"std::vector< string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = ((std::vector< string > const *)arg1)->back();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< string >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::__getitem__",1,"std::vector< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< string >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_string_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< string > *arg1 = (std::vector< string > *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("std::vector< string >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< string >::__setitem__",1,"std::vector< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< string >::__setitem__",2,"unsigned int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("std::vector< string >::__setitem__",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("string_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  try {
    std_vector_Sl_string_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string_vector(void *obj) {
std::vector< string > *arg1 = (std::vector< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_string_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_vector_methods[]= {
    { "size", _wrap_string_vector_size},
    { "max_size", _wrap_string_vector_max_size},
    { "empty", _wrap_string_vector_empty},
    { "clear", _wrap_string_vector_clear},
    { "push_back", _wrap_string_vector_push_back},
    { "pop_back", _wrap_string_vector_pop_back},
    { "front", _wrap_string_vector_front},
    { "back", _wrap_string_vector_back},
    { "__getitem", _wrap_string_vector___getitem},
    { "__setitem", _wrap_string_vector___setitem},
    {0,0}
};
static swig_lua_method swig_string_vector_meta[] = {
    { "__getitem", _wrap_string_vector___getitem},
    { "__setitem", _wrap_string_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_string_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_vector_Sf_SwigStatic = {
    "string_vector",
    swig_string_vector_Sf_SwigStatic_methods,
    swig_string_vector_Sf_SwigStatic_attributes,
    swig_string_vector_Sf_SwigStatic_constants,
    swig_string_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_vector_bases[] = {0};
static const char *swig_string_vector_base_names[] = {0};
static swig_lua_class _wrap_class_string_vector = { "string_vector", "string_vector", &SWIGTYPE_p_std__vectorT_std__string_t,_proxy__wrap_new_string_vector, swig_delete_string_vector, swig_string_vector_methods, swig_string_vector_attributes, &swig_string_vector_Sf_SwigStatic, swig_string_vector_meta, swig_string_vector_bases, swig_string_vector_base_names };

static int _wrap_new_RefVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::vector",0,0)
  result = (std::vector< SWIGLUA_REF > *)new std::vector< SWIGLUA_REF >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< SWIGLUA_REF > *)new std::vector< SWIGLUA_REF >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = 0 ;
  std::vector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::vector",1,"std::vector< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("new_RefVector",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = (std::vector< SWIGLUA_REF > *)new std::vector< SWIGLUA_REF >((std::vector< SWIGLUA_REF > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  SWIGLUA_REF arg2 ;
  std::vector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  swiglua_ref_set(&arg2,L,2); 
  result = (std::vector< SWIGLUA_REF > *)new std::vector< SWIGLUA_REF >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RefVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RefVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RefVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SWIGLUA_REF, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_RefVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RefVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< SWIGLUA_REF >::vector()\n"
    "    std::vector< SWIGLUA_REF >::vector(unsigned int)\n"
    "    std::vector< SWIGLUA_REF >::vector(std::vector< SWIGLUA_REF > const &)\n"
    "    std::vector< SWIGLUA_REF >::vector(unsigned int,SWIGLUA_REF)\n");
  lua_error(L);return 0;
}


static int _wrap_RefVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::size",1,"std::vector< SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_size",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = (unsigned int)((std::vector< SWIGLUA_REF > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::max_size",1,"std::vector< SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_max_size",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = (unsigned int)((std::vector< SWIGLUA_REF > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::empty",1,"std::vector< SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_empty",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = (bool)((std::vector< SWIGLUA_REF > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::clear",1,"std::vector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_clear",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF arg2 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::push_back",1,"std::vector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_push_back",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  swiglua_ref_set(&arg2,L,2); 
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::pop_back",1,"std::vector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_pop_back",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::front",1,"std::vector< SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_front",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = ((std::vector< SWIGLUA_REF > const *)arg1)->front();
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::back",1,"std::vector< SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector_back",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = ((std::vector< SWIGLUA_REF > const *)arg1)->back();
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  unsigned int arg2 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::__getitem__",1,"std::vector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector___getitem",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_SWIGLUA_REF_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) 0 ;
  unsigned int arg2 ;
  SWIGLUA_REF arg3 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_REF >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::__setitem__",1,"std::vector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SWIGLUA_REF >::__setitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefVector___setitem",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  swiglua_ref_set(&arg3,L,3); 
  try {
    std_vector_Sl_SWIGLUA_REF_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RefVector(void *obj) {
std::vector< SWIGLUA_REF > *arg1 = (std::vector< SWIGLUA_REF > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RefVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RefVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RefVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RefVector_methods[]= {
    { "size", _wrap_RefVector_size},
    { "max_size", _wrap_RefVector_max_size},
    { "empty", _wrap_RefVector_empty},
    { "clear", _wrap_RefVector_clear},
    { "push_back", _wrap_RefVector_push_back},
    { "pop_back", _wrap_RefVector_pop_back},
    { "front", _wrap_RefVector_front},
    { "back", _wrap_RefVector_back},
    { "__getitem", _wrap_RefVector___getitem},
    { "__setitem", _wrap_RefVector___setitem},
    {0,0}
};
static swig_lua_method swig_RefVector_meta[] = {
    { "__getitem", _wrap_RefVector___getitem},
    { "__setitem", _wrap_RefVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_RefVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RefVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RefVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RefVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RefVector_Sf_SwigStatic = {
    "RefVector",
    swig_RefVector_Sf_SwigStatic_methods,
    swig_RefVector_Sf_SwigStatic_attributes,
    swig_RefVector_Sf_SwigStatic_constants,
    swig_RefVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RefVector_bases[] = {0};
static const char *swig_RefVector_base_names[] = {0};
static swig_lua_class _wrap_class_RefVector = { "RefVector", "RefVector", &SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,_proxy__wrap_new_RefVector, swig_delete_RefVector, swig_RefVector_methods, swig_RefVector_attributes, &swig_RefVector_Sf_SwigStatic, swig_RefVector_meta, swig_RefVector_bases, swig_RefVector_base_names };

static int _wrap_new_FuncVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::vector",0,0)
  result = (std::vector< SWIGLUA_FN > *)new std::vector< SWIGLUA_FN >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< SWIGLUA_FN > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< SWIGLUA_FN > *)new std::vector< SWIGLUA_FN >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = 0 ;
  std::vector< SWIGLUA_FN > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::vector",1,"std::vector< SWIGLUA_FN > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("new_FuncVector",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  result = (std::vector< SWIGLUA_FN > *)new std::vector< SWIGLUA_FN >((std::vector< SWIGLUA_FN > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  SWIGLUA_FN arg2 ;
  std::vector< SWIGLUA_FN > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::vector",1,"unsigned int");
  if(!lua_isfunction(L,2)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::vector",2,"SWIGLUA_FN");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  (&arg2)->L=L; (&arg2)->idx=2; 
  result = (std::vector< SWIGLUA_FN > *)new std::vector< SWIGLUA_FN >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FuncVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FuncVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FuncVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SWIGLUA_FN, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FuncVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FuncVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< SWIGLUA_FN >::vector()\n"
    "    std::vector< SWIGLUA_FN >::vector(unsigned int)\n"
    "    std::vector< SWIGLUA_FN >::vector(std::vector< SWIGLUA_FN > const &)\n"
    "    std::vector< SWIGLUA_FN >::vector(unsigned int,SWIGLUA_FN)\n");
  lua_error(L);return 0;
}


static int _wrap_FuncVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::size",1,"std::vector< SWIGLUA_FN > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_size",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  result = (unsigned int)((std::vector< SWIGLUA_FN > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::max_size",1,"std::vector< SWIGLUA_FN > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_max_size",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  result = (unsigned int)((std::vector< SWIGLUA_FN > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::empty",1,"std::vector< SWIGLUA_FN > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_empty",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  result = (bool)((std::vector< SWIGLUA_FN > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::clear",1,"std::vector< SWIGLUA_FN > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_clear",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  SWIGLUA_FN arg2 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::push_back",1,"std::vector< SWIGLUA_FN > *");
  if(!lua_isfunction(L,2)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::push_back",2,"SWIGLUA_FN");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_push_back",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  (&arg2)->L=L; (&arg2)->idx=2; 
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::pop_back",1,"std::vector< SWIGLUA_FN > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_pop_back",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  SWIGLUA_FN result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::front",1,"std::vector< SWIGLUA_FN > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_front",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  result = ((std::vector< SWIGLUA_FN > const *)arg1)->front();
  {
    SWIGLUA_FN * resultptr = new SWIGLUA_FN((const SWIGLUA_FN &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SWIGLUA_FN,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  SWIGLUA_FN result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::back",1,"std::vector< SWIGLUA_FN > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector_back",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  result = ((std::vector< SWIGLUA_FN > const *)arg1)->back();
  {
    SWIGLUA_FN * resultptr = new SWIGLUA_FN((const SWIGLUA_FN &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SWIGLUA_FN,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  unsigned int arg2 ;
  SWIGLUA_FN result;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::__getitem__",1,"std::vector< SWIGLUA_FN > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector___getitem",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_SWIGLUA_FN_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  {
    SWIGLUA_FN * resultptr = new SWIGLUA_FN((const SWIGLUA_FN &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SWIGLUA_FN,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) 0 ;
  unsigned int arg2 ;
  SWIGLUA_FN arg3 ;
  
  SWIG_check_num_args("std::vector< SWIGLUA_FN >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::__setitem__",1,"std::vector< SWIGLUA_FN > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::__setitem__",2,"unsigned int");
  if(!lua_isfunction(L,3)) SWIG_fail_arg("std::vector< SWIGLUA_FN >::__setitem__",3,"SWIGLUA_FN");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,0))){
    SWIG_fail_ptr("FuncVector___setitem",1,SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (&arg3)->L=L; (&arg3)->idx=3; 
  try {
    std_vector_Sl_SWIGLUA_FN_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FuncVector(void *obj) {
std::vector< SWIGLUA_FN > *arg1 = (std::vector< SWIGLUA_FN > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FuncVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FuncVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FuncVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FuncVector_methods[]= {
    { "size", _wrap_FuncVector_size},
    { "max_size", _wrap_FuncVector_max_size},
    { "empty", _wrap_FuncVector_empty},
    { "clear", _wrap_FuncVector_clear},
    { "push_back", _wrap_FuncVector_push_back},
    { "pop_back", _wrap_FuncVector_pop_back},
    { "front", _wrap_FuncVector_front},
    { "back", _wrap_FuncVector_back},
    { "__getitem", _wrap_FuncVector___getitem},
    { "__setitem", _wrap_FuncVector___setitem},
    {0,0}
};
static swig_lua_method swig_FuncVector_meta[] = {
    { "__getitem", _wrap_FuncVector___getitem},
    { "__setitem", _wrap_FuncVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_FuncVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FuncVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FuncVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FuncVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FuncVector_Sf_SwigStatic = {
    "FuncVector",
    swig_FuncVector_Sf_SwigStatic_methods,
    swig_FuncVector_Sf_SwigStatic_attributes,
    swig_FuncVector_Sf_SwigStatic_constants,
    swig_FuncVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FuncVector_bases[] = {0};
static const char *swig_FuncVector_base_names[] = {0};
static swig_lua_class _wrap_class_FuncVector = { "FuncVector", "FuncVector", &SWIGTYPE_p_std__vectorT_SWIGLUA_FN_t,_proxy__wrap_new_FuncVector, swig_delete_FuncVector, swig_FuncVector_methods, swig_FuncVector_attributes, &swig_FuncVector_Sf_SwigStatic, swig_FuncVector_meta, swig_FuncVector_bases, swig_FuncVector_base_names };

static int _wrap_new_RefMap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::map",0,0)
  result = (std::map< string,SWIGLUA_REF > *)new std::map< string,SWIGLUA_REF >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefMap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,SWIGLUA_REF > *arg1 = 0 ;
  std::map< string,SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::map",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::map",1,"std::map< std::string,SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("new_RefMap",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  result = (std::map< string,SWIGLUA_REF > *)new std::map< string,SWIGLUA_REF >((std::map< std::string,SWIGLUA_REF > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefMap(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RefMap__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RefMap__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RefMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< string,SWIGLUA_REF >::map()\n"
    "    std::map< string,SWIGLUA_REF >::map(std::map< std::string,SWIGLUA_REF > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RefMap_size(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::size",1,"std::map< string,SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("RefMap_size",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  result = (unsigned int)((std::map< string,SWIGLUA_REF > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefMap_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::empty",1,"std::map< string,SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("RefMap_empty",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  result = (bool)((std::map< string,SWIGLUA_REF > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::clear",1,"std::map< string,SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("RefMap_clear",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefMap_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SWIGLUA_REF *result = 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::get",1,"std::map< string,SWIGLUA_REF > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::get",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("RefMap_get",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (SWIGLUA_REF *) &std_map_Sl_string_Sc_SWIGLUA_REF_Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SWIGLUA_REF,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefMap_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) 0 ;
  std::string *arg2 = 0 ;
  SWIGLUA_REF *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::set",1,"std::map< string,SWIGLUA_REF > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::set",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::set",3,"SWIGLUA_REF const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("RefMap_set",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SWIGLUA_REF,0))){
    SWIG_fail_ptr("RefMap_set",3,SWIGTYPE_p_SWIGLUA_REF);
  }
  
  std_map_Sl_string_Sc_SWIGLUA_REF_Sg__set(arg1,(std::string const &)*arg2,(SWIGLUA_REF const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefMap_del(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::del",1,"std::map< string,SWIGLUA_REF > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::del",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("RefMap_del",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    std_map_Sl_string_Sc_SWIGLUA_REF_Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefMap_has_key(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_REF >::has_key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::has_key",1,"std::map< string,SWIGLUA_REF > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_REF >::has_key",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("RefMap_has_key",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)std_map_Sl_string_Sc_SWIGLUA_REF_Sg__has_key(arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RefMap(void *obj) {
std::map< string,SWIGLUA_REF > *arg1 = (std::map< string,SWIGLUA_REF > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RefMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RefMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RefMap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RefMap_methods[]= {
    { "size", _wrap_RefMap_size},
    { "empty", _wrap_RefMap_empty},
    { "clear", _wrap_RefMap_clear},
    { "get", _wrap_RefMap_get},
    { "set", _wrap_RefMap_set},
    { "del", _wrap_RefMap_del},
    { "has_key", _wrap_RefMap_has_key},
    {0,0}
};
static swig_lua_method swig_RefMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RefMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RefMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RefMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RefMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RefMap_SwigStatic = {
    "RefMap",
    swig_RefMap_SwigStatic_methods,
    swig_RefMap_SwigStatic_attributes,
    swig_RefMap_SwigStatic_constants,
    swig_RefMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RefMap_bases[] = {0};
static const char *swig_RefMap_base_names[] = {0};
static swig_lua_class _wrap_class_RefMap = { "RefMap", "RefMap", &SWIGTYPE_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,_proxy__wrap_new_RefMap, swig_delete_RefMap, swig_RefMap_methods, swig_RefMap_attributes, &swig_RefMap_SwigStatic, swig_RefMap_meta, swig_RefMap_bases, swig_RefMap_base_names };

static int _wrap_new_FuncMap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *result = 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::map",0,0)
  result = (std::map< string,SWIGLUA_FN > *)new std::map< string,SWIGLUA_FN >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncMap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,SWIGLUA_FN > *arg1 = 0 ;
  std::map< string,SWIGLUA_FN > *result = 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::map",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::map",1,"std::map< std::string,SWIGLUA_FN > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("new_FuncMap",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  result = (std::map< string,SWIGLUA_FN > *)new std::map< string,SWIGLUA_FN >((std::map< std::string,SWIGLUA_FN > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncMap(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FuncMap__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FuncMap__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FuncMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< string,SWIGLUA_FN >::map()\n"
    "    std::map< string,SWIGLUA_FN >::map(std::map< std::string,SWIGLUA_FN > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FuncMap_size(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::size",1,"std::map< string,SWIGLUA_FN > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("FuncMap_size",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  result = (unsigned int)((std::map< string,SWIGLUA_FN > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncMap_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::empty",1,"std::map< string,SWIGLUA_FN > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("FuncMap_empty",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  result = (bool)((std::map< string,SWIGLUA_FN > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::clear",1,"std::map< string,SWIGLUA_FN > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("FuncMap_clear",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncMap_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SWIGLUA_FN *result = 0 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::get",1,"std::map< string,SWIGLUA_FN > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::get",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("FuncMap_get",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (SWIGLUA_FN *) &std_map_Sl_string_Sc_SWIGLUA_FN_Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SWIGLUA_FN,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncMap_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) 0 ;
  std::string *arg2 = 0 ;
  SWIGLUA_FN *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::set",1,"std::map< string,SWIGLUA_FN > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::set",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::set",3,"SWIGLUA_FN const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("FuncMap_set",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SWIGLUA_FN,0))){
    SWIG_fail_ptr("FuncMap_set",3,SWIGTYPE_p_SWIGLUA_FN);
  }
  
  std_map_Sl_string_Sc_SWIGLUA_FN_Sg__set(arg1,(std::string const &)*arg2,(SWIGLUA_FN const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncMap_del(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::del",1,"std::map< string,SWIGLUA_FN > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::del",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("FuncMap_del",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    std_map_Sl_string_Sc_SWIGLUA_FN_Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncMap_has_key(lua_State* L) {
  int SWIG_arg = 0;
  std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("std::map< string,SWIGLUA_FN >::has_key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::has_key",1,"std::map< string,SWIGLUA_FN > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::map< string,SWIGLUA_FN >::has_key",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("FuncMap_has_key",1,SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)std_map_Sl_string_Sc_SWIGLUA_FN_Sg__has_key(arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FuncMap(void *obj) {
std::map< string,SWIGLUA_FN > *arg1 = (std::map< string,SWIGLUA_FN > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FuncMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FuncMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FuncMap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FuncMap_methods[]= {
    { "size", _wrap_FuncMap_size},
    { "empty", _wrap_FuncMap_empty},
    { "clear", _wrap_FuncMap_clear},
    { "get", _wrap_FuncMap_get},
    { "set", _wrap_FuncMap_set},
    { "del", _wrap_FuncMap_del},
    { "has_key", _wrap_FuncMap_has_key},
    {0,0}
};
static swig_lua_method swig_FuncMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FuncMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FuncMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FuncMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FuncMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FuncMap_SwigStatic = {
    "FuncMap",
    swig_FuncMap_SwigStatic_methods,
    swig_FuncMap_SwigStatic_attributes,
    swig_FuncMap_SwigStatic_constants,
    swig_FuncMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FuncMap_bases[] = {0};
static const char *swig_FuncMap_base_names[] = {0};
static swig_lua_class _wrap_class_FuncMap = { "FuncMap", "FuncMap", &SWIGTYPE_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,_proxy__wrap_new_FuncMap, swig_delete_FuncMap, swig_FuncMap_methods, swig_FuncMap_attributes, &swig_FuncMap_SwigStatic, swig_FuncMap_meta, swig_FuncMap_bases, swig_FuncMap_base_names };

static int _wrap_BitArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  std::vector< bool > *arg2 = (std::vector< bool > *) 0 ;
  
  SWIG_check_num_args("BitArray::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::v",1,"BitArray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BitArray::v",2,"std::vector< bool > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_v_set",1,SWIGTYPE_p_BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BitArray_v_set",2,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  std::vector< bool > *result = 0 ;
  
  SWIG_check_num_args("BitArray::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::v",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_v_get",1,SWIGTYPE_p_BitArray);
  }
  
  result = (std::vector< bool > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_bool_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *result = 0 ;
  
  SWIG_check_num_args("BitArray::BitArray",0,0)
  result = (BitArray *)new BitArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BitArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  BitArray *result = 0 ;
  
  SWIG_check_num_args("BitArray::BitArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BitArray::BitArray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (BitArray *)new BitArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BitArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = 0 ;
  BitArray *result = 0 ;
  
  SWIG_check_num_args("BitArray::BitArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BitArray::BitArray",1,"BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("new_BitArray",1,SWIGTYPE_p_BitArray);
  }
  
  result = (BitArray *)new BitArray((BitArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BitArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BitArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BitArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BitArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BitArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BitArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BitArray::BitArray()\n"
    "    BitArray::BitArray(size_t)\n"
    "    BitArray::BitArray(BitArray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BitArray_set(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("BitArray::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::set",1,"BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitArray::set",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("BitArray::set",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_set",1,SWIGTYPE_p_BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_get(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("BitArray::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::get",1,"BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitArray::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_get",1,SWIGTYPE_p_BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->get(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("BitArray::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::resize",1,"BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitArray::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_resize",1,SWIGTYPE_p_BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_size(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("BitArray::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::size",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_size",1,SWIGTYPE_p_BitArray);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("BitArray::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::max_size",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_max_size",1,SWIGTYPE_p_BitArray);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("BitArray::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::capacity",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_capacity",1,SWIGTYPE_p_BitArray);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("BitArray::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::empty",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_empty",1,SWIGTYPE_p_BitArray);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("BitArray::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::reserve",1,"BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitArray::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_reserve",1,SWIGTYPE_p_BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  
  SWIG_check_num_args("BitArray::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::shrink_to_fit",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_shrink_to_fit",1,SWIGTYPE_p_BitArray);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("BitArray::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::__getitem",1,"BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitArray::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___getitem",1,SWIGTYPE_p_BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->__getitem(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("BitArray::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::__setitem",1,"BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitArray::__setitem",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("BitArray::__setitem",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___setitem",1,SWIGTYPE_p_BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___add(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  BitArray *arg2 = 0 ;
  BitArray *result = 0 ;
  
  SWIG_check_num_args("BitArray::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::operator +",1,"BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BitArray::operator +",2,"BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___add",1,SWIGTYPE_p_BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___add",2,SWIGTYPE_p_BitArray);
  }
  
  result = (BitArray *) &(arg1)->operator +((BitArray const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BitArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_at(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("BitArray::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::at",1,"BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BitArray::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_at",1,SWIGTYPE_p_BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->at(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_front(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("BitArray::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::front",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_front",1,SWIGTYPE_p_BitArray);
  }
  
  result = (bool)(arg1)->front();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_back(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("BitArray::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::back",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_back",1,SWIGTYPE_p_BitArray);
  }
  
  result = (bool)(arg1)->back();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("BitArray::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::push_back",1,"BitArray *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("BitArray::push_back",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_push_back",1,SWIGTYPE_p_BitArray);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  
  SWIG_check_num_args("BitArray::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::pop_back",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_pop_back",1,SWIGTYPE_p_BitArray);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  
  SWIG_check_num_args("BitArray::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::clear",1,"BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray_clear",1,SWIGTYPE_p_BitArray);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___eq(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  BitArray *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("BitArray::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::operator ==",1,"BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BitArray::operator ==",2,"BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___eq",1,SWIGTYPE_p_BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___eq",2,SWIGTYPE_p_BitArray);
  }
  
  result = (bool)(arg1)->operator ==((BitArray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___lt(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  BitArray *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("BitArray::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::operator <",1,"BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BitArray::operator <",2,"BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___lt",1,SWIGTYPE_p_BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___lt",2,SWIGTYPE_p_BitArray);
  }
  
  result = (bool)(arg1)->operator <((BitArray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___le(lua_State* L) {
  int SWIG_arg = 0;
  BitArray *arg1 = (BitArray *) 0 ;
  BitArray *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("BitArray::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BitArray::operator <=",1,"BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BitArray::operator <=",2,"BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___le",1,SWIGTYPE_p_BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BitArray,0))){
    SWIG_fail_ptr("BitArray___le",2,SWIGTYPE_p_BitArray);
  }
  
  result = (bool)(arg1)->operator <=((BitArray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BitArray(void *obj) {
BitArray *arg1 = (BitArray *) obj;
delete arg1;
}
static int _proxy__wrap_new_BitArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BitArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BitArray_attributes[] = {
    { "v", _wrap_BitArray_v_get, _wrap_BitArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_BitArray_methods[]= {
    { "set", _wrap_BitArray_set},
    { "get", _wrap_BitArray_get},
    { "resize", _wrap_BitArray_resize},
    { "size", _wrap_BitArray_size},
    { "max_size", _wrap_BitArray_max_size},
    { "capacity", _wrap_BitArray_capacity},
    { "empty", _wrap_BitArray_empty},
    { "reserve", _wrap_BitArray_reserve},
    { "shrink_to_fit", _wrap_BitArray_shrink_to_fit},
    { "__getitem", _wrap_BitArray___getitem},
    { "__setitem", _wrap_BitArray___setitem},
    { "__add", _wrap_BitArray___add},
    { "at", _wrap_BitArray_at},
    { "front", _wrap_BitArray_front},
    { "back", _wrap_BitArray_back},
    { "push_back", _wrap_BitArray_push_back},
    { "pop_back", _wrap_BitArray_pop_back},
    { "clear", _wrap_BitArray_clear},
    { "__eq", _wrap_BitArray___eq},
    { "__lt", _wrap_BitArray___lt},
    { "__le", _wrap_BitArray___le},
    {0,0}
};
static swig_lua_method swig_BitArray_meta[] = {
    { "__getitem", _wrap_BitArray___getitem},
    { "__setitem", _wrap_BitArray___setitem},
    { "__add", _wrap_BitArray___add},
    { "__eq", _wrap_BitArray___eq},
    { "__lt", _wrap_BitArray___lt},
    { "__le", _wrap_BitArray___le},
    {0,0}
};

static swig_lua_attribute swig_BitArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BitArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BitArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BitArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BitArray_Sf_SwigStatic = {
    "BitArray",
    swig_BitArray_Sf_SwigStatic_methods,
    swig_BitArray_Sf_SwigStatic_attributes,
    swig_BitArray_Sf_SwigStatic_constants,
    swig_BitArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BitArray_bases[] = {0};
static const char *swig_BitArray_base_names[] = {0};
static swig_lua_class _wrap_class_BitArray = { "BitArray", "BitArray", &SWIGTYPE_p_BitArray,_proxy__wrap_new_BitArray, swig_delete_BitArray, swig_BitArray_methods, swig_BitArray_attributes, &swig_BitArray_Sf_SwigStatic, swig_BitArray_meta, swig_BitArray_bases, swig_BitArray_base_names };

static int _wrap_RegEx_e_set(lua_State* L) {
  int SWIG_arg = 0;
  RegEx *arg1 = (RegEx *) 0 ;
  std::regex arg2 ;
  std::regex *argp2 ;
  
  SWIG_check_num_args("RegEx::e",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RegEx::e",1,"RegEx *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RegEx::e",2,"std::regex");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RegEx,0))){
    SWIG_fail_ptr("RegEx_e_set",1,SWIGTYPE_p_RegEx);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__regex,0))){
    SWIG_fail_ptr("RegEx_e_set",2,SWIGTYPE_p_std__regex);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->e = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RegEx_e_get(lua_State* L) {
  int SWIG_arg = 0;
  RegEx *arg1 = (RegEx *) 0 ;
  std::regex result;
  
  SWIG_check_num_args("RegEx::e",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RegEx::e",1,"RegEx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RegEx,0))){
    SWIG_fail_ptr("RegEx_e_get",1,SWIGTYPE_p_RegEx);
  }
  
  result =  ((arg1)->e);
  {
    std::regex * resultptr = new std::regex((const std::regex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__regex,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RegEx(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  RegEx *result = 0 ;
  
  SWIG_check_num_args("RegEx::RegEx",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("RegEx::RegEx",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (RegEx *)new RegEx((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RegEx,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RegEx_match(lua_State* L) {
  int SWIG_arg = 0;
  RegEx *arg1 = (RegEx *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("RegEx::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RegEx::match",1,"RegEx *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RegEx::match",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RegEx,0))){
    SWIG_fail_ptr("RegEx_match",1,SWIGTYPE_p_RegEx);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->match((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RegEx_search(lua_State* L) {
  int SWIG_arg = 0;
  RegEx *arg1 = (RegEx *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("RegEx::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RegEx::search",1,"RegEx *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RegEx::search",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RegEx,0))){
    SWIG_fail_ptr("RegEx_search",1,SWIGTYPE_p_RegEx);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->search((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RegEx_replace(lua_State* L) {
  int SWIG_arg = 0;
  RegEx *arg1 = (RegEx *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string result;
  
  SWIG_check_num_args("RegEx::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RegEx::replace",1,"RegEx *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RegEx::replace",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("RegEx::replace",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RegEx,0))){
    SWIG_fail_ptr("RegEx_replace",1,SWIGTYPE_p_RegEx);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (arg1)->replace((std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RegEx(void *obj) {
RegEx *arg1 = (RegEx *) obj;
delete arg1;
}
static int _proxy__wrap_new_RegEx(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RegEx);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RegEx_attributes[] = {
    { "e", _wrap_RegEx_e_get, _wrap_RegEx_e_set },
    {0,0,0}
};
static swig_lua_method swig_RegEx_methods[]= {
    { "match", _wrap_RegEx_match},
    { "search", _wrap_RegEx_search},
    { "replace", _wrap_RegEx_replace},
    {0,0}
};
static swig_lua_method swig_RegEx_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RegEx_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RegEx_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RegEx_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RegEx_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RegEx_Sf_SwigStatic = {
    "RegEx",
    swig_RegEx_Sf_SwigStatic_methods,
    swig_RegEx_Sf_SwigStatic_attributes,
    swig_RegEx_Sf_SwigStatic_constants,
    swig_RegEx_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RegEx_bases[] = {0};
static const char *swig_RegEx_base_names[] = {0};
static swig_lua_class _wrap_class_RegEx = { "RegEx", "RegEx", &SWIGTYPE_p_RegEx,_proxy__wrap_new_RegEx, swig_delete_RegEx, swig_RegEx_methods, swig_RegEx_attributes, &swig_RegEx_Sf_SwigStatic, swig_RegEx_meta, swig_RegEx_bases, swig_RegEx_base_names };

static int _wrap_String_str_set(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("String::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::str",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::str",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_str_set",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->str = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_str_get(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("String::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::str",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_str_get",1,SWIGTYPE_p_String);
  }
  
  result = (std::string *) & ((arg1)->str);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *result = 0 ;
  
  SWIG_check_num_args("String::String",0,0)
  result = (String *)new String();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::String",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("String::String",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (String *)new String((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::String",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("String::String",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (String *)new String((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = 0 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::String",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("String::String",1,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("new_String",1,SWIGTYPE_p_String);
  }
  
  result = (String *)new String((String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_String__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_String__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_String__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_String__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_String'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::String()\n"
    "    String::String(char const *)\n"
    "    String::String(std::string const &)\n"
    "    String::String(String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_String___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::operator +",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::operator +",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___add",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (String *) &(arg1)->operator +((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::operator +",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::operator +",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___add",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (String *) &(arg1)->operator +((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::operator +",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::operator +",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___add",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___add",2,SWIGTYPE_p_String);
  }
  
  result = (String *) &(arg1)->operator +((String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::operator +(char const *)\n"
    "    String::operator +(std::string const &)\n"
    "    String::operator +(String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_String___getitem(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("String::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::__getitem",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___getitem",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)(arg1)->__getitem(arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String___setitem(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("String::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::__setitem",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::__setitem",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("String::__setitem",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___setitem",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_size(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::size",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_size",1,SWIGTYPE_p_String);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_length(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::length",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_length",1,SWIGTYPE_p_String);
  }
  
  result = (arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_resize(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("String::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::resize",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_resize",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_capacity(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::capacity",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_capacity",1,SWIGTYPE_p_String);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_reserve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("String::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::reserve",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_reserve",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_reserve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  
  SWIG_check_num_args("String::reserve",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::reserve",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_reserve",1,SWIGTYPE_p_String);
  }
  
  (arg1)->reserve();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_reserve(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_String_reserve__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_reserve__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_reserve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::reserve(size_t)\n"
    "    String::reserve()\n");
  lua_error(L);return 0;
}


static int _wrap_String_clear(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  
  SWIG_check_num_args("String::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::clear",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_clear",1,SWIGTYPE_p_String);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_empty(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  bool result;
  
  SWIG_check_num_args("String::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::empty",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_empty",1,SWIGTYPE_p_String);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_at(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("String::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::at",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_at",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_back(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("String::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::back",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_back",1,SWIGTYPE_p_String);
  }
  
  result = (char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_front(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("String::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::front",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_front",1,SWIGTYPE_p_String);
  }
  
  result = (char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_cat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  String result;
  
  SWIG_check_num_args("String::cat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::cat",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::cat",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_cat",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->cat((char const *)arg2);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_cat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  String result;
  
  SWIG_check_num_args("String::cat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::cat",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::cat",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_cat",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->cat((std::string const &)*arg2);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_cat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  SWIG_check_num_args("String::cat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::cat",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::cat",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_cat",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_cat",2,SWIGTYPE_p_String);
  }
  
  result = (arg1)->cat((String const &)*arg2);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_cat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_cat__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_cat__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_cat__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_cat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::cat(char const *)\n"
    "    String::cat(std::string const &)\n"
    "    String::cat(String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_String_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::append",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::append",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_append",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (String *) &(arg1)->append((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::append",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::append",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_append",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (String *) &(arg1)->append((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_append__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::append",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::append",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_append",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_append",2,SWIGTYPE_p_String);
  }
  
  result = (String *) &(arg1)->append((String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_append__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_append__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_append__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::append(char const *)\n"
    "    String::append(std::string const &)\n"
    "    String::append(String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_String_push_back(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("String::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::push_back",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::push_back",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_push_back",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  
  SWIG_check_num_args("String::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::pop_back",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_pop_back",1,SWIGTYPE_p_String);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_assign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  
  SWIG_check_num_args("String::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::assign",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::assign",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",2,SWIGTYPE_p_String);
  }
  
  (arg1)->assign((String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_assign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("String::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::assign",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_assign__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("String::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::assign",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::assign",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->assign((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_assign__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("String::assign",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::assign",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::assign",2,"String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::assign",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::assign",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",2,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->assign((String const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_assign__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("String::assign",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::assign",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::assign",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::assign",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::assign",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->assign((char const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_assign__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("String::assign",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::assign",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::assign",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::assign",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::assign",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_assign",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->assign((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_assign(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_assign__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_assign__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_assign__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_assign__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_assign__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_assign__SWIG_5(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_assign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::assign(String const &)\n"
    "    String::assign(char const *)\n"
    "    String::assign(std::string const &)\n"
    "    String::assign(String const &,size_t,size_t)\n"
    "    String::assign(char const *,size_t,size_t)\n"
    "    String::assign(std::string const &,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_String_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  String *arg3 = 0 ;
  String result;
  
  SWIG_check_num_args("String::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::insert",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("String::insert",3,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_insert",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_insert",3,SWIGTYPE_p_String);
  }
  
  result = (arg1)->insert(arg2,(String const &)*arg3);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  String result;
  
  SWIG_check_num_args("String::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::insert",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::insert",2,"size_t");
  if(!lua_isstring(L,3)) SWIG_fail_arg("String::insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_insert",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (arg1)->insert(arg2,(std::string const &)*arg3);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  String result;
  
  SWIG_check_num_args("String::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::insert",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::insert",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("String::insert",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_insert",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (arg1)->insert(arg2,(char const *)arg3);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_insert__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  String result;
  
  SWIG_check_num_args("String::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::insert",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::insert",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("String::insert",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::insert",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_insert",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->insert(arg2,(char const *)arg3,arg4);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_insert__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  char arg4 ;
  String result;
  
  SWIG_check_num_args("String::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::insert",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::insert",3,"size_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("String::insert",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_insert",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_tostring(L, 4))[0];
  result = (arg1)->insert(arg2,arg3,arg4);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_String_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_insert__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_insert__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_String_insert__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_insert__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::insert(size_t,String const &)\n"
    "    String::insert(size_t,std::string const &)\n"
    "    String::insert(size_t,char const *)\n"
    "    String::insert(size_t,char const *,size_t)\n"
    "    String::insert(size_t,size_t,char)\n");
  lua_error(L);return 0;
}


static int _wrap_String_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::erase",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_erase",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (String *) &(arg1)->erase(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::erase",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_erase",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (String *) &(arg1)->erase(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_erase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *result = 0 ;
  
  SWIG_check_num_args("String::erase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::erase",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_erase",1,SWIGTYPE_p_String);
  }
  
  result = (String *) &(arg1)->erase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_String_erase__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::erase(size_t,size_t)\n"
    "    String::erase(size_t)\n"
    "    String::erase()\n");
  lua_error(L);return 0;
}


static int _wrap_String_replace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  String *arg4 = 0 ;
  String result;
  
  SWIG_check_num_args("String::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::replace",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::replace",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("String::replace",4,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_replace",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_replace",4,SWIGTYPE_p_String);
  }
  
  result = (arg1)->replace(arg2,arg3,(String const &)*arg4);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_replace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  String *arg4 = 0 ;
  size_t arg5 ;
  size_t arg6 ;
  String result;
  
  SWIG_check_num_args("String::replace",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::replace",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::replace",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("String::replace",4,"String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("String::replace",5,"size_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("String::replace",6,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_replace",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_replace",4,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (size_t)lua_tonumber(L, 6);
  result = (arg1)->replace(arg2,arg3,(String const &)*arg4,arg5,arg6);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_replace__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  String result;
  
  SWIG_check_num_args("String::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::replace",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::replace",3,"size_t");
  if(!lua_isstring(L,4)) SWIG_fail_arg("String::replace",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_replace",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_replace__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  String result;
  
  SWIG_check_num_args("String::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::replace",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::replace",3,"size_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("String::replace",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_replace",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (arg1)->replace(arg2,arg3,(char const *)arg4);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_replace__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  String result;
  
  SWIG_check_num_args("String::replace",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::replace",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::replace",3,"size_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("String::replace",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("String::replace",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_replace",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->replace(arg2,arg3,(char const *)arg4,arg5);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_replace(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_String_replace__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_replace__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_replace__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_String_replace__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_String_replace__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_replace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::replace(size_t,size_t,String const &)\n"
    "    String::replace(size_t,size_t,String const &,size_t,size_t)\n"
    "    String::replace(size_t,size_t,std::string const &)\n"
    "    String::replace(size_t,size_t,char const *)\n"
    "    String::replace(size_t,size_t,char const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_String_swap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  
  SWIG_check_num_args("String::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::swap",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::swap",2,"String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_swap",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_swap",2,SWIGTYPE_p_String);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_swap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("String::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::swap",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::swap",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_swap",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("String_swap",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_swap(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_swap__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_swap__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_swap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::swap(String &)\n"
    "    String::swap(std::string &)\n");
  lua_error(L);return 0;
}


static int _wrap_String_c_str(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("String::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::c_str",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_c_str",1,SWIGTYPE_p_String);
  }
  
  result = (char *)(arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_data(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("String::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::data",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_data",1,SWIGTYPE_p_String);
  }
  
  result = (char *)(arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_copy(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  SWIG_check_num_args("String::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::copy",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::copy",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::copy",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::copy",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_copy",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->copy(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find",2,"String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",2,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((String const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",2,SWIGTYPE_p_String);
  }
  
  result = (arg1)->find((String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->find((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  SWIG_check_num_args("String::find",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::find",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->find((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t result;
  
  SWIG_check_num_args("String::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (arg1)->find(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_find__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_String_find__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_find__SWIG_6(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::find(String const &,size_t)\n"
    "    String::find(String const &)\n"
    "    String::find(std::string const &,size_t)\n"
    "    String::find(std::string const &)\n"
    "    String::find(char const *,size_t)\n"
    "    String::find(char const *)\n"
    "    String::find(char const *,size_t,size_t)\n"
    "    String::find(char,size_t)\n"
    "    String::find(char)\n");
  lua_error(L);return 0;
}


static int _wrap_String_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::rfind",2,"String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",2,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((String const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::rfind",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",2,SWIGTYPE_p_String);
  }
  
  result = (arg1)->rfind((String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::rfind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::rfind",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->rfind((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::rfind",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::rfind",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->rfind((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::rfind",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::rfind",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::rfind",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->rfind((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::rfind",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t result;
  
  SWIG_check_num_args("String::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::rfind",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::rfind",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_rfind",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (arg1)->rfind(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_rfind(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_String_rfind__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_rfind__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_rfind__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_rfind__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_rfind__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_rfind__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_rfind__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_rfind__SWIG_6(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::rfind(String const &,size_t)\n"
    "    String::rfind(String const &)\n"
    "    String::rfind(std::string const &,size_t)\n"
    "    String::rfind(std::string const &)\n"
    "    String::rfind(char const *,size_t)\n"
    "    String::rfind(char const *)\n"
    "    String::rfind(char const *,size_t,size_t)\n"
    "    String::rfind(char,size_t)\n"
    "    String::rfind(char)\n");
  lua_error(L);return 0;
}


static int _wrap_String_find_first_of__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_first_of",2,"String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",2,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_of((String const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_first_of",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",2,SWIGTYPE_p_String);
  }
  
  result = (arg1)->find_first_of((String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_first_of",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_of((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_first_of",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find_first_of((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_of((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_of",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->find_first_of((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_of",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::find_first_of",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->find_first_of((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_of",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_of(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_of",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (arg1)->find_first_of(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_of(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_find_first_of__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_String_find_first_of__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_first_of__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_first_of__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_of__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_of__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_of__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_of__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_find_first_of__SWIG_6(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_find_first_of'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::find_first_of(String const &,size_t)\n"
    "    String::find_first_of(String const &)\n"
    "    String::find_first_of(std::string const &,size_t)\n"
    "    String::find_first_of(std::string const &)\n"
    "    String::find_first_of(char const *,size_t)\n"
    "    String::find_first_of(char const *)\n"
    "    String::find_first_of(char const *,size_t,size_t)\n"
    "    String::find_first_of(char,size_t)\n"
    "    String::find_first_of(char)\n");
  lua_error(L);return 0;
}


static int _wrap_String_find_last_of__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_last_of",2,"String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",2,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_of((String const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_last_of",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",2,SWIGTYPE_p_String);
  }
  
  result = (arg1)->find_last_of((String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_last_of",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_of((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_last_of",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find_last_of((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_of((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_of",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->find_last_of((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_of",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::find_last_of",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->find_last_of((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_of",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_of(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_of",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (arg1)->find_last_of(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_of(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_find_last_of__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_String_find_last_of__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_last_of__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_last_of__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_of__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_of__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_of__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_of__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_find_last_of__SWIG_6(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_find_last_of'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::find_last_of(String const &,size_t)\n"
    "    String::find_last_of(String const &)\n"
    "    String::find_last_of(std::string const &,size_t)\n"
    "    String::find_last_of(std::string const &)\n"
    "    String::find_last_of(char const *,size_t)\n"
    "    String::find_last_of(char const *)\n"
    "    String::find_last_of(char const *,size_t,size_t)\n"
    "    String::find_last_of(char,size_t)\n"
    "    String::find_last_of(char)\n");
  lua_error(L);return 0;
}


static int _wrap_String_find_first_not_of__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",2,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_not_of((String const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",2,SWIGTYPE_p_String);
  }
  
  result = (arg1)->find_first_not_of((String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_not_of((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find_first_not_of((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_not_of((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->find_first_not_of((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_not_of",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::find_first_not_of",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->find_first_not_of((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_first_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_first_not_of(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_first_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_first_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_first_not_of",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_first_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (arg1)->find_first_not_of(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_first_not_of(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_find_first_not_of__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_String_find_first_not_of__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_first_not_of__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_first_not_of__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_not_of__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_not_of__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_not_of__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_first_not_of__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_find_first_not_of__SWIG_6(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_find_first_not_of'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::find_first_not_of(String const &,size_t)\n"
    "    String::find_first_not_of(String const &)\n"
    "    String::find_first_not_of(std::string const &,size_t)\n"
    "    String::find_first_not_of(std::string const &)\n"
    "    String::find_first_not_of(char const *,size_t)\n"
    "    String::find_first_not_of(char const *)\n"
    "    String::find_first_not_of(char const *,size_t,size_t)\n"
    "    String::find_first_not_of(char,size_t)\n"
    "    String::find_first_not_of(char)\n");
  lua_error(L);return 0;
}


static int _wrap_String_find_last_not_of__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",2,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_not_of((String const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",2,SWIGTYPE_p_String);
  }
  
  result = (arg1)->find_last_not_of((String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_not_of((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find_last_not_of((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_not_of((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->find_last_not_of((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_not_of",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("String::find_last_not_of",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->find_last_not_of((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::find_last_not_of",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find_last_not_of(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  size_t result;
  
  SWIG_check_num_args("String::find_last_not_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::find_last_not_of",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::find_last_not_of",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_find_last_not_of",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (arg1)->find_last_not_of(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_find_last_not_of(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_find_last_not_of__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_String_find_last_not_of__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_last_not_of__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_find_last_not_of__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_not_of__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_not_of__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_not_of__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_find_last_not_of__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_String_find_last_not_of__SWIG_6(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_find_last_not_of'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::find_last_not_of(String const &,size_t)\n"
    "    String::find_last_not_of(String const &)\n"
    "    String::find_last_not_of(std::string const &,size_t)\n"
    "    String::find_last_not_of(std::string const &)\n"
    "    String::find_last_not_of(char const *,size_t)\n"
    "    String::find_last_not_of(char const *)\n"
    "    String::find_last_not_of(char const *,size_t,size_t)\n"
    "    String::find_last_not_of(char,size_t)\n"
    "    String::find_last_not_of(char)\n");
  lua_error(L);return 0;
}


static int _wrap_String_substr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  String result;
  
  SWIG_check_num_args("String::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::substr",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("String::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_substr",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_substr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  size_t arg2 ;
  String result;
  
  SWIG_check_num_args("String::substr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::substr",1,"String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("String::substr",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_substr",1,SWIGTYPE_p_String);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->substr(arg2);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_substr__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String result;
  
  SWIG_check_num_args("String::substr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::substr",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_substr",1,SWIGTYPE_p_String);
  }
  
  result = (arg1)->substr();
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_substr(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_String_substr__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_substr__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_String_substr__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_substr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::substr(size_t,size_t)\n"
    "    String::substr(size_t)\n"
    "    String::substr()\n");
  lua_error(L);return 0;
}


static int _wrap_String_compare__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("String::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::compare",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::compare",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_compare",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_compare",2,SWIGTYPE_p_String);
  }
  
  result = (int)(arg1)->compare((String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_compare__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("String::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::compare",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::compare",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_compare",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->compare((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_compare(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String_compare__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String_compare__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String_compare'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::compare(String const &)\n"
    "    String::compare(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_String___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("String::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::operator ==",1,"String *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("String::operator ==",2,"String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___eq",1,SWIGTYPE_p_String);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___eq",2,SWIGTYPE_p_String);
  }
  
  result = (bool)(arg1)->operator ==((String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("String::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::operator ==",1,"String *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("String::operator ==",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___eq",1,SWIGTYPE_p_String);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->operator ==((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("String::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::operator ==",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::operator ==",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String___eq",1,SWIGTYPE_p_String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->operator ==((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_String, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_String___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_String___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'String___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    String::operator ==(String const &)\n"
    "    String::operator ==(std::string const &)\n"
    "    String::operator ==(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_String_fill(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("String::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::fill",1,"String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("String::fill",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_fill",1,SWIGTYPE_p_String);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_reverse(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  
  SWIG_check_num_args("String::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::reverse",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_reverse",1,SWIGTYPE_p_String);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  String *arg1 = (String *) 0 ;
  
  SWIG_check_num_args("String::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("String::random_shuffle",1,"String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("String_random_shuffle",1,SWIGTYPE_p_String);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_String(void *obj) {
String *arg1 = (String *) obj;
delete arg1;
}
static int _proxy__wrap_new_String(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_String);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_String_attributes[] = {
    { "str", _wrap_String_str_get, _wrap_String_str_set },
    {0,0,0}
};
static swig_lua_method swig_String_methods[]= {
    { "__add", _wrap_String___add},
    { "__getitem", _wrap_String___getitem},
    { "__setitem", _wrap_String___setitem},
    { "size", _wrap_String_size},
    { "length", _wrap_String_length},
    { "resize", _wrap_String_resize},
    { "capacity", _wrap_String_capacity},
    { "reserve", _wrap_String_reserve},
    { "clear", _wrap_String_clear},
    { "empty", _wrap_String_empty},
    { "at", _wrap_String_at},
    { "back", _wrap_String_back},
    { "front", _wrap_String_front},
    { "cat", _wrap_String_cat},
    { "append", _wrap_String_append},
    { "push_back", _wrap_String_push_back},
    { "pop_back", _wrap_String_pop_back},
    { "assign", _wrap_String_assign},
    { "insert", _wrap_String_insert},
    { "erase", _wrap_String_erase},
    { "replace", _wrap_String_replace},
    { "swap", _wrap_String_swap},
    { "c_str", _wrap_String_c_str},
    { "data", _wrap_String_data},
    { "copy", _wrap_String_copy},
    { "find", _wrap_String_find},
    { "rfind", _wrap_String_rfind},
    { "find_first_of", _wrap_String_find_first_of},
    { "find_last_of", _wrap_String_find_last_of},
    { "find_first_not_of", _wrap_String_find_first_not_of},
    { "find_last_not_of", _wrap_String_find_last_not_of},
    { "substr", _wrap_String_substr},
    { "compare", _wrap_String_compare},
    { "__eq", _wrap_String___eq},
    { "fill", _wrap_String_fill},
    { "reverse", _wrap_String_reverse},
    { "random_shuffle", _wrap_String_random_shuffle},
    {0,0}
};
static swig_lua_method swig_String_meta[] = {
    { "__add", _wrap_String___add},
    { "__getitem", _wrap_String___getitem},
    { "__setitem", _wrap_String___setitem},
    { "__eq", _wrap_String___eq},
    {0,0}
};

static swig_lua_attribute swig_String_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_String_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_String_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_String_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_String_Sf_SwigStatic = {
    "String",
    swig_String_Sf_SwigStatic_methods,
    swig_String_Sf_SwigStatic_attributes,
    swig_String_Sf_SwigStatic_constants,
    swig_String_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_String_bases[] = {0};
static const char *swig_String_base_names[] = {0};
static swig_lua_class _wrap_class_String = { "String", "String", &SWIGTYPE_p_String,_proxy__wrap_new_String, swig_delete_String, swig_String_methods, swig_String_attributes, &swig_String_Sf_SwigStatic, swig_String_meta, swig_String_bases, swig_String_base_names };

static int _wrap_FloatArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("Array< float >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::v",1,"Array< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< float >::v",2,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_v_set",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatArray_v_set",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("Array< float >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::v",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_v_get",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (std::vector< float > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *result = 0 ;
  
  SWIG_check_num_args("Array< float >::Array",0,0)
  result = (Array< float > *)new Array< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< float > *result = 0 ;
  
  SWIG_check_num_args("Array< float >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< float >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< float > *)new Array< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  Array< float > *result = 0 ;
  
  SWIG_check_num_args("Array< float >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< float >::Array",1,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatArray",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (Array< float > *)new Array< float >((Array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  Array< float > *result = 0 ;
  
  SWIG_check_num_args("Array< float >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< float >::Array",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatArray",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (Array< float > *)new Array< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< float >::Array()\n"
    "    Array< float >::Array(size_t)\n"
    "    Array< float >::Array(Array< float > const &)\n"
    "    Array< float >::Array(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Array< float >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::set",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< float >::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_set",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("Array< float >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::get",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_get",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::resize",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_resize",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::size",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_size",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::max_size",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_max_size",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::capacity",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_capacity",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::empty",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_empty",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::reserve",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_reserve",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  
  SWIG_check_num_args("Array< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::shrink_to_fit",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_shrink_to_fit",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("Array< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::__getitem",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___getitem",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Array< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::__setitem",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< float >::__setitem",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___setitem",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  Array< float > *arg2 = 0 ;
  Array< float > result;
  
  SWIG_check_num_args("Array< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::operator +",1,"Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< float >::operator +",2,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___add",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___add",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (arg1)->operator +((Array< float > const &)*arg2);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("Array< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::at",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_at",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("Array< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::front",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_front",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (float)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("Array< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::back",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_back",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (float)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Array< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::data",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_data",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  Array< float > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< float >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::insert",1,"Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< float >::insert",2,"Array< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< float >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_insert",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_insert",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< float > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  Array< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< float >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::copy",1,"Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< float >::copy",2,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_copy",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_copy",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  Array< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< float >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::copy_backward",1,"Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< float >::copy_backward",2,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_copy_backward",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_copy_backward",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Array< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::push_back",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::push_back",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_push_back",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  
  SWIG_check_num_args("Array< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::pop_back",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_pop_back",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  
  SWIG_check_num_args("Array< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::clear",1,"Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_clear",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  Array< float > result;
  
  SWIG_check_num_args("Array< float >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::slice",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_slice",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< float > result;
  
  SWIG_check_num_args("Array< float >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::slice",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< float >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_slice",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< float > result;
  
  SWIG_check_num_args("Array< float >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::slice",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< float >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< float >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_slice",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatArray_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatArray_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatArray_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< float >::slice(size_t)\n"
    "    Array< float >::slice(size_t,size_t)\n"
    "    Array< float >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::erase",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_erase",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< float >::erase",1,"Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_erase",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatArray_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatArray_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< float >::erase(size_t)\n"
    "    Array< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatArray(void *obj) {
Array< float > *arg1 = (Array< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatArray_attributes[] = {
    { "v", _wrap_FloatArray_v_get, _wrap_FloatArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_FloatArray_methods[]= {
    { "set", _wrap_FloatArray_set},
    { "get", _wrap_FloatArray_get},
    { "resize", _wrap_FloatArray_resize},
    { "size", _wrap_FloatArray_size},
    { "max_size", _wrap_FloatArray_max_size},
    { "capacity", _wrap_FloatArray_capacity},
    { "empty", _wrap_FloatArray_empty},
    { "reserve", _wrap_FloatArray_reserve},
    { "shrink_to_fit", _wrap_FloatArray_shrink_to_fit},
    { "__getitem", _wrap_FloatArray___getitem},
    { "__setitem", _wrap_FloatArray___setitem},
    { "__add", _wrap_FloatArray___add},
    { "at", _wrap_FloatArray_at},
    { "front", _wrap_FloatArray_front},
    { "back", _wrap_FloatArray_back},
    { "data", _wrap_FloatArray_data},
    { "insert", _wrap_FloatArray_insert},
    { "copy", _wrap_FloatArray_copy},
    { "copy_backward", _wrap_FloatArray_copy_backward},
    { "push_back", _wrap_FloatArray_push_back},
    { "pop_back", _wrap_FloatArray_pop_back},
    { "clear", _wrap_FloatArray_clear},
    { "slice", _wrap_FloatArray_slice},
    { "erase", _wrap_FloatArray_erase},
    {0,0}
};
static swig_lua_method swig_FloatArray_meta[] = {
    { "__getitem", _wrap_FloatArray___getitem},
    { "__setitem", _wrap_FloatArray___setitem},
    { "__add", _wrap_FloatArray___add},
    {0,0}
};

static swig_lua_attribute swig_FloatArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatArray_Sf_SwigStatic = {
    "FloatArray",
    swig_FloatArray_Sf_SwigStatic_methods,
    swig_FloatArray_Sf_SwigStatic_attributes,
    swig_FloatArray_Sf_SwigStatic_constants,
    swig_FloatArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatArray_bases[] = {0};
static const char *swig_FloatArray_base_names[] = {0};
static swig_lua_class _wrap_class_FloatArray = { "FloatArray", "FloatArray", &SWIGTYPE_p_ArrayT_float_t,_proxy__wrap_new_FloatArray, swig_delete_FloatArray, swig_FloatArray_methods, swig_FloatArray_attributes, &swig_FloatArray_Sf_SwigStatic, swig_FloatArray_meta, swig_FloatArray_bases, swig_FloatArray_base_names };

static int _wrap_DoubleArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("Array< double >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::v",1,"Array< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< double >::v",2,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_v_set",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_v_set",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("Array< double >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::v",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_v_get",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (std::vector< double > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *result = 0 ;
  
  SWIG_check_num_args("Array< double >::Array",0,0)
  result = (Array< double > *)new Array< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< double > *result = 0 ;
  
  SWIG_check_num_args("Array< double >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< double >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< double > *)new Array< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = 0 ;
  Array< double > *result = 0 ;
  
  SWIG_check_num_args("Array< double >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< double >::Array",1,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("new_DoubleArray",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (Array< double > *)new Array< double >((Array< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  Array< double > *result = 0 ;
  
  SWIG_check_num_args("Array< double >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< double >::Array",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleArray",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (Array< double > *)new Array< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< double >::Array()\n"
    "    Array< double >::Array(size_t)\n"
    "    Array< double >::Array(Array< double > const &)\n"
    "    Array< double >::Array(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Array< double >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::set",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< double >::set",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_set",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("Array< double >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::get",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_get",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::resize",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_resize",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::size",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_size",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::max_size",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_max_size",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::capacity",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_capacity",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::empty",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_empty",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::reserve",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_reserve",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  
  SWIG_check_num_args("Array< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::shrink_to_fit",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_shrink_to_fit",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("Array< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::__getitem",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___getitem",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Array< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::__setitem",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< double >::__setitem",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___setitem",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  Array< double > *arg2 = 0 ;
  Array< double > result;
  
  SWIG_check_num_args("Array< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::operator +",1,"Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< double >::operator +",2,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___add",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___add",2,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (arg1)->operator +((Array< double > const &)*arg2);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("Array< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::at",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_at",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("Array< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::front",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_front",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (double)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("Array< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::back",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_back",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (double)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Array< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::data",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_data",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  Array< double > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< double >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::insert",1,"Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< double >::insert",2,"Array< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< double >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_insert",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_insert",2,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< double > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  Array< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< double >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::copy",1,"Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< double >::copy",2,"Array< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_copy",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_copy",2,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  Array< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< double >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::copy_backward",1,"Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< double >::copy_backward",2,"Array< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_copy_backward",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_copy_backward",2,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Array< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::push_back",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::push_back",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_push_back",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  
  SWIG_check_num_args("Array< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::pop_back",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_pop_back",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  
  SWIG_check_num_args("Array< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::clear",1,"Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_clear",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  Array< double > result;
  
  SWIG_check_num_args("Array< double >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::slice",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_slice",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< double > result;
  
  SWIG_check_num_args("Array< double >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::slice",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< double >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_slice",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< double > result;
  
  SWIG_check_num_args("Array< double >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::slice",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< double >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< double >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_slice",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleArray_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleArray_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleArray_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< double >::slice(size_t)\n"
    "    Array< double >::slice(size_t,size_t)\n"
    "    Array< double >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::erase",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_erase",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = (Array< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< double >::erase",1,"Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_erase",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleArray_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleArray_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< double >::erase(size_t)\n"
    "    Array< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_DoubleArray(void *obj) {
Array< double > *arg1 = (Array< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleArray_attributes[] = {
    { "v", _wrap_DoubleArray_v_get, _wrap_DoubleArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleArray_methods[]= {
    { "set", _wrap_DoubleArray_set},
    { "get", _wrap_DoubleArray_get},
    { "resize", _wrap_DoubleArray_resize},
    { "size", _wrap_DoubleArray_size},
    { "max_size", _wrap_DoubleArray_max_size},
    { "capacity", _wrap_DoubleArray_capacity},
    { "empty", _wrap_DoubleArray_empty},
    { "reserve", _wrap_DoubleArray_reserve},
    { "shrink_to_fit", _wrap_DoubleArray_shrink_to_fit},
    { "__getitem", _wrap_DoubleArray___getitem},
    { "__setitem", _wrap_DoubleArray___setitem},
    { "__add", _wrap_DoubleArray___add},
    { "at", _wrap_DoubleArray_at},
    { "front", _wrap_DoubleArray_front},
    { "back", _wrap_DoubleArray_back},
    { "data", _wrap_DoubleArray_data},
    { "insert", _wrap_DoubleArray_insert},
    { "copy", _wrap_DoubleArray_copy},
    { "copy_backward", _wrap_DoubleArray_copy_backward},
    { "push_back", _wrap_DoubleArray_push_back},
    { "pop_back", _wrap_DoubleArray_pop_back},
    { "clear", _wrap_DoubleArray_clear},
    { "slice", _wrap_DoubleArray_slice},
    { "erase", _wrap_DoubleArray_erase},
    {0,0}
};
static swig_lua_method swig_DoubleArray_meta[] = {
    { "__getitem", _wrap_DoubleArray___getitem},
    { "__setitem", _wrap_DoubleArray___setitem},
    { "__add", _wrap_DoubleArray___add},
    {0,0}
};

static swig_lua_attribute swig_DoubleArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleArray_Sf_SwigStatic = {
    "DoubleArray",
    swig_DoubleArray_Sf_SwigStatic_methods,
    swig_DoubleArray_Sf_SwigStatic_attributes,
    swig_DoubleArray_Sf_SwigStatic_constants,
    swig_DoubleArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleArray_bases[] = {0};
static const char *swig_DoubleArray_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleArray = { "DoubleArray", "DoubleArray", &SWIGTYPE_p_ArrayT_double_t,_proxy__wrap_new_DoubleArray, swig_delete_DoubleArray, swig_DoubleArray_methods, swig_DoubleArray_attributes, &swig_DoubleArray_Sf_SwigStatic, swig_DoubleArray_meta, swig_DoubleArray_bases, swig_DoubleArray_base_names };

static int _wrap_Int8Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  std::vector< signed char > *arg2 = (std::vector< signed char > *) 0 ;
  
  SWIG_check_num_args("Array< int8_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::v",1,"Array< int8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< int8_t >::v",2,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_v_set",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_v_set",2,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::v",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_v_get",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (std::vector< signed char > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::Array",0,0)
  result = (Array< int8_t > *)new Array< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< int8_t >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< int8_t > *)new Array< int8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< signed char > *arg1 = 0 ;
  Array< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< int8_t >::Array",1,"Array< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Array",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (Array< int8_t > *)new Array< int8_t >((Array< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = 0 ;
  Array< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< int8_t >::Array",1,"std::vector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Array",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (Array< int8_t > *)new Array< int8_t >((std::vector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int8_t >::Array()\n"
    "    Array< int8_t >::Array(size_t)\n"
    "    Array< int8_t >::Array(Array< signed char > const &)\n"
    "    Array< int8_t >::Array(std::vector< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("Array< int8_t >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::set",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int8_t >::set",3,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_set",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("Array< int8_t >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::get",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_get",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::resize",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_resize",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::size",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_size",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::max_size",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_max_size",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int8_t >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::capacity",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_capacity",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::empty",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_empty",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int8_t >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::reserve",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_reserve",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  
  SWIG_check_num_args("Array< int8_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::shrink_to_fit",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("Array< int8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::__getitem",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array___getitem",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("Array< int8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::__setitem",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int8_t >::__setitem",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array___setitem",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  Array< signed char > *arg2 = 0 ;
  Array< signed char > result;
  
  SWIG_check_num_args("Array< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::operator +",1,"Array< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int8_t >::operator +",2,"Array< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array___add",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array___add",2,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (arg1)->operator +((Array< signed char > const &)*arg2);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("Array< int8_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::at",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_at",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("Array< int8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::front",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_front",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (signed char)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("Array< int8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::back",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_back",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (signed char)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::data",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_data",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  result = (signed char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  Array< signed char > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< int8_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::insert",1,"Array< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int8_t >::insert",2,"Array< signed char > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int8_t >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_insert",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_insert",2,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< signed char > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  Array< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::copy",1,"Array< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int8_t >::copy",2,"Array< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_copy",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_copy",2,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  Array< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< int8_t >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::copy_backward",1,"Array< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int8_t >::copy_backward",2,"Array< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_copy_backward",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_copy_backward",2,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("Array< int8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::push_back",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::push_back",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_push_back",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  
  SWIG_check_num_args("Array< int8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::pop_back",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_pop_back",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  
  SWIG_check_num_args("Array< int8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::clear",1,"Array< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_clear",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  Array< signed char > result;
  
  SWIG_check_num_args("Array< int8_t >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::slice",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_slice",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< signed char > result;
  
  SWIG_check_num_args("Array< int8_t >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::slice",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int8_t >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_slice",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< signed char > result;
  
  SWIG_check_num_args("Array< int8_t >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::slice",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int8_t >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< int8_t >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_slice",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int8Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int8Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int8_t >::slice(size_t)\n"
    "    Array< int8_t >::slice(size_t,size_t)\n"
    "    Array< int8_t >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int8_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::erase",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_erase",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< int8_t > *arg1 = (Array< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< int8_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int8_t >::erase",1,"Array< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int8_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int8_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Array_erase",1,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int8Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int8_t >::erase(size_t)\n"
    "    Array< int8_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_Int8Array(void *obj) {
Array< int8_t > *arg1 = (Array< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Array_attributes[] = {
    { "v", _wrap_Int8Array_v_get, _wrap_Int8Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Array_methods[]= {
    { "set", _wrap_Int8Array_set},
    { "get", _wrap_Int8Array_get},
    { "resize", _wrap_Int8Array_resize},
    { "size", _wrap_Int8Array_size},
    { "max_size", _wrap_Int8Array_max_size},
    { "capacity", _wrap_Int8Array_capacity},
    { "empty", _wrap_Int8Array_empty},
    { "reserve", _wrap_Int8Array_reserve},
    { "shrink_to_fit", _wrap_Int8Array_shrink_to_fit},
    { "__getitem", _wrap_Int8Array___getitem},
    { "__setitem", _wrap_Int8Array___setitem},
    { "__add", _wrap_Int8Array___add},
    { "at", _wrap_Int8Array_at},
    { "front", _wrap_Int8Array_front},
    { "back", _wrap_Int8Array_back},
    { "data", _wrap_Int8Array_data},
    { "insert", _wrap_Int8Array_insert},
    { "copy", _wrap_Int8Array_copy},
    { "copy_backward", _wrap_Int8Array_copy_backward},
    { "push_back", _wrap_Int8Array_push_back},
    { "pop_back", _wrap_Int8Array_pop_back},
    { "clear", _wrap_Int8Array_clear},
    { "slice", _wrap_Int8Array_slice},
    { "erase", _wrap_Int8Array_erase},
    {0,0}
};
static swig_lua_method swig_Int8Array_meta[] = {
    { "__getitem", _wrap_Int8Array___getitem},
    { "__setitem", _wrap_Int8Array___setitem},
    { "__add", _wrap_Int8Array___add},
    {0,0}
};

static swig_lua_attribute swig_Int8Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Array_Sf_SwigStatic = {
    "Int8Array",
    swig_Int8Array_Sf_SwigStatic_methods,
    swig_Int8Array_Sf_SwigStatic_attributes,
    swig_Int8Array_Sf_SwigStatic_constants,
    swig_Int8Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Array_bases[] = {0};
static const char *swig_Int8Array_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Array = { "Int8Array", "Int8Array", &SWIGTYPE_p_ArrayT_signed_char_t,_proxy__wrap_new_Int8Array, swig_delete_Int8Array, swig_Int8Array_methods, swig_Int8Array_attributes, &swig_Int8Array_Sf_SwigStatic, swig_Int8Array_meta, swig_Int8Array_bases, swig_Int8Array_base_names };

static int _wrap_UInt8Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  std::vector< unsigned char > *arg2 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::v",1,"Array< uint8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< uint8_t >::v",2,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_v_set",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_v_set",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::v",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_v_get",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (std::vector< unsigned char > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::Array",0,0)
  result = (Array< uint8_t > *)new Array< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< uint8_t >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< uint8_t > *)new Array< uint8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned char > *arg1 = 0 ;
  Array< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< uint8_t >::Array",1,"Array< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Array",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (Array< uint8_t > *)new Array< uint8_t >((Array< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = 0 ;
  Array< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< uint8_t >::Array",1,"std::vector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Array",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (Array< uint8_t > *)new Array< uint8_t >((std::vector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint8_t >::Array()\n"
    "    Array< uint8_t >::Array(size_t)\n"
    "    Array< uint8_t >::Array(Array< unsigned char > const &)\n"
    "    Array< uint8_t >::Array(std::vector< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("Array< uint8_t >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::set",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint8_t >::set",3,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_set",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("Array< uint8_t >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::get",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_get",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::resize",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_resize",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::size",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_size",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::max_size",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_max_size",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint8_t >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::capacity",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_capacity",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::empty",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_empty",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint8_t >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::reserve",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_reserve",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::shrink_to_fit",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("Array< uint8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::__getitem",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array___getitem",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("Array< uint8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::__setitem",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint8_t >::__setitem",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array___setitem",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  Array< unsigned char > *arg2 = 0 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("Array< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::operator +",1,"Array< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint8_t >::operator +",2,"Array< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array___add",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array___add",2,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((Array< unsigned char > const &)*arg2);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("Array< uint8_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::at",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_at",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Array< uint8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::front",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_front",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Array< uint8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::back",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_back",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::data",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_data",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  result = (unsigned char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  Array< unsigned char > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< uint8_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::insert",1,"Array< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint8_t >::insert",2,"Array< unsigned char > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint8_t >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_insert",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_insert",2,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< unsigned char > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  Array< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::copy",1,"Array< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint8_t >::copy",2,"Array< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_copy",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_copy",2,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  Array< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::copy_backward",1,"Array< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint8_t >::copy_backward",2,"Array< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_copy_backward",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_copy_backward",2,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Array< uint8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::push_back",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::push_back",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_push_back",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::pop_back",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_pop_back",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::clear",1,"Array< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_clear",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("Array< uint8_t >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::slice",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("Array< uint8_t >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::slice",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint8_t >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("Array< uint8_t >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::slice",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint8_t >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< uint8_t >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt8Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt8Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint8_t >::slice(size_t)\n"
    "    Array< uint8_t >::slice(size_t,size_t)\n"
    "    Array< uint8_t >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint8_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::erase",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint8_t > *arg1 = (Array< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< uint8_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint8_t >::erase",1,"Array< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint8_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint8_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt8Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint8_t >::erase(size_t)\n"
    "    Array< uint8_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_UInt8Array(void *obj) {
Array< uint8_t > *arg1 = (Array< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Array_attributes[] = {
    { "v", _wrap_UInt8Array_v_get, _wrap_UInt8Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Array_methods[]= {
    { "set", _wrap_UInt8Array_set},
    { "get", _wrap_UInt8Array_get},
    { "resize", _wrap_UInt8Array_resize},
    { "size", _wrap_UInt8Array_size},
    { "max_size", _wrap_UInt8Array_max_size},
    { "capacity", _wrap_UInt8Array_capacity},
    { "empty", _wrap_UInt8Array_empty},
    { "reserve", _wrap_UInt8Array_reserve},
    { "shrink_to_fit", _wrap_UInt8Array_shrink_to_fit},
    { "__getitem", _wrap_UInt8Array___getitem},
    { "__setitem", _wrap_UInt8Array___setitem},
    { "__add", _wrap_UInt8Array___add},
    { "at", _wrap_UInt8Array_at},
    { "front", _wrap_UInt8Array_front},
    { "back", _wrap_UInt8Array_back},
    { "data", _wrap_UInt8Array_data},
    { "insert", _wrap_UInt8Array_insert},
    { "copy", _wrap_UInt8Array_copy},
    { "copy_backward", _wrap_UInt8Array_copy_backward},
    { "push_back", _wrap_UInt8Array_push_back},
    { "pop_back", _wrap_UInt8Array_pop_back},
    { "clear", _wrap_UInt8Array_clear},
    { "slice", _wrap_UInt8Array_slice},
    { "erase", _wrap_UInt8Array_erase},
    {0,0}
};
static swig_lua_method swig_UInt8Array_meta[] = {
    { "__getitem", _wrap_UInt8Array___getitem},
    { "__setitem", _wrap_UInt8Array___setitem},
    { "__add", _wrap_UInt8Array___add},
    {0,0}
};

static swig_lua_attribute swig_UInt8Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Array_Sf_SwigStatic = {
    "UInt8Array",
    swig_UInt8Array_Sf_SwigStatic_methods,
    swig_UInt8Array_Sf_SwigStatic_attributes,
    swig_UInt8Array_Sf_SwigStatic_constants,
    swig_UInt8Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Array_bases[] = {0};
static const char *swig_UInt8Array_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8Array = { "UInt8Array", "UInt8Array", &SWIGTYPE_p_ArrayT_unsigned_char_t,_proxy__wrap_new_UInt8Array, swig_delete_UInt8Array, swig_UInt8Array_methods, swig_UInt8Array_attributes, &swig_UInt8Array_Sf_SwigStatic, swig_UInt8Array_meta, swig_UInt8Array_bases, swig_UInt8Array_base_names };

static int _wrap_Int16Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  std::vector< short > *arg2 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("Array< int16_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::v",1,"Array< int16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< int16_t >::v",2,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_v_set",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("Int16Array_v_set",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::v",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_v_get",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (std::vector< short > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::Array",0,0)
  result = (Array< int16_t > *)new Array< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< int16_t >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< int16_t > *)new Array< int16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< short > *arg1 = 0 ;
  Array< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< int16_t >::Array",1,"Array< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("new_Int16Array",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (Array< int16_t > *)new Array< int16_t >((Array< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = 0 ;
  Array< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< int16_t >::Array",1,"std::vector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_Int16Array",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (Array< int16_t > *)new Array< int16_t >((std::vector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int16_t >::Array()\n"
    "    Array< int16_t >::Array(size_t)\n"
    "    Array< int16_t >::Array(Array< short > const &)\n"
    "    Array< int16_t >::Array(std::vector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("Array< int16_t >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::set",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int16_t >::set",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_set",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("Array< int16_t >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::get",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_get",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::resize",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_resize",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::size",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_size",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::max_size",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_max_size",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int16_t >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::capacity",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_capacity",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::empty",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_empty",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int16_t >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::reserve",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_reserve",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  
  SWIG_check_num_args("Array< int16_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::shrink_to_fit",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("Array< int16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::__getitem",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array___getitem",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("Array< int16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::__setitem",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int16_t >::__setitem",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array___setitem",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  Array< short > *arg2 = 0 ;
  Array< short > result;
  
  SWIG_check_num_args("Array< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::operator +",1,"Array< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int16_t >::operator +",2,"Array< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array___add",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array___add",2,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (arg1)->operator +((Array< short > const &)*arg2);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("Array< int16_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::at",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_at",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("Array< int16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::front",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_front",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (short)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("Array< int16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::back",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_back",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (short)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::data",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_data",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  Array< short > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< int16_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::insert",1,"Array< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int16_t >::insert",2,"Array< short > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int16_t >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_insert",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_insert",2,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< short > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  Array< short > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::copy",1,"Array< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int16_t >::copy",2,"Array< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_copy",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_copy",2,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  Array< short > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< int16_t >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::copy_backward",1,"Array< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int16_t >::copy_backward",2,"Array< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_copy_backward",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_copy_backward",2,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("Array< int16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::push_back",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::push_back",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_push_back",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  
  SWIG_check_num_args("Array< int16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::pop_back",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_pop_back",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  
  SWIG_check_num_args("Array< int16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::clear",1,"Array< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_clear",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  Array< short > result;
  
  SWIG_check_num_args("Array< int16_t >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::slice",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_slice",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< short > result;
  
  SWIG_check_num_args("Array< int16_t >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::slice",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int16_t >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_slice",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< short > result;
  
  SWIG_check_num_args("Array< int16_t >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::slice",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int16_t >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< int16_t >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_slice",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int16Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int16Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int16_t >::slice(size_t)\n"
    "    Array< int16_t >::slice(size_t,size_t)\n"
    "    Array< int16_t >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int16_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::erase",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_erase",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< int16_t > *arg1 = (Array< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< int16_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int16_t >::erase",1,"Array< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int16_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int16_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Array_erase",1,SWIGTYPE_p_ArrayT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int16Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int16_t >::erase(size_t)\n"
    "    Array< int16_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_Int16Array(void *obj) {
Array< int16_t > *arg1 = (Array< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Array_attributes[] = {
    { "v", _wrap_Int16Array_v_get, _wrap_Int16Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Array_methods[]= {
    { "set", _wrap_Int16Array_set},
    { "get", _wrap_Int16Array_get},
    { "resize", _wrap_Int16Array_resize},
    { "size", _wrap_Int16Array_size},
    { "max_size", _wrap_Int16Array_max_size},
    { "capacity", _wrap_Int16Array_capacity},
    { "empty", _wrap_Int16Array_empty},
    { "reserve", _wrap_Int16Array_reserve},
    { "shrink_to_fit", _wrap_Int16Array_shrink_to_fit},
    { "__getitem", _wrap_Int16Array___getitem},
    { "__setitem", _wrap_Int16Array___setitem},
    { "__add", _wrap_Int16Array___add},
    { "at", _wrap_Int16Array_at},
    { "front", _wrap_Int16Array_front},
    { "back", _wrap_Int16Array_back},
    { "data", _wrap_Int16Array_data},
    { "insert", _wrap_Int16Array_insert},
    { "copy", _wrap_Int16Array_copy},
    { "copy_backward", _wrap_Int16Array_copy_backward},
    { "push_back", _wrap_Int16Array_push_back},
    { "pop_back", _wrap_Int16Array_pop_back},
    { "clear", _wrap_Int16Array_clear},
    { "slice", _wrap_Int16Array_slice},
    { "erase", _wrap_Int16Array_erase},
    {0,0}
};
static swig_lua_method swig_Int16Array_meta[] = {
    { "__getitem", _wrap_Int16Array___getitem},
    { "__setitem", _wrap_Int16Array___setitem},
    { "__add", _wrap_Int16Array___add},
    {0,0}
};

static swig_lua_attribute swig_Int16Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Array_Sf_SwigStatic = {
    "Int16Array",
    swig_Int16Array_Sf_SwigStatic_methods,
    swig_Int16Array_Sf_SwigStatic_attributes,
    swig_Int16Array_Sf_SwigStatic_constants,
    swig_Int16Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Array_bases[] = {0};
static const char *swig_Int16Array_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Array = { "Int16Array", "Int16Array", &SWIGTYPE_p_ArrayT_short_t,_proxy__wrap_new_Int16Array, swig_delete_Int16Array, swig_Int16Array_methods, swig_Int16Array_attributes, &swig_Int16Array_Sf_SwigStatic, swig_Int16Array_meta, swig_Int16Array_bases, swig_Int16Array_base_names };

static int _wrap_UInt16Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  std::vector< unsigned short > *arg2 = (std::vector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::v",1,"Array< uint16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< uint16_t >::v",2,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_v_set",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_v_set",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::v",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_v_get",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (std::vector< unsigned short > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::Array",0,0)
  result = (Array< uint16_t > *)new Array< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< uint16_t >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< uint16_t > *)new Array< uint16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned short > *arg1 = 0 ;
  Array< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< uint16_t >::Array",1,"Array< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Array",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (Array< uint16_t > *)new Array< uint16_t >((Array< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = 0 ;
  Array< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< uint16_t >::Array",1,"std::vector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Array",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (Array< uint16_t > *)new Array< uint16_t >((std::vector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint16_t >::Array()\n"
    "    Array< uint16_t >::Array(size_t)\n"
    "    Array< uint16_t >::Array(Array< unsigned short > const &)\n"
    "    Array< uint16_t >::Array(std::vector< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("Array< uint16_t >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::set",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint16_t >::set",3,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_set",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("Array< uint16_t >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::get",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_get",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::resize",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_resize",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::size",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_size",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::max_size",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_max_size",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint16_t >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::capacity",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_capacity",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::empty",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_empty",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint16_t >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::reserve",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_reserve",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::shrink_to_fit",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("Array< uint16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::__getitem",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array___getitem",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("Array< uint16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::__setitem",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint16_t >::__setitem",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array___setitem",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  Array< unsigned short > *arg2 = 0 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("Array< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::operator +",1,"Array< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint16_t >::operator +",2,"Array< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array___add",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array___add",2,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((Array< unsigned short > const &)*arg2);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("Array< uint16_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::at",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_at",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("Array< uint16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::front",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_front",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("Array< uint16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::back",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_back",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::data",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_data",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  result = (unsigned short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  Array< unsigned short > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< uint16_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::insert",1,"Array< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint16_t >::insert",2,"Array< unsigned short > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint16_t >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_insert",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_insert",2,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< unsigned short > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  Array< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::copy",1,"Array< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint16_t >::copy",2,"Array< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_copy",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_copy",2,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  Array< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::copy_backward",1,"Array< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint16_t >::copy_backward",2,"Array< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_copy_backward",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_copy_backward",2,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("Array< uint16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::push_back",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::push_back",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_push_back",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::pop_back",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_pop_back",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::clear",1,"Array< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_clear",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("Array< uint16_t >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::slice",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("Array< uint16_t >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::slice",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint16_t >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("Array< uint16_t >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::slice",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint16_t >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< uint16_t >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt16Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt16Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint16_t >::slice(size_t)\n"
    "    Array< uint16_t >::slice(size_t,size_t)\n"
    "    Array< uint16_t >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint16_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::erase",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint16_t > *arg1 = (Array< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< uint16_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint16_t >::erase",1,"Array< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint16_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint16_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt16Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint16_t >::erase(size_t)\n"
    "    Array< uint16_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_UInt16Array(void *obj) {
Array< uint16_t > *arg1 = (Array< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Array_attributes[] = {
    { "v", _wrap_UInt16Array_v_get, _wrap_UInt16Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Array_methods[]= {
    { "set", _wrap_UInt16Array_set},
    { "get", _wrap_UInt16Array_get},
    { "resize", _wrap_UInt16Array_resize},
    { "size", _wrap_UInt16Array_size},
    { "max_size", _wrap_UInt16Array_max_size},
    { "capacity", _wrap_UInt16Array_capacity},
    { "empty", _wrap_UInt16Array_empty},
    { "reserve", _wrap_UInt16Array_reserve},
    { "shrink_to_fit", _wrap_UInt16Array_shrink_to_fit},
    { "__getitem", _wrap_UInt16Array___getitem},
    { "__setitem", _wrap_UInt16Array___setitem},
    { "__add", _wrap_UInt16Array___add},
    { "at", _wrap_UInt16Array_at},
    { "front", _wrap_UInt16Array_front},
    { "back", _wrap_UInt16Array_back},
    { "data", _wrap_UInt16Array_data},
    { "insert", _wrap_UInt16Array_insert},
    { "copy", _wrap_UInt16Array_copy},
    { "copy_backward", _wrap_UInt16Array_copy_backward},
    { "push_back", _wrap_UInt16Array_push_back},
    { "pop_back", _wrap_UInt16Array_pop_back},
    { "clear", _wrap_UInt16Array_clear},
    { "slice", _wrap_UInt16Array_slice},
    { "erase", _wrap_UInt16Array_erase},
    {0,0}
};
static swig_lua_method swig_UInt16Array_meta[] = {
    { "__getitem", _wrap_UInt16Array___getitem},
    { "__setitem", _wrap_UInt16Array___setitem},
    { "__add", _wrap_UInt16Array___add},
    {0,0}
};

static swig_lua_attribute swig_UInt16Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Array_Sf_SwigStatic = {
    "UInt16Array",
    swig_UInt16Array_Sf_SwigStatic_methods,
    swig_UInt16Array_Sf_SwigStatic_attributes,
    swig_UInt16Array_Sf_SwigStatic_constants,
    swig_UInt16Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Array_bases[] = {0};
static const char *swig_UInt16Array_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Array = { "UInt16Array", "UInt16Array", &SWIGTYPE_p_ArrayT_unsigned_short_t,_proxy__wrap_new_UInt16Array, swig_delete_UInt16Array, swig_UInt16Array_methods, swig_UInt16Array_attributes, &swig_UInt16Array_Sf_SwigStatic, swig_UInt16Array_meta, swig_UInt16Array_bases, swig_UInt16Array_base_names };

static int _wrap_Int32Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("Array< int32_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::v",1,"Array< int32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< int32_t >::v",2,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_v_set",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("Int32Array_v_set",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::v",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_v_get",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (std::vector< int > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::Array",0,0)
  result = (Array< int32_t > *)new Array< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< int32_t >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< int32_t > *)new Array< int32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< int > *arg1 = 0 ;
  Array< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< int32_t >::Array",1,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("new_Int32Array",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (Array< int32_t > *)new Array< int32_t >((Array< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  Array< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< int32_t >::Array",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_Int32Array",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (Array< int32_t > *)new Array< int32_t >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int32_t >::Array()\n"
    "    Array< int32_t >::Array(size_t)\n"
    "    Array< int32_t >::Array(Array< int > const &)\n"
    "    Array< int32_t >::Array(std::vector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Array< int32_t >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::set",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int32_t >::set",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_set",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("Array< int32_t >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::get",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_get",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::resize",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_resize",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::size",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_size",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::max_size",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_max_size",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< int32_t >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::capacity",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_capacity",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::empty",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_empty",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int32_t >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::reserve",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_reserve",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  
  SWIG_check_num_args("Array< int32_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::shrink_to_fit",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("Array< int32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::__getitem",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array___getitem",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Array< int32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::__setitem",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int32_t >::__setitem",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array___setitem",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  Array< int > *arg2 = 0 ;
  Array< int > result;
  
  SWIG_check_num_args("Array< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::operator +",1,"Array< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int32_t >::operator +",2,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array___add",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array___add",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (arg1)->operator +((Array< int > const &)*arg2);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("Array< int32_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::at",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_at",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("Array< int32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::front",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_front",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (int)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("Array< int32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::back",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_back",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (int)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::data",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_data",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  Array< int > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< int32_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::insert",1,"Array< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int32_t >::insert",2,"Array< int > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int32_t >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_insert",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_insert",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< int > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  Array< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::copy",1,"Array< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int32_t >::copy",2,"Array< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_copy",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_copy",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  Array< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< int32_t >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::copy_backward",1,"Array< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< int32_t >::copy_backward",2,"Array< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_copy_backward",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_copy_backward",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Array< int32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::push_back",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::push_back",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_push_back",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  
  SWIG_check_num_args("Array< int32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::pop_back",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_pop_back",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  
  SWIG_check_num_args("Array< int32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::clear",1,"Array< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_clear",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  Array< int > result;
  
  SWIG_check_num_args("Array< int32_t >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::slice",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_slice",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< int > result;
  
  SWIG_check_num_args("Array< int32_t >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::slice",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int32_t >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_slice",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< int > result;
  
  SWIG_check_num_args("Array< int32_t >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::slice",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int32_t >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< int32_t >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_slice",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int32Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int32Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int32_t >::slice(size_t)\n"
    "    Array< int32_t >::slice(size_t,size_t)\n"
    "    Array< int32_t >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< int32_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::erase",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_erase",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< int32_t > *arg1 = (Array< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< int32_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< int32_t >::erase",1,"Array< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< int32_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< int32_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Array_erase",1,SWIGTYPE_p_ArrayT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int32Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< int32_t >::erase(size_t)\n"
    "    Array< int32_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_Int32Array(void *obj) {
Array< int32_t > *arg1 = (Array< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Array_attributes[] = {
    { "v", _wrap_Int32Array_v_get, _wrap_Int32Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Array_methods[]= {
    { "set", _wrap_Int32Array_set},
    { "get", _wrap_Int32Array_get},
    { "resize", _wrap_Int32Array_resize},
    { "size", _wrap_Int32Array_size},
    { "max_size", _wrap_Int32Array_max_size},
    { "capacity", _wrap_Int32Array_capacity},
    { "empty", _wrap_Int32Array_empty},
    { "reserve", _wrap_Int32Array_reserve},
    { "shrink_to_fit", _wrap_Int32Array_shrink_to_fit},
    { "__getitem", _wrap_Int32Array___getitem},
    { "__setitem", _wrap_Int32Array___setitem},
    { "__add", _wrap_Int32Array___add},
    { "at", _wrap_Int32Array_at},
    { "front", _wrap_Int32Array_front},
    { "back", _wrap_Int32Array_back},
    { "data", _wrap_Int32Array_data},
    { "insert", _wrap_Int32Array_insert},
    { "copy", _wrap_Int32Array_copy},
    { "copy_backward", _wrap_Int32Array_copy_backward},
    { "push_back", _wrap_Int32Array_push_back},
    { "pop_back", _wrap_Int32Array_pop_back},
    { "clear", _wrap_Int32Array_clear},
    { "slice", _wrap_Int32Array_slice},
    { "erase", _wrap_Int32Array_erase},
    {0,0}
};
static swig_lua_method swig_Int32Array_meta[] = {
    { "__getitem", _wrap_Int32Array___getitem},
    { "__setitem", _wrap_Int32Array___setitem},
    { "__add", _wrap_Int32Array___add},
    {0,0}
};

static swig_lua_attribute swig_Int32Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Array_Sf_SwigStatic = {
    "Int32Array",
    swig_Int32Array_Sf_SwigStatic_methods,
    swig_Int32Array_Sf_SwigStatic_attributes,
    swig_Int32Array_Sf_SwigStatic_constants,
    swig_Int32Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Array_bases[] = {0};
static const char *swig_Int32Array_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Array = { "Int32Array", "Int32Array", &SWIGTYPE_p_ArrayT_int_t,_proxy__wrap_new_Int32Array, swig_delete_Int32Array, swig_Int32Array_methods, swig_Int32Array_attributes, &swig_Int32Array_Sf_SwigStatic, swig_Int32Array_meta, swig_Int32Array_bases, swig_Int32Array_base_names };

static int _wrap_UInt32Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  std::vector< unsigned int > *arg2 = (std::vector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::v",1,"Array< uint32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< uint32_t >::v",2,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_v_set",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_v_set",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::v",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_v_get",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (std::vector< unsigned int > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::Array",0,0)
  result = (Array< uint32_t > *)new Array< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< uint32_t >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< uint32_t > *)new Array< uint32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned int > *arg1 = 0 ;
  Array< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< uint32_t >::Array",1,"Array< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Array",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (Array< uint32_t > *)new Array< uint32_t >((Array< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  Array< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< uint32_t >::Array",1,"std::vector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Array",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (Array< uint32_t > *)new Array< uint32_t >((std::vector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint32_t >::Array()\n"
    "    Array< uint32_t >::Array(size_t)\n"
    "    Array< uint32_t >::Array(Array< unsigned int > const &)\n"
    "    Array< uint32_t >::Array(std::vector< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Array< uint32_t >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::set",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint32_t >::set",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_set",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Array< uint32_t >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::get",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_get",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::resize",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_resize",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::size",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_size",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::max_size",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_max_size",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< uint32_t >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::capacity",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_capacity",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::empty",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_empty",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint32_t >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::reserve",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_reserve",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::shrink_to_fit",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Array< uint32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::__getitem",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array___getitem",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Array< uint32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::__setitem",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint32_t >::__setitem",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array___setitem",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  Array< unsigned int > *arg2 = 0 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("Array< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::operator +",1,"Array< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint32_t >::operator +",2,"Array< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array___add",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array___add",2,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((Array< unsigned int > const &)*arg2);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Array< uint32_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::at",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_at",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Array< uint32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::front",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_front",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Array< uint32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::back",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_back",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::data",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_data",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  result = (unsigned int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  Array< unsigned int > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< uint32_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::insert",1,"Array< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint32_t >::insert",2,"Array< unsigned int > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint32_t >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_insert",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_insert",2,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< unsigned int > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  Array< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::copy",1,"Array< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint32_t >::copy",2,"Array< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_copy",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_copy",2,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  Array< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::copy_backward",1,"Array< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< uint32_t >::copy_backward",2,"Array< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_copy_backward",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_copy_backward",2,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Array< uint32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::push_back",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::push_back",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_push_back",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::pop_back",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_pop_back",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Array< uint32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::clear",1,"Array< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_clear",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("Array< uint32_t >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::slice",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("Array< uint32_t >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::slice",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint32_t >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("Array< uint32_t >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::slice",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint32_t >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< uint32_t >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt32Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt32Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint32_t >::slice(size_t)\n"
    "    Array< uint32_t >::slice(size_t,size_t)\n"
    "    Array< uint32_t >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< uint32_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::erase",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< uint32_t > *arg1 = (Array< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< uint32_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< uint32_t >::erase",1,"Array< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< uint32_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< uint32_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt32Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< uint32_t >::erase(size_t)\n"
    "    Array< uint32_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_UInt32Array(void *obj) {
Array< uint32_t > *arg1 = (Array< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Array_attributes[] = {
    { "v", _wrap_UInt32Array_v_get, _wrap_UInt32Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Array_methods[]= {
    { "set", _wrap_UInt32Array_set},
    { "get", _wrap_UInt32Array_get},
    { "resize", _wrap_UInt32Array_resize},
    { "size", _wrap_UInt32Array_size},
    { "max_size", _wrap_UInt32Array_max_size},
    { "capacity", _wrap_UInt32Array_capacity},
    { "empty", _wrap_UInt32Array_empty},
    { "reserve", _wrap_UInt32Array_reserve},
    { "shrink_to_fit", _wrap_UInt32Array_shrink_to_fit},
    { "__getitem", _wrap_UInt32Array___getitem},
    { "__setitem", _wrap_UInt32Array___setitem},
    { "__add", _wrap_UInt32Array___add},
    { "at", _wrap_UInt32Array_at},
    { "front", _wrap_UInt32Array_front},
    { "back", _wrap_UInt32Array_back},
    { "data", _wrap_UInt32Array_data},
    { "insert", _wrap_UInt32Array_insert},
    { "copy", _wrap_UInt32Array_copy},
    { "copy_backward", _wrap_UInt32Array_copy_backward},
    { "push_back", _wrap_UInt32Array_push_back},
    { "pop_back", _wrap_UInt32Array_pop_back},
    { "clear", _wrap_UInt32Array_clear},
    { "slice", _wrap_UInt32Array_slice},
    { "erase", _wrap_UInt32Array_erase},
    {0,0}
};
static swig_lua_method swig_UInt32Array_meta[] = {
    { "__getitem", _wrap_UInt32Array___getitem},
    { "__setitem", _wrap_UInt32Array___setitem},
    { "__add", _wrap_UInt32Array___add},
    {0,0}
};

static swig_lua_attribute swig_UInt32Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Array_Sf_SwigStatic = {
    "UInt32Array",
    swig_UInt32Array_Sf_SwigStatic_methods,
    swig_UInt32Array_Sf_SwigStatic_attributes,
    swig_UInt32Array_Sf_SwigStatic_constants,
    swig_UInt32Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Array_bases[] = {0};
static const char *swig_UInt32Array_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Array = { "UInt32Array", "UInt32Array", &SWIGTYPE_p_ArrayT_unsigned_int_t,_proxy__wrap_new_UInt32Array, swig_delete_UInt32Array, swig_UInt32Array_methods, swig_UInt32Array_attributes, &swig_UInt32Array_Sf_SwigStatic, swig_UInt32Array_meta, swig_UInt32Array_bases, swig_UInt32Array_base_names };

static int _wrap_Int64Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  std::vector< long long > *arg2 = (std::vector< long long > *) 0 ;
  
  SWIG_check_num_args("Array< long long >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::v",1,"Array< long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< long long >::v",2,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_v_set",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_v_set",2,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  std::vector< long long > *result = 0 ;
  
  SWIG_check_num_args("Array< long long >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::v",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_v_get",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (std::vector< long long > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *result = 0 ;
  
  SWIG_check_num_args("Array< long long >::Array",0,0)
  result = (Array< long long > *)new Array< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< long long > *result = 0 ;
  
  SWIG_check_num_args("Array< long long >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< long long >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< long long > *)new Array< long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = 0 ;
  Array< long long > *result = 0 ;
  
  SWIG_check_num_args("Array< long long >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< long long >::Array",1,"Array< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("new_Int64Array",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (Array< long long > *)new Array< long long >((Array< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = 0 ;
  Array< long long > *result = 0 ;
  
  SWIG_check_num_args("Array< long long >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< long long >::Array",1,"std::vector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("new_Int64Array",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (Array< long long > *)new Array< long long >((std::vector< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int64Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< long long >::Array()\n"
    "    Array< long long >::Array(size_t)\n"
    "    Array< long long >::Array(Array< long long > const &)\n"
    "    Array< long long >::Array(std::vector< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("Array< long long >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::set",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< long long >::set",3,"long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_set",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("Array< long long >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::get",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_get",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::resize",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_resize",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::size",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_size",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::max_size",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_max_size",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< long long >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::capacity",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_capacity",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::empty",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_empty",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< long long >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::reserve",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_reserve",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  
  SWIG_check_num_args("Array< long long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::shrink_to_fit",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("Array< long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::__getitem",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array___getitem",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("Array< long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::__setitem",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< long long >::__setitem",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array___setitem",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  Array< long long > *arg2 = 0 ;
  Array< long long > result;
  
  SWIG_check_num_args("Array< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::operator +",1,"Array< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< long long >::operator +",2,"Array< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array___add",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array___add",2,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (arg1)->operator +((Array< long long > const &)*arg2);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("Array< long long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::at",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_at",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("Array< long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::front",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_front",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (long long)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("Array< long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::back",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_back",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (long long)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Array< long long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::data",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_data",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  result = (long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  Array< long long > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< long long >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::insert",1,"Array< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< long long >::insert",2,"Array< long long > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< long long >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_insert",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_insert",2,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< long long > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  Array< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::copy",1,"Array< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< long long >::copy",2,"Array< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_copy",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_copy",2,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  Array< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< long long >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::copy_backward",1,"Array< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< long long >::copy_backward",2,"Array< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_copy_backward",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_copy_backward",2,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("Array< long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::push_back",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::push_back",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_push_back",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  
  SWIG_check_num_args("Array< long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::pop_back",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_pop_back",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  
  SWIG_check_num_args("Array< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::clear",1,"Array< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_clear",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  Array< long long > result;
  
  SWIG_check_num_args("Array< long long >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::slice",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_slice",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< long long > result;
  
  SWIG_check_num_args("Array< long long >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::slice",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< long long >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_slice",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< long long > result;
  
  SWIG_check_num_args("Array< long long >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::slice",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< long long >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< long long >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_slice",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int64Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int64Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int64Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< long long >::slice(size_t)\n"
    "    Array< long long >::slice(size_t,size_t)\n"
    "    Array< long long >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< long long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::erase",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_erase",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< long long > *arg1 = (Array< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< long long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< long long >::erase",1,"Array< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< long long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< long long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Array_erase",1,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int64Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int64Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< long long >::erase(size_t)\n"
    "    Array< long long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_Int64Array(void *obj) {
Array< long long > *arg1 = (Array< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Array_attributes[] = {
    { "v", _wrap_Int64Array_v_get, _wrap_Int64Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Array_methods[]= {
    { "set", _wrap_Int64Array_set},
    { "get", _wrap_Int64Array_get},
    { "resize", _wrap_Int64Array_resize},
    { "size", _wrap_Int64Array_size},
    { "max_size", _wrap_Int64Array_max_size},
    { "capacity", _wrap_Int64Array_capacity},
    { "empty", _wrap_Int64Array_empty},
    { "reserve", _wrap_Int64Array_reserve},
    { "shrink_to_fit", _wrap_Int64Array_shrink_to_fit},
    { "__getitem", _wrap_Int64Array___getitem},
    { "__setitem", _wrap_Int64Array___setitem},
    { "__add", _wrap_Int64Array___add},
    { "at", _wrap_Int64Array_at},
    { "front", _wrap_Int64Array_front},
    { "back", _wrap_Int64Array_back},
    { "data", _wrap_Int64Array_data},
    { "insert", _wrap_Int64Array_insert},
    { "copy", _wrap_Int64Array_copy},
    { "copy_backward", _wrap_Int64Array_copy_backward},
    { "push_back", _wrap_Int64Array_push_back},
    { "pop_back", _wrap_Int64Array_pop_back},
    { "clear", _wrap_Int64Array_clear},
    { "slice", _wrap_Int64Array_slice},
    { "erase", _wrap_Int64Array_erase},
    {0,0}
};
static swig_lua_method swig_Int64Array_meta[] = {
    { "__getitem", _wrap_Int64Array___getitem},
    { "__setitem", _wrap_Int64Array___setitem},
    { "__add", _wrap_Int64Array___add},
    {0,0}
};

static swig_lua_attribute swig_Int64Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Array_Sf_SwigStatic = {
    "Int64Array",
    swig_Int64Array_Sf_SwigStatic_methods,
    swig_Int64Array_Sf_SwigStatic_attributes,
    swig_Int64Array_Sf_SwigStatic_constants,
    swig_Int64Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Array_bases[] = {0};
static const char *swig_Int64Array_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Array = { "Int64Array", "Int64Array", &SWIGTYPE_p_ArrayT_long_long_t,_proxy__wrap_new_Int64Array, swig_delete_Int64Array, swig_Int64Array_methods, swig_Int64Array_attributes, &swig_Int64Array_Sf_SwigStatic, swig_Int64Array_meta, swig_Int64Array_bases, swig_Int64Array_base_names };

static int _wrap_UInt64Array_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  std::vector< unsigned long long > *arg2 = (std::vector< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::v",1,"Array< unsigned long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< unsigned long long >::v",2,"std::vector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_v_set",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_v_set",2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::v",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_v_get",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (std::vector< unsigned long long > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::Array",0,0)
  result = (Array< unsigned long long > *)new Array< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< unsigned long long >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< unsigned long long > *)new Array< unsigned long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = 0 ;
  Array< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< unsigned long long >::Array",1,"Array< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_UInt64Array",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (Array< unsigned long long > *)new Array< unsigned long long >((Array< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long long > *arg1 = 0 ;
  Array< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< unsigned long long >::Array",1,"std::vector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_UInt64Array",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (Array< unsigned long long > *)new Array< unsigned long long >((std::vector< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Array(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64Array__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Array__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Array__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt64Array__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< unsigned long long >::Array()\n"
    "    Array< unsigned long long >::Array(size_t)\n"
    "    Array< unsigned long long >::Array(Array< unsigned long long > const &)\n"
    "    Array< unsigned long long >::Array(std::vector< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Array_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("Array< unsigned long long >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::set",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< unsigned long long >::set",3,"unsigned long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_set",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("Array< unsigned long long >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::get",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_get",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< unsigned long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::resize",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_resize",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::size",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_size",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< unsigned long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::max_size",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_max_size",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< unsigned long long >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::capacity",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_capacity",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::empty",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_empty",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< unsigned long long >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::reserve",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_reserve",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::shrink_to_fit",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_shrink_to_fit",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("Array< unsigned long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::__getitem",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array___getitem",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("Array< unsigned long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::__setitem",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< unsigned long long >::__setitem",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array___setitem",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  Array< unsigned long long > *arg2 = 0 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("Array< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::operator +",1,"Array< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< unsigned long long >::operator +",2,"Array< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array___add",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array___add",2,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator +((Array< unsigned long long > const &)*arg2);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("Array< unsigned long long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::at",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_at",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("Array< unsigned long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::front",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_front",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("Array< unsigned long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::back",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_back",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::data",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_data",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  Array< unsigned long long > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< unsigned long long >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::insert",1,"Array< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< unsigned long long >::insert",2,"Array< unsigned long long > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< unsigned long long >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_insert",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_insert",2,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< unsigned long long > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  Array< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::copy",1,"Array< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< unsigned long long >::copy",2,"Array< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_copy",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_copy",2,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  Array< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::copy_backward",1,"Array< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< unsigned long long >::copy_backward",2,"Array< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_copy_backward",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_copy_backward",2,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("Array< unsigned long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::push_back",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::push_back",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_push_back",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::pop_back",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_pop_back",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Array< unsigned long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::clear",1,"Array< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_clear",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("Array< unsigned long long >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::slice",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("Array< unsigned long long >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::slice",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< unsigned long long >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("Array< unsigned long long >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::slice",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< unsigned long long >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< unsigned long long >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_slice",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt64Array_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt64Array_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt64Array_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Array_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< unsigned long long >::slice(size_t)\n"
    "    Array< unsigned long long >::slice(size_t,size_t)\n"
    "    Array< unsigned long long >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Array_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< unsigned long long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::erase",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< unsigned long long > *arg1 = (Array< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< unsigned long long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< unsigned long long >::erase",1,"Array< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< unsigned long long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< unsigned long long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Array_erase",1,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Array_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt64Array_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt64Array_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Array_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< unsigned long long >::erase(size_t)\n"
    "    Array< unsigned long long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_UInt64Array(void *obj) {
Array< unsigned long long > *arg1 = (Array< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Array_attributes[] = {
    { "v", _wrap_UInt64Array_v_get, _wrap_UInt64Array_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Array_methods[]= {
    { "set", _wrap_UInt64Array_set},
    { "get", _wrap_UInt64Array_get},
    { "resize", _wrap_UInt64Array_resize},
    { "size", _wrap_UInt64Array_size},
    { "max_size", _wrap_UInt64Array_max_size},
    { "capacity", _wrap_UInt64Array_capacity},
    { "empty", _wrap_UInt64Array_empty},
    { "reserve", _wrap_UInt64Array_reserve},
    { "shrink_to_fit", _wrap_UInt64Array_shrink_to_fit},
    { "__getitem", _wrap_UInt64Array___getitem},
    { "__setitem", _wrap_UInt64Array___setitem},
    { "__add", _wrap_UInt64Array___add},
    { "at", _wrap_UInt64Array_at},
    { "front", _wrap_UInt64Array_front},
    { "back", _wrap_UInt64Array_back},
    { "data", _wrap_UInt64Array_data},
    { "insert", _wrap_UInt64Array_insert},
    { "copy", _wrap_UInt64Array_copy},
    { "copy_backward", _wrap_UInt64Array_copy_backward},
    { "push_back", _wrap_UInt64Array_push_back},
    { "pop_back", _wrap_UInt64Array_pop_back},
    { "clear", _wrap_UInt64Array_clear},
    { "slice", _wrap_UInt64Array_slice},
    { "erase", _wrap_UInt64Array_erase},
    {0,0}
};
static swig_lua_method swig_UInt64Array_meta[] = {
    { "__getitem", _wrap_UInt64Array___getitem},
    { "__setitem", _wrap_UInt64Array___setitem},
    { "__add", _wrap_UInt64Array___add},
    {0,0}
};

static swig_lua_attribute swig_UInt64Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Array_Sf_SwigStatic = {
    "UInt64Array",
    swig_UInt64Array_Sf_SwigStatic_methods,
    swig_UInt64Array_Sf_SwigStatic_attributes,
    swig_UInt64Array_Sf_SwigStatic_constants,
    swig_UInt64Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Array_bases[] = {0};
static const char *swig_UInt64Array_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Array = { "UInt64Array", "UInt64Array", &SWIGTYPE_p_ArrayT_unsigned_long_long_t,_proxy__wrap_new_UInt64Array, swig_delete_UInt64Array, swig_UInt64Array_methods, swig_UInt64Array_attributes, &swig_UInt64Array_Sf_SwigStatic, swig_UInt64Array_meta, swig_UInt64Array_bases, swig_UInt64Array_base_names };

static int _wrap_StringArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("Array< string >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::v",1,"Array< string > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< string >::v",2,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_v_set",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringArray_v_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("Array< string >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::v",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_v_get",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (std::vector< std::string > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *result = 0 ;
  
  SWIG_check_num_args("Array< string >::Array",0,0)
  result = (Array< string > *)new Array< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< string > *result = 0 ;
  
  SWIG_check_num_args("Array< string >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< string >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< string > *)new Array< string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = 0 ;
  Array< string > *result = 0 ;
  
  SWIG_check_num_args("Array< string >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< string >::Array",1,"Array< string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("new_StringArray",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (Array< string > *)new Array< string >((Array< string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = 0 ;
  Array< string > *result = 0 ;
  
  SWIG_check_num_args("Array< string >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< string >::Array",1,"std::vector< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("new_StringArray",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (Array< string > *)new Array< string >((std::vector< std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_string_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StringArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< string >::Array()\n"
    "    Array< string >::Array(size_t)\n"
    "    Array< string >::Array(Array< string > const &)\n"
    "    Array< string >::Array(std::vector< std::string > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StringArray_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("Array< string >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::set",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::set",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Array< string >::set",3,"string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_set",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringArray_set",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  string result;
  
  SWIG_check_num_args("Array< string >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::get",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_get",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< string >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::resize",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_resize",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::size",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_size",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::max_size",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_max_size",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< string >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::capacity",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_capacity",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::empty",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_empty",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< string >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::reserve",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_reserve",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  
  SWIG_check_num_args("Array< string >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::shrink_to_fit",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_shrink_to_fit",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  string result;
  
  SWIG_check_num_args("Array< string >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::__getitem",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray___getitem",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("Array< string >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::__setitem",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Array< string >::__setitem",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray___setitem",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringArray___setitem",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  Array< string > *arg2 = 0 ;
  Array< string > result;
  
  SWIG_check_num_args("Array< string >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::operator +",1,"Array< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< string >::operator +",2,"Array< string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray___add",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray___add",2,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (arg1)->operator +((Array< string > const &)*arg2);
  {
    Array< string > * resultptr = new Array< string >((const Array< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  string result;
  
  SWIG_check_num_args("Array< string >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::at",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_at",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->at(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("Array< string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::front",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_front",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (arg1)->front();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("Array< string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::back",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_back",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (arg1)->back();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  string *result = 0 ;
  
  SWIG_check_num_args("Array< string >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::data",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_data",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  result = (string *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  Array< string > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< string >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::insert",1,"Array< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< string >::insert",2,"Array< string > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< string >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_insert",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_insert",2,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< string > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  Array< string > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< string >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::copy",1,"Array< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< string >::copy",2,"Array< string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_copy",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_copy",2,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  Array< string > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< string >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::copy_backward",1,"Array< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< string >::copy_backward",2,"Array< string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_copy_backward",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_copy_backward",2,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("Array< string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::push_back",1,"Array< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< string >::push_back",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_push_back",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringArray_push_back",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  
  SWIG_check_num_args("Array< string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::pop_back",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_pop_back",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  
  SWIG_check_num_args("Array< string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::clear",1,"Array< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_clear",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  Array< string > result;
  
  SWIG_check_num_args("Array< string >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::slice",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_slice",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< string > * resultptr = new Array< string >((const Array< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< string > result;
  
  SWIG_check_num_args("Array< string >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::slice",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< string >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_slice",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< string > * resultptr = new Array< string >((const Array< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< string > result;
  
  SWIG_check_num_args("Array< string >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::slice",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< string >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< string >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_slice",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< string > * resultptr = new Array< string >((const Array< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StringArray_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StringArray_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_StringArray_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StringArray_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< string >::slice(size_t)\n"
    "    Array< string >::slice(size_t,size_t)\n"
    "    Array< string >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_StringArray_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< string >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::erase",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_erase",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< string > *arg1 = (Array< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< string >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< string >::erase",1,"Array< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< string >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< string >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringArray_erase",1,SWIGTYPE_p_ArrayT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringArray_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StringArray_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StringArray_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StringArray_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< string >::erase(size_t)\n"
    "    Array< string >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_StringArray(void *obj) {
Array< string > *arg1 = (Array< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringArray_attributes[] = {
    { "v", _wrap_StringArray_v_get, _wrap_StringArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_StringArray_methods[]= {
    { "set", _wrap_StringArray_set},
    { "get", _wrap_StringArray_get},
    { "resize", _wrap_StringArray_resize},
    { "size", _wrap_StringArray_size},
    { "max_size", _wrap_StringArray_max_size},
    { "capacity", _wrap_StringArray_capacity},
    { "empty", _wrap_StringArray_empty},
    { "reserve", _wrap_StringArray_reserve},
    { "shrink_to_fit", _wrap_StringArray_shrink_to_fit},
    { "__getitem", _wrap_StringArray___getitem},
    { "__setitem", _wrap_StringArray___setitem},
    { "__add", _wrap_StringArray___add},
    { "at", _wrap_StringArray_at},
    { "front", _wrap_StringArray_front},
    { "back", _wrap_StringArray_back},
    { "data", _wrap_StringArray_data},
    { "insert", _wrap_StringArray_insert},
    { "copy", _wrap_StringArray_copy},
    { "copy_backward", _wrap_StringArray_copy_backward},
    { "push_back", _wrap_StringArray_push_back},
    { "pop_back", _wrap_StringArray_pop_back},
    { "clear", _wrap_StringArray_clear},
    { "slice", _wrap_StringArray_slice},
    { "erase", _wrap_StringArray_erase},
    {0,0}
};
static swig_lua_method swig_StringArray_meta[] = {
    { "__getitem", _wrap_StringArray___getitem},
    { "__setitem", _wrap_StringArray___setitem},
    { "__add", _wrap_StringArray___add},
    {0,0}
};

static swig_lua_attribute swig_StringArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringArray_Sf_SwigStatic = {
    "StringArray",
    swig_StringArray_Sf_SwigStatic_methods,
    swig_StringArray_Sf_SwigStatic_attributes,
    swig_StringArray_Sf_SwigStatic_constants,
    swig_StringArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringArray_bases[] = {0};
static const char *swig_StringArray_base_names[] = {0};
static swig_lua_class _wrap_class_StringArray = { "StringArray", "StringArray", &SWIGTYPE_p_ArrayT_string_t,_proxy__wrap_new_StringArray, swig_delete_StringArray, swig_StringArray_methods, swig_StringArray_attributes, &swig_StringArray_Sf_SwigStatic, swig_StringArray_meta, swig_StringArray_bases, swig_StringArray_base_names };

static int _wrap_PtrArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  std::vector< void * > *arg2 = (std::vector< void * > *) 0 ;
  
  SWIG_check_num_args("Array< void * >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::v",1,"Array< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< void * >::v",2,"std::vector< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_v_set",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_v_set",2,SWIGTYPE_p_std__vectorT_void_p_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  std::vector< void * > *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::v",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_v_get",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (std::vector< void * > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_void_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::Array",0,0)
  result = (Array< void * > *)new Array< void * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< void * > *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< void * >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< void * > *)new Array< void * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = 0 ;
  Array< void * > *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< void * >::Array",1,"Array< void * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("new_PtrArray",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (Array< void * > *)new Array< void * >((Array< void * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< void * > *arg1 = 0 ;
  Array< void * > *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< void * >::Array",1,"std::vector< void * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_void_p_t,0))){
    SWIG_fail_ptr("new_PtrArray",1,SWIGTYPE_p_std__vectorT_void_p_t);
  }
  
  result = (Array< void * > *)new Array< void * >((std::vector< void * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PtrArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_void_p_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PtrArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_void_p_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PtrArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PtrArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PtrArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< void * >::Array()\n"
    "    Array< void * >::Array(size_t)\n"
    "    Array< void * >::Array(Array< void * > const &)\n"
    "    Array< void * >::Array(std::vector< void * > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PtrArray_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("Array< void * >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::set",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::set",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Array< void * >::set",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_set",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrArray_set");
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::get",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_get",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< void * >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::resize",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_resize",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< void * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::size",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_size",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< void * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::max_size",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_max_size",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< void * >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::capacity",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_capacity",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< void * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::empty",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_empty",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< void * >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::reserve",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_reserve",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  
  SWIG_check_num_args("Array< void * >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::shrink_to_fit",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_shrink_to_fit",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::__getitem",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray___getitem",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) (void *)0 ;
  
  SWIG_check_num_args("Array< void * >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::__setitem",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::__setitem",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Array< void * >::__setitem",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray___setitem",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrArray___setitem");
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  Array< void * > *arg2 = 0 ;
  Array< void * > result;
  
  SWIG_check_num_args("Array< void * >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::operator +",1,"Array< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< void * >::operator +",2,"Array< void * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray___add",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray___add",2,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (arg1)->operator +((Array< void * > const &)*arg2);
  {
    Array< void * > * resultptr = new Array< void * >((const Array< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::at",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_at",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::front",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_front",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (void *)(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Array< void * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::back",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_back",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (void *)(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  void **result = 0 ;
  
  SWIG_check_num_args("Array< void * >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::data",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_data",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  result = (void **)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  Array< void * > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< void * >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::insert",1,"Array< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< void * >::insert",2,"Array< void * > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< void * >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_insert",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_insert",2,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< void * > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  Array< void * > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< void * >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::copy",1,"Array< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< void * >::copy",2,"Array< void * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_copy",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_copy",2,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  Array< void * > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< void * >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::copy_backward",1,"Array< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< void * >::copy_backward",2,"Array< void * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_copy_backward",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_copy_backward",2,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("Array< void * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::push_back",1,"Array< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< void * >::push_back",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_push_back",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrArray_push_back");
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  
  SWIG_check_num_args("Array< void * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::pop_back",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_pop_back",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  
  SWIG_check_num_args("Array< void * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::clear",1,"Array< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_clear",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  Array< void * > result;
  
  SWIG_check_num_args("Array< void * >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::slice",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_slice",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< void * > * resultptr = new Array< void * >((const Array< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< void * > result;
  
  SWIG_check_num_args("Array< void * >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::slice",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< void * >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_slice",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< void * > * resultptr = new Array< void * >((const Array< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< void * > result;
  
  SWIG_check_num_args("Array< void * >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::slice",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< void * >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< void * >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_slice",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< void * > * resultptr = new Array< void * >((const Array< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_void_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PtrArray_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_void_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PtrArray_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_void_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PtrArray_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PtrArray_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< void * >::slice(size_t)\n"
    "    Array< void * >::slice(size_t,size_t)\n"
    "    Array< void * >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_PtrArray_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< void * >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::erase",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_erase",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< void * > *arg1 = (Array< void * > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< void * >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< void * >::erase",1,"Array< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< void * >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< void * >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrArray_erase",1,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrArray_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_void_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PtrArray_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_void_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PtrArray_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PtrArray_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< void * >::erase(size_t)\n"
    "    Array< void * >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_PtrArray(void *obj) {
Array< void * > *arg1 = (Array< void * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PtrArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PtrArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PtrArray_attributes[] = {
    { "v", _wrap_PtrArray_v_get, _wrap_PtrArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_PtrArray_methods[]= {
    { "set", _wrap_PtrArray_set},
    { "get", _wrap_PtrArray_get},
    { "resize", _wrap_PtrArray_resize},
    { "size", _wrap_PtrArray_size},
    { "max_size", _wrap_PtrArray_max_size},
    { "capacity", _wrap_PtrArray_capacity},
    { "empty", _wrap_PtrArray_empty},
    { "reserve", _wrap_PtrArray_reserve},
    { "shrink_to_fit", _wrap_PtrArray_shrink_to_fit},
    { "__getitem", _wrap_PtrArray___getitem},
    { "__setitem", _wrap_PtrArray___setitem},
    { "__add", _wrap_PtrArray___add},
    { "at", _wrap_PtrArray_at},
    { "front", _wrap_PtrArray_front},
    { "back", _wrap_PtrArray_back},
    { "data", _wrap_PtrArray_data},
    { "insert", _wrap_PtrArray_insert},
    { "copy", _wrap_PtrArray_copy},
    { "copy_backward", _wrap_PtrArray_copy_backward},
    { "push_back", _wrap_PtrArray_push_back},
    { "pop_back", _wrap_PtrArray_pop_back},
    { "clear", _wrap_PtrArray_clear},
    { "slice", _wrap_PtrArray_slice},
    { "erase", _wrap_PtrArray_erase},
    {0,0}
};
static swig_lua_method swig_PtrArray_meta[] = {
    { "__getitem", _wrap_PtrArray___getitem},
    { "__setitem", _wrap_PtrArray___setitem},
    { "__add", _wrap_PtrArray___add},
    {0,0}
};

static swig_lua_attribute swig_PtrArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PtrArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PtrArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PtrArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PtrArray_Sf_SwigStatic = {
    "PtrArray",
    swig_PtrArray_Sf_SwigStatic_methods,
    swig_PtrArray_Sf_SwigStatic_attributes,
    swig_PtrArray_Sf_SwigStatic_constants,
    swig_PtrArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PtrArray_bases[] = {0};
static const char *swig_PtrArray_base_names[] = {0};
static swig_lua_class _wrap_class_PtrArray = { "PtrArray", "PtrArray", &SWIGTYPE_p_ArrayT_void_p_t,_proxy__wrap_new_PtrArray, swig_delete_PtrArray, swig_PtrArray_methods, swig_PtrArray_attributes, &swig_PtrArray_Sf_SwigStatic, swig_PtrArray_meta, swig_PtrArray_bases, swig_PtrArray_base_names };

static int _wrap_BasicArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  std::vector< BasicType > *arg2 = (std::vector< BasicType > *) 0 ;
  
  SWIG_check_num_args("Array< BasicType >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::v",1,"Array< BasicType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< BasicType >::v",2,"std::vector< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_v_set",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_v_set",2,SWIGTYPE_p_std__vectorT_BasicType_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  std::vector< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::v",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_v_get",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (std::vector< BasicType > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_BasicType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::Array",0,0)
  result = (Array< BasicType > *)new Array< BasicType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< BasicType >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< BasicType > *)new Array< BasicType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = 0 ;
  Array< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< BasicType >::Array",1,"Array< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("new_BasicArray",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (Array< BasicType > *)new Array< BasicType >((Array< BasicType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< BasicType > *arg1 = 0 ;
  Array< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< BasicType >::Array",1,"std::vector< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_BasicType_t,0))){
    SWIG_fail_ptr("new_BasicArray",1,SWIGTYPE_p_std__vectorT_BasicType_t);
  }
  
  result = (Array< BasicType > *)new Array< BasicType >((std::vector< BasicType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BasicArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_BasicType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BasicArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_BasicType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BasicArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BasicArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BasicArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< BasicType >::Array()\n"
    "    Array< BasicType >::Array(size_t)\n"
    "    Array< BasicType >::Array(Array< BasicType > const &)\n"
    "    Array< BasicType >::Array(std::vector< BasicType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BasicArray_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType arg3 ;
  BasicType *argp3 ;
  
  SWIG_check_num_args("Array< BasicType >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::set",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::set",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Array< BasicType >::set",3,"BasicType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_set",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicArray_set",3,SWIGTYPE_p_BasicType);
  }
  arg3 = *argp3;
  
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType result;
  
  SWIG_check_num_args("Array< BasicType >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::get",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_get",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< BasicType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::resize",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_resize",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< BasicType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::size",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_size",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< BasicType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::max_size",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_max_size",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< BasicType >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::capacity",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_capacity",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< BasicType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::empty",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_empty",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< BasicType >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::reserve",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_reserve",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  
  SWIG_check_num_args("Array< BasicType >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::shrink_to_fit",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_shrink_to_fit",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType result;
  
  SWIG_check_num_args("Array< BasicType >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::__getitem",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray___getitem",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType arg3 ;
  BasicType *argp3 ;
  
  SWIG_check_num_args("Array< BasicType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::__setitem",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Array< BasicType >::__setitem",3,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray___setitem",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicArray___setitem",3,SWIGTYPE_p_BasicType);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  Array< BasicType > *arg2 = 0 ;
  Array< BasicType > result;
  
  SWIG_check_num_args("Array< BasicType >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::operator +",1,"Array< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< BasicType >::operator +",2,"Array< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray___add",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray___add",2,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (arg1)->operator +((Array< BasicType > const &)*arg2);
  {
    Array< BasicType > * resultptr = new Array< BasicType >((const Array< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType result;
  
  SWIG_check_num_args("Array< BasicType >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::at",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_at",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->at(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  BasicType result;
  
  SWIG_check_num_args("Array< BasicType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::front",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_front",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (arg1)->front();
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  BasicType result;
  
  SWIG_check_num_args("Array< BasicType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::back",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_back",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (arg1)->back();
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  BasicType *result = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::data",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_data",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  result = (BasicType *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BasicType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  Array< BasicType > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< BasicType >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::insert",1,"Array< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< BasicType >::insert",2,"Array< BasicType > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< BasicType >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_insert",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_insert",2,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< BasicType > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  Array< BasicType > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::copy",1,"Array< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< BasicType >::copy",2,"Array< BasicType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_copy",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_copy",2,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  Array< BasicType > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< BasicType >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::copy_backward",1,"Array< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< BasicType >::copy_backward",2,"Array< BasicType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_copy_backward",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_copy_backward",2,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  BasicType arg2 ;
  BasicType *argp2 ;
  
  SWIG_check_num_args("Array< BasicType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::push_back",1,"Array< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< BasicType >::push_back",2,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_push_back",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicArray_push_back",2,SWIGTYPE_p_BasicType);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  
  SWIG_check_num_args("Array< BasicType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::pop_back",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_pop_back",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  
  SWIG_check_num_args("Array< BasicType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::clear",1,"Array< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_clear",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  Array< BasicType > result;
  
  SWIG_check_num_args("Array< BasicType >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::slice",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_slice",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< BasicType > * resultptr = new Array< BasicType >((const Array< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< BasicType > result;
  
  SWIG_check_num_args("Array< BasicType >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::slice",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< BasicType >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_slice",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< BasicType > * resultptr = new Array< BasicType >((const Array< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< BasicType > result;
  
  SWIG_check_num_args("Array< BasicType >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::slice",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< BasicType >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< BasicType >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_slice",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< BasicType > * resultptr = new Array< BasicType >((const Array< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_BasicType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BasicArray_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_BasicType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BasicArray_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_BasicType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BasicArray_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BasicArray_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< BasicType >::slice(size_t)\n"
    "    Array< BasicType >::slice(size_t,size_t)\n"
    "    Array< BasicType >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_BasicArray_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< BasicType >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::erase",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_erase",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< BasicType > *arg1 = (Array< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< BasicType >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< BasicType >::erase",1,"Array< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< BasicType >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< BasicType >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicArray_erase",1,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicArray_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_BasicType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BasicArray_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_BasicType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BasicArray_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BasicArray_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< BasicType >::erase(size_t)\n"
    "    Array< BasicType >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_BasicArray(void *obj) {
Array< BasicType > *arg1 = (Array< BasicType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicArray_attributes[] = {
    { "v", _wrap_BasicArray_v_get, _wrap_BasicArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_BasicArray_methods[]= {
    { "set", _wrap_BasicArray_set},
    { "get", _wrap_BasicArray_get},
    { "resize", _wrap_BasicArray_resize},
    { "size", _wrap_BasicArray_size},
    { "max_size", _wrap_BasicArray_max_size},
    { "capacity", _wrap_BasicArray_capacity},
    { "empty", _wrap_BasicArray_empty},
    { "reserve", _wrap_BasicArray_reserve},
    { "shrink_to_fit", _wrap_BasicArray_shrink_to_fit},
    { "__getitem", _wrap_BasicArray___getitem},
    { "__setitem", _wrap_BasicArray___setitem},
    { "__add", _wrap_BasicArray___add},
    { "at", _wrap_BasicArray_at},
    { "front", _wrap_BasicArray_front},
    { "back", _wrap_BasicArray_back},
    { "data", _wrap_BasicArray_data},
    { "insert", _wrap_BasicArray_insert},
    { "copy", _wrap_BasicArray_copy},
    { "copy_backward", _wrap_BasicArray_copy_backward},
    { "push_back", _wrap_BasicArray_push_back},
    { "pop_back", _wrap_BasicArray_pop_back},
    { "clear", _wrap_BasicArray_clear},
    { "slice", _wrap_BasicArray_slice},
    { "erase", _wrap_BasicArray_erase},
    {0,0}
};
static swig_lua_method swig_BasicArray_meta[] = {
    { "__getitem", _wrap_BasicArray___getitem},
    { "__setitem", _wrap_BasicArray___setitem},
    { "__add", _wrap_BasicArray___add},
    {0,0}
};

static swig_lua_attribute swig_BasicArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicArray_Sf_SwigStatic = {
    "BasicArray",
    swig_BasicArray_Sf_SwigStatic_methods,
    swig_BasicArray_Sf_SwigStatic_attributes,
    swig_BasicArray_Sf_SwigStatic_constants,
    swig_BasicArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicArray_bases[] = {0};
static const char *swig_BasicArray_base_names[] = {0};
static swig_lua_class _wrap_class_BasicArray = { "BasicArray", "BasicArray", &SWIGTYPE_p_ArrayT_BasicType_t,_proxy__wrap_new_BasicArray, swig_delete_BasicArray, swig_BasicArray_methods, swig_BasicArray_attributes, &swig_BasicArray_Sf_SwigStatic, swig_BasicArray_meta, swig_BasicArray_bases, swig_BasicArray_base_names };

static int _wrap_RefArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  std::vector< SWIGLUA_REF > *arg2 = (std::vector< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::v",1,"Array< SWIGLUA_REF > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::v",2,"std::vector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_v_set",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_v_set",2,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  std::vector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::v",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_v_get",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (std::vector< SWIGLUA_REF > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::Array",0,0)
  result = (Array< SWIGLUA_REF > *)new Array< SWIGLUA_REF >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Array< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::Array",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Array< SWIGLUA_REF > *)new Array< SWIGLUA_REF >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = 0 ;
  Array< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::Array",1,"Array< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("new_RefArray",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (Array< SWIGLUA_REF > *)new Array< SWIGLUA_REF >((Array< SWIGLUA_REF > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = 0 ;
  Array< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::Array",1,"std::vector< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("new_RefArray",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = (Array< SWIGLUA_REF > *)new Array< SWIGLUA_REF >((std::vector< SWIGLUA_REF > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RefArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RefArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_SWIGLUA_REF_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RefArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RefArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RefArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RefArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< SWIGLUA_REF >::Array()\n"
    "    Array< SWIGLUA_REF >::Array(size_t)\n"
    "    Array< SWIGLUA_REF >::Array(Array< SWIGLUA_REF > const &)\n"
    "    Array< SWIGLUA_REF >::Array(std::vector< SWIGLUA_REF > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RefArray_set(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF arg3 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::set",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::set",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_set",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  swiglua_ref_set(&arg3,L,3); 
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_get(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::get",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_get",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get(arg2);
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::resize",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_resize",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::size",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_size",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::max_size",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_max_size",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::capacity",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_capacity",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::empty",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_empty",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::reserve",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_reserve",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::shrink_to_fit",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_shrink_to_fit",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::__getitem",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray___getitem",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF arg3 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::__setitem",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::__setitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray___setitem",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  swiglua_ref_set(&arg3,L,3); 
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray___add(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  Array< SWIGLUA_REF > *arg2 = 0 ;
  Array< SWIGLUA_REF > result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::operator +",1,"Array< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::operator +",2,"Array< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray___add",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray___add",2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (arg1)->operator +((Array< SWIGLUA_REF > const &)*arg2);
  {
    Array< SWIGLUA_REF > * resultptr = new Array< SWIGLUA_REF >((const Array< SWIGLUA_REF > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_at(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::at",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_at",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->at(arg2);
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_front(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::front",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_front",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (arg1)->front();
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::back",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_back",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (arg1)->back();
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_data(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF *result = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::data",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_data",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  result = (SWIGLUA_REF *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SWIGLUA_REF,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_insert(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  Array< SWIGLUA_REF > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::insert",1,"Array< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::insert",2,"Array< SWIGLUA_REF > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< SWIGLUA_REF >::insert",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_insert",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_insert",2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->insert((Array< SWIGLUA_REF > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_copy(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  Array< SWIGLUA_REF > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::copy",1,"Array< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::copy",2,"Array< SWIGLUA_REF > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_copy",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_copy",2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_copy_backward(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  Array< SWIGLUA_REF > *arg2 = 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::copy_backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::copy_backward",1,"Array< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::copy_backward",2,"Array< SWIGLUA_REF > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_copy_backward",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_copy_backward",2,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  (arg1)->copy_backward(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF arg2 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::push_back",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_push_back",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  swiglua_ref_set(&arg2,L,2); 
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::pop_back",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_pop_back",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::clear",1,"Array< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_clear",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  Array< SWIGLUA_REF > result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_slice",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->slice(arg2);
  {
    Array< SWIGLUA_REF > * resultptr = new Array< SWIGLUA_REF >((const Array< SWIGLUA_REF > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Array< SWIGLUA_REF > result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_slice",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    Array< SWIGLUA_REF > * resultptr = new Array< SWIGLUA_REF >((const Array< SWIGLUA_REF > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Array< SWIGLUA_REF > result;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Array< SWIGLUA_REF >::slice",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_slice",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    Array< SWIGLUA_REF > * resultptr = new Array< SWIGLUA_REF >((const Array< SWIGLUA_REF > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RefArray_slice__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RefArray_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RefArray_slice__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RefArray_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< SWIGLUA_REF >::slice(size_t)\n"
    "    Array< SWIGLUA_REF >::slice(size_t,size_t)\n"
    "    Array< SWIGLUA_REF >::slice(size_t,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_RefArray_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::erase",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_erase",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Array< SWIGLUA_REF >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Array< SWIGLUA_REF >::erase",1,"Array< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Array< SWIGLUA_REF >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Array< SWIGLUA_REF >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("RefArray_erase",1,SWIGTYPE_p_ArrayT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RefArray_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RefArray_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RefArray_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RefArray_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array< SWIGLUA_REF >::erase(size_t)\n"
    "    Array< SWIGLUA_REF >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_RefArray(void *obj) {
Array< SWIGLUA_REF > *arg1 = (Array< SWIGLUA_REF > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RefArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RefArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RefArray_attributes[] = {
    { "v", _wrap_RefArray_v_get, _wrap_RefArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_RefArray_methods[]= {
    { "set", _wrap_RefArray_set},
    { "get", _wrap_RefArray_get},
    { "resize", _wrap_RefArray_resize},
    { "size", _wrap_RefArray_size},
    { "max_size", _wrap_RefArray_max_size},
    { "capacity", _wrap_RefArray_capacity},
    { "empty", _wrap_RefArray_empty},
    { "reserve", _wrap_RefArray_reserve},
    { "shrink_to_fit", _wrap_RefArray_shrink_to_fit},
    { "__getitem", _wrap_RefArray___getitem},
    { "__setitem", _wrap_RefArray___setitem},
    { "__add", _wrap_RefArray___add},
    { "at", _wrap_RefArray_at},
    { "front", _wrap_RefArray_front},
    { "back", _wrap_RefArray_back},
    { "data", _wrap_RefArray_data},
    { "insert", _wrap_RefArray_insert},
    { "copy", _wrap_RefArray_copy},
    { "copy_backward", _wrap_RefArray_copy_backward},
    { "push_back", _wrap_RefArray_push_back},
    { "pop_back", _wrap_RefArray_pop_back},
    { "clear", _wrap_RefArray_clear},
    { "slice", _wrap_RefArray_slice},
    { "erase", _wrap_RefArray_erase},
    {0,0}
};
static swig_lua_method swig_RefArray_meta[] = {
    { "__getitem", _wrap_RefArray___getitem},
    { "__setitem", _wrap_RefArray___setitem},
    { "__add", _wrap_RefArray___add},
    {0,0}
};

static swig_lua_attribute swig_RefArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RefArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RefArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RefArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RefArray_Sf_SwigStatic = {
    "RefArray",
    swig_RefArray_Sf_SwigStatic_methods,
    swig_RefArray_Sf_SwigStatic_attributes,
    swig_RefArray_Sf_SwigStatic_constants,
    swig_RefArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RefArray_bases[] = {0};
static const char *swig_RefArray_base_names[] = {0};
static swig_lua_class _wrap_class_RefArray = { "RefArray", "RefArray", &SWIGTYPE_p_ArrayT_SWIGLUA_REF_t,_proxy__wrap_new_RefArray, swig_delete_RefArray, swig_RefArray_methods, swig_RefArray_attributes, &swig_RefArray_Sf_SwigStatic, swig_RefArray_meta, swig_RefArray_bases, swig_RefArray_base_names };

static int _wrap_FloatMatrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  std::vector< std::vector< float > > *arg2 = (std::vector< std::vector< float > > *) 0 ;
  
  SWIG_check_num_args("Matrix< float >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::v",1,"Matrix< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< float >::v",2,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_v_set",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("FloatMatrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< float >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::v",1,"Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_v_get",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  result = (std::vector< std::vector< float > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Matrix< float >::Matrix",0,0)
  result = (Matrix< float > *)new Matrix< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Matrix< float >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< float >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< float > *)new Matrix< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = 0 ;
  Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< float >::Matrix",1,"Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  result = (Matrix< float > *)new Matrix< float >((Matrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatMatrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< float >::Matrix()\n"
    "    Matrix< float >::Matrix(size_t,size_t)\n"
    "    Matrix< float >::Matrix(Matrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  Array< float > result;
  
  SWIG_check_num_args("Matrix< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::__getitem",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___getitem",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  Array< float > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::__setitem",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< float >::__setitem",3,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___setitem",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___setitem",3,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->__setitem(arg2,(Array< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  Array< float > result;
  
  SWIG_check_num_args("Matrix< float >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::get_col",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_get_col",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Matrix< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::operator ()",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___call",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Matrix< float >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::set",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< float >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< float >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  SWIG_check_num_args("Matrix< float >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::get",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< float >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_get",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  Array< float > result;
  
  SWIG_check_num_args("Matrix< float >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::get_row",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_get_row",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::resize",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< float >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_resize",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::rows",1,"Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rows",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::cols",1,"Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cols",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::empty",1,"Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_empty",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  SWIG_check_num_args("Matrix< float >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::at",1,"Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< float >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< float >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_at",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Matrix< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::clear",1,"Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_clear",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Array< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< float >::push_back",1,"Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< float >::push_back",2,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_push_back",1,SWIGTYPE_p_MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_push_back",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->push_back((Array< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatMatrix(void *obj) {
Matrix< float > *arg1 = (Matrix< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatMatrix_attributes[] = {
    { "v", _wrap_FloatMatrix_v_get, _wrap_FloatMatrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_FloatMatrix_methods[]= {
    { "__getitem", _wrap_FloatMatrix___getitem},
    { "__setitem", _wrap_FloatMatrix___setitem},
    { "get_col", _wrap_FloatMatrix_get_col},
    { "__call", _wrap_FloatMatrix___call},
    { "set", _wrap_FloatMatrix_set},
    { "get", _wrap_FloatMatrix_get},
    { "get_row", _wrap_FloatMatrix_get_row},
    { "resize", _wrap_FloatMatrix_resize},
    { "rows", _wrap_FloatMatrix_rows},
    { "cols", _wrap_FloatMatrix_cols},
    { "empty", _wrap_FloatMatrix_empty},
    { "at", _wrap_FloatMatrix_at},
    { "clear", _wrap_FloatMatrix_clear},
    { "push_back", _wrap_FloatMatrix_push_back},
    {0,0}
};
static swig_lua_method swig_FloatMatrix_meta[] = {
    { "__getitem", _wrap_FloatMatrix___getitem},
    { "__setitem", _wrap_FloatMatrix___setitem},
    { "__call", _wrap_FloatMatrix___call},
    {0,0}
};

static swig_lua_attribute swig_FloatMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatMatrix_Sf_SwigStatic = {
    "FloatMatrix",
    swig_FloatMatrix_Sf_SwigStatic_methods,
    swig_FloatMatrix_Sf_SwigStatic_attributes,
    swig_FloatMatrix_Sf_SwigStatic_constants,
    swig_FloatMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatMatrix_bases[] = {0};
static const char *swig_FloatMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_FloatMatrix = { "FloatMatrix", "FloatMatrix", &SWIGTYPE_p_MatrixT_float_t,_proxy__wrap_new_FloatMatrix, swig_delete_FloatMatrix, swig_FloatMatrix_methods, swig_FloatMatrix_attributes, &swig_FloatMatrix_Sf_SwigStatic, swig_FloatMatrix_meta, swig_FloatMatrix_bases, swig_FloatMatrix_base_names };

static int _wrap_DoubleMatrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  SWIG_check_num_args("Matrix< double >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::v",1,"Matrix< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< double >::v",2,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_v_set",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("DoubleMatrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< double >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::v",1,"Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_v_get",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  result = (std::vector< std::vector< double > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Matrix< double >::Matrix",0,0)
  result = (Matrix< double > *)new Matrix< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Matrix< double >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< double >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< double > *)new Matrix< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = 0 ;
  Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< double >::Matrix",1,"Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  result = (Matrix< double > *)new Matrix< double >((Matrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleMatrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< double >::Matrix()\n"
    "    Matrix< double >::Matrix(size_t,size_t)\n"
    "    Matrix< double >::Matrix(Matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  Array< double > result;
  
  SWIG_check_num_args("Matrix< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::__getitem",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___getitem",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  Array< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::__setitem",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< double >::__setitem",3,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___setitem",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___setitem",3,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->__setitem(arg2,(Array< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  Array< double > result;
  
  SWIG_check_num_args("Matrix< double >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::get_col",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_get_col",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Matrix< double >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::operator ()",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< double >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___call",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("Matrix< double >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::set",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< double >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< double >::set",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("Matrix< double >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::get",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< double >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_get",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  Array< double > result;
  
  SWIG_check_num_args("Matrix< double >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::get_row",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_get_row",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< double >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::resize",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< double >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_resize",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::rows",1,"Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rows",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::cols",1,"Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cols",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::empty",1,"Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_empty",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("Matrix< double >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::at",1,"Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< double >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< double >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_at",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Matrix< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::clear",1,"Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_clear",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Array< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< double >::push_back",1,"Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< double >::push_back",2,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_push_back",1,SWIGTYPE_p_MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_push_back",2,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->push_back((Array< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleMatrix(void *obj) {
Matrix< double > *arg1 = (Matrix< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleMatrix_attributes[] = {
    { "v", _wrap_DoubleMatrix_v_get, _wrap_DoubleMatrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleMatrix_methods[]= {
    { "__getitem", _wrap_DoubleMatrix___getitem},
    { "__setitem", _wrap_DoubleMatrix___setitem},
    { "get_col", _wrap_DoubleMatrix_get_col},
    { "__call", _wrap_DoubleMatrix___call},
    { "set", _wrap_DoubleMatrix_set},
    { "get", _wrap_DoubleMatrix_get},
    { "get_row", _wrap_DoubleMatrix_get_row},
    { "resize", _wrap_DoubleMatrix_resize},
    { "rows", _wrap_DoubleMatrix_rows},
    { "cols", _wrap_DoubleMatrix_cols},
    { "empty", _wrap_DoubleMatrix_empty},
    { "at", _wrap_DoubleMatrix_at},
    { "clear", _wrap_DoubleMatrix_clear},
    { "push_back", _wrap_DoubleMatrix_push_back},
    {0,0}
};
static swig_lua_method swig_DoubleMatrix_meta[] = {
    { "__getitem", _wrap_DoubleMatrix___getitem},
    { "__setitem", _wrap_DoubleMatrix___setitem},
    { "__call", _wrap_DoubleMatrix___call},
    {0,0}
};

static swig_lua_attribute swig_DoubleMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleMatrix_Sf_SwigStatic = {
    "DoubleMatrix",
    swig_DoubleMatrix_Sf_SwigStatic_methods,
    swig_DoubleMatrix_Sf_SwigStatic_attributes,
    swig_DoubleMatrix_Sf_SwigStatic_constants,
    swig_DoubleMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleMatrix_bases[] = {0};
static const char *swig_DoubleMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleMatrix = { "DoubleMatrix", "DoubleMatrix", &SWIGTYPE_p_MatrixT_double_t,_proxy__wrap_new_DoubleMatrix, swig_delete_DoubleMatrix, swig_DoubleMatrix_methods, swig_DoubleMatrix_attributes, &swig_DoubleMatrix_Sf_SwigStatic, swig_DoubleMatrix_meta, swig_DoubleMatrix_bases, swig_DoubleMatrix_base_names };

static int _wrap_Int8Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  std::vector< std::vector< signed char > > *arg2 = (std::vector< std::vector< signed char > > *) 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::v",1,"Matrix< int8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< int8_t >::v",2,"std::vector< std::vector< signed char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_v_set",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_signed_char_t_t,0))){
    SWIG_fail_ptr("Int8Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_signed_char_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  std::vector< std::vector< signed char > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::v",1,"Matrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_v_get",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  result = (std::vector< std::vector< signed char > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_signed_char_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::Matrix",0,0)
  result = (Matrix< int8_t > *)new Matrix< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< int8_t >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< int8_t > *)new Matrix< int8_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< signed char > *arg1 = 0 ;
  Matrix< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< int8_t >::Matrix",1,"Matrix< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Matrix",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  result = (Matrix< int8_t > *)new Matrix< int8_t >((Matrix< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int8Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< int8_t >::Matrix()\n"
    "    Matrix< int8_t >::Matrix(size_t,size_t)\n"
    "    Matrix< int8_t >::Matrix(Matrix< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  Array< signed char > result;
  
  SWIG_check_num_args("Matrix< int8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::__getitem",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix___getitem",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  Array< signed char > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::__setitem",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< int8_t >::__setitem",3,"Array< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix___setitem",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix___setitem",3,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->__setitem(arg2,(Array< signed char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  Array< signed char > result;
  
  SWIG_check_num_args("Matrix< int8_t >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::get_col",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_get_col",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::operator ()",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int8_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix___call",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (signed char *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char arg4 ;
  
  SWIG_check_num_args("Matrix< int8_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::set",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int8_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< int8_t >::set",4,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_set",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (signed char)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char result;
  
  SWIG_check_num_args("Matrix< int8_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::get",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int8_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_get",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (signed char)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  Array< signed char > result;
  
  SWIG_check_num_args("Matrix< int8_t >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::get_row",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_get_row",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< int8_t >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::resize",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int8_t >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_resize",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< int8_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::rows",1,"Matrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_rows",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< int8_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::cols",1,"Matrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_cols",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::empty",1,"Matrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_empty",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char result;
  
  SWIG_check_num_args("Matrix< int8_t >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::at",1,"Matrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int8_t >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int8_t >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_at",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (signed char)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::clear",1,"Matrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_clear",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int8_t > *arg1 = (Matrix< int8_t > *) 0 ;
  Array< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< int8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int8_t >::push_back",1,"Matrix< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< int8_t >::push_back",2,"Array< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_push_back",1,SWIGTYPE_p_MatrixT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_push_back",2,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->push_back((Array< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Matrix(void *obj) {
Matrix< int8_t > *arg1 = (Matrix< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Matrix_attributes[] = {
    { "v", _wrap_Int8Matrix_v_get, _wrap_Int8Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Matrix_methods[]= {
    { "__getitem", _wrap_Int8Matrix___getitem},
    { "__setitem", _wrap_Int8Matrix___setitem},
    { "get_col", _wrap_Int8Matrix_get_col},
    { "__call", _wrap_Int8Matrix___call},
    { "set", _wrap_Int8Matrix_set},
    { "get", _wrap_Int8Matrix_get},
    { "get_row", _wrap_Int8Matrix_get_row},
    { "resize", _wrap_Int8Matrix_resize},
    { "rows", _wrap_Int8Matrix_rows},
    { "cols", _wrap_Int8Matrix_cols},
    { "empty", _wrap_Int8Matrix_empty},
    { "at", _wrap_Int8Matrix_at},
    { "clear", _wrap_Int8Matrix_clear},
    { "push_back", _wrap_Int8Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_Int8Matrix_meta[] = {
    { "__getitem", _wrap_Int8Matrix___getitem},
    { "__setitem", _wrap_Int8Matrix___setitem},
    { "__call", _wrap_Int8Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int8Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Matrix_Sf_SwigStatic = {
    "Int8Matrix",
    swig_Int8Matrix_Sf_SwigStatic_methods,
    swig_Int8Matrix_Sf_SwigStatic_attributes,
    swig_Int8Matrix_Sf_SwigStatic_constants,
    swig_Int8Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Matrix_bases[] = {0};
static const char *swig_Int8Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Matrix = { "Int8Matrix", "Int8Matrix", &SWIGTYPE_p_MatrixT_signed_char_t,_proxy__wrap_new_Int8Matrix, swig_delete_Int8Matrix, swig_Int8Matrix_methods, swig_Int8Matrix_attributes, &swig_Int8Matrix_Sf_SwigStatic, swig_Int8Matrix_meta, swig_Int8Matrix_bases, swig_Int8Matrix_base_names };

static int _wrap_UInt8Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  std::vector< std::vector< unsigned char > > *arg2 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::v",1,"Matrix< uint8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< uint8_t >::v",2,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_v_set",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("UInt8Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::v",1,"Matrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_v_get",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  result = (std::vector< std::vector< unsigned char > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::Matrix",0,0)
  result = (Matrix< uint8_t > *)new Matrix< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< uint8_t >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< uint8_t > *)new Matrix< uint8_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned char > *arg1 = 0 ;
  Matrix< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< uint8_t >::Matrix",1,"Matrix< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Matrix",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  result = (Matrix< uint8_t > *)new Matrix< uint8_t >((Matrix< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt8Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< uint8_t >::Matrix()\n"
    "    Matrix< uint8_t >::Matrix(size_t,size_t)\n"
    "    Matrix< uint8_t >::Matrix(Matrix< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("Matrix< uint8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::__getitem",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix___getitem",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned char > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::__setitem",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< uint8_t >::__setitem",3,"Array< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix___setitem",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix___setitem",3,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->__setitem(arg2,(Array< unsigned char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("Matrix< uint8_t >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::get_col",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_get_col",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::operator ()",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint8_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix___call",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned char *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char arg4 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::set",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint8_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< uint8_t >::set",4,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_set",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char result;
  
  SWIG_check_num_args("Matrix< uint8_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::get",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint8_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_get",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned char)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("Matrix< uint8_t >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::get_row",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_get_row",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::resize",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint8_t >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_resize",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< uint8_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::rows",1,"Matrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_rows",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< uint8_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::cols",1,"Matrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_cols",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::empty",1,"Matrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_empty",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char result;
  
  SWIG_check_num_args("Matrix< uint8_t >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::at",1,"Matrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint8_t >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint8_t >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_at",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned char)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::clear",1,"Matrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_clear",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) 0 ;
  Array< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< uint8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint8_t >::push_back",1,"Matrix< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< uint8_t >::push_back",2,"Array< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_push_back",1,SWIGTYPE_p_MatrixT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_push_back",2,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->push_back((Array< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8Matrix(void *obj) {
Matrix< uint8_t > *arg1 = (Matrix< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Matrix_attributes[] = {
    { "v", _wrap_UInt8Matrix_v_get, _wrap_UInt8Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Matrix_methods[]= {
    { "__getitem", _wrap_UInt8Matrix___getitem},
    { "__setitem", _wrap_UInt8Matrix___setitem},
    { "get_col", _wrap_UInt8Matrix_get_col},
    { "__call", _wrap_UInt8Matrix___call},
    { "set", _wrap_UInt8Matrix_set},
    { "get", _wrap_UInt8Matrix_get},
    { "get_row", _wrap_UInt8Matrix_get_row},
    { "resize", _wrap_UInt8Matrix_resize},
    { "rows", _wrap_UInt8Matrix_rows},
    { "cols", _wrap_UInt8Matrix_cols},
    { "empty", _wrap_UInt8Matrix_empty},
    { "at", _wrap_UInt8Matrix_at},
    { "clear", _wrap_UInt8Matrix_clear},
    { "push_back", _wrap_UInt8Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_UInt8Matrix_meta[] = {
    { "__getitem", _wrap_UInt8Matrix___getitem},
    { "__setitem", _wrap_UInt8Matrix___setitem},
    { "__call", _wrap_UInt8Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt8Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Matrix_Sf_SwigStatic = {
    "UInt8Matrix",
    swig_UInt8Matrix_Sf_SwigStatic_methods,
    swig_UInt8Matrix_Sf_SwigStatic_attributes,
    swig_UInt8Matrix_Sf_SwigStatic_constants,
    swig_UInt8Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Matrix_bases[] = {0};
static const char *swig_UInt8Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8Matrix = { "UInt8Matrix", "UInt8Matrix", &SWIGTYPE_p_MatrixT_unsigned_char_t,_proxy__wrap_new_UInt8Matrix, swig_delete_UInt8Matrix, swig_UInt8Matrix_methods, swig_UInt8Matrix_attributes, &swig_UInt8Matrix_Sf_SwigStatic, swig_UInt8Matrix_meta, swig_UInt8Matrix_bases, swig_UInt8Matrix_base_names };

static int _wrap_Int16Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  std::vector< std::vector< short > > *arg2 = (std::vector< std::vector< short > > *) 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::v",1,"Matrix< int16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< int16_t >::v",2,"std::vector< std::vector< short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_v_set",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_short_t_t,0))){
    SWIG_fail_ptr("Int16Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_short_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  std::vector< std::vector< short > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::v",1,"Matrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_v_get",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  result = (std::vector< std::vector< short > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_short_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::Matrix",0,0)
  result = (Matrix< int16_t > *)new Matrix< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< int16_t >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< int16_t > *)new Matrix< int16_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< short > *arg1 = 0 ;
  Matrix< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< int16_t >::Matrix",1,"Matrix< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("new_Int16Matrix",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  result = (Matrix< int16_t > *)new Matrix< int16_t >((Matrix< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int16Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< int16_t >::Matrix()\n"
    "    Matrix< int16_t >::Matrix(size_t,size_t)\n"
    "    Matrix< int16_t >::Matrix(Matrix< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  Array< short > result;
  
  SWIG_check_num_args("Matrix< int16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::__getitem",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix___getitem",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  Array< short > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::__setitem",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< int16_t >::__setitem",3,"Array< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix___setitem",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix___setitem",3,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->__setitem(arg2,(Array< short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  Array< short > result;
  
  SWIG_check_num_args("Matrix< int16_t >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::get_col",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_get_col",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::operator ()",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int16_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix___call",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (short *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short arg4 ;
  
  SWIG_check_num_args("Matrix< int16_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::set",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int16_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< int16_t >::set",4,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_set",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short result;
  
  SWIG_check_num_args("Matrix< int16_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::get",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int16_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_get",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (short)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  Array< short > result;
  
  SWIG_check_num_args("Matrix< int16_t >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::get_row",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_get_row",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< int16_t >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::resize",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int16_t >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_resize",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< int16_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::rows",1,"Matrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_rows",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< int16_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::cols",1,"Matrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_cols",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::empty",1,"Matrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_empty",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short result;
  
  SWIG_check_num_args("Matrix< int16_t >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::at",1,"Matrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int16_t >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int16_t >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_at",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (short)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::clear",1,"Matrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_clear",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int16_t > *arg1 = (Matrix< int16_t > *) 0 ;
  Array< short > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< int16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int16_t >::push_back",1,"Matrix< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< int16_t >::push_back",2,"Array< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_push_back",1,SWIGTYPE_p_MatrixT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_push_back",2,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->push_back((Array< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Matrix(void *obj) {
Matrix< int16_t > *arg1 = (Matrix< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Matrix_attributes[] = {
    { "v", _wrap_Int16Matrix_v_get, _wrap_Int16Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Matrix_methods[]= {
    { "__getitem", _wrap_Int16Matrix___getitem},
    { "__setitem", _wrap_Int16Matrix___setitem},
    { "get_col", _wrap_Int16Matrix_get_col},
    { "__call", _wrap_Int16Matrix___call},
    { "set", _wrap_Int16Matrix_set},
    { "get", _wrap_Int16Matrix_get},
    { "get_row", _wrap_Int16Matrix_get_row},
    { "resize", _wrap_Int16Matrix_resize},
    { "rows", _wrap_Int16Matrix_rows},
    { "cols", _wrap_Int16Matrix_cols},
    { "empty", _wrap_Int16Matrix_empty},
    { "at", _wrap_Int16Matrix_at},
    { "clear", _wrap_Int16Matrix_clear},
    { "push_back", _wrap_Int16Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_Int16Matrix_meta[] = {
    { "__getitem", _wrap_Int16Matrix___getitem},
    { "__setitem", _wrap_Int16Matrix___setitem},
    { "__call", _wrap_Int16Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int16Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Matrix_Sf_SwigStatic = {
    "Int16Matrix",
    swig_Int16Matrix_Sf_SwigStatic_methods,
    swig_Int16Matrix_Sf_SwigStatic_attributes,
    swig_Int16Matrix_Sf_SwigStatic_constants,
    swig_Int16Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Matrix_bases[] = {0};
static const char *swig_Int16Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Matrix = { "Int16Matrix", "Int16Matrix", &SWIGTYPE_p_MatrixT_short_t,_proxy__wrap_new_Int16Matrix, swig_delete_Int16Matrix, swig_Int16Matrix_methods, swig_Int16Matrix_attributes, &swig_Int16Matrix_Sf_SwigStatic, swig_Int16Matrix_meta, swig_Int16Matrix_bases, swig_Int16Matrix_base_names };

static int _wrap_UInt16Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  std::vector< std::vector< unsigned short > > *arg2 = (std::vector< std::vector< unsigned short > > *) 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::v",1,"Matrix< uint16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< uint16_t >::v",2,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_v_set",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("UInt16Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  std::vector< std::vector< unsigned short > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::v",1,"Matrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_v_get",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  result = (std::vector< std::vector< unsigned short > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::Matrix",0,0)
  result = (Matrix< uint16_t > *)new Matrix< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< uint16_t >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< uint16_t > *)new Matrix< uint16_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned short > *arg1 = 0 ;
  Matrix< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< uint16_t >::Matrix",1,"Matrix< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Matrix",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  result = (Matrix< uint16_t > *)new Matrix< uint16_t >((Matrix< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt16Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< uint16_t >::Matrix()\n"
    "    Matrix< uint16_t >::Matrix(size_t,size_t)\n"
    "    Matrix< uint16_t >::Matrix(Matrix< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("Matrix< uint16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::__getitem",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix___getitem",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned short > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::__setitem",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< uint16_t >::__setitem",3,"Array< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix___setitem",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix___setitem",3,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->__setitem(arg2,(Array< unsigned short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("Matrix< uint16_t >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::get_col",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_get_col",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::operator ()",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint16_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix___call",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned short *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short arg4 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::set",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint16_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< uint16_t >::set",4,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_set",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned short)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short result;
  
  SWIG_check_num_args("Matrix< uint16_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::get",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint16_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_get",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned short)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("Matrix< uint16_t >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::get_row",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_get_row",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::resize",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint16_t >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_resize",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< uint16_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::rows",1,"Matrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_rows",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< uint16_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::cols",1,"Matrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_cols",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::empty",1,"Matrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_empty",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short result;
  
  SWIG_check_num_args("Matrix< uint16_t >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::at",1,"Matrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint16_t >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint16_t >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_at",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned short)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::clear",1,"Matrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_clear",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) 0 ;
  Array< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< uint16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint16_t >::push_back",1,"Matrix< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< uint16_t >::push_back",2,"Array< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_push_back",1,SWIGTYPE_p_MatrixT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_push_back",2,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->push_back((Array< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Matrix(void *obj) {
Matrix< uint16_t > *arg1 = (Matrix< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Matrix_attributes[] = {
    { "v", _wrap_UInt16Matrix_v_get, _wrap_UInt16Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Matrix_methods[]= {
    { "__getitem", _wrap_UInt16Matrix___getitem},
    { "__setitem", _wrap_UInt16Matrix___setitem},
    { "get_col", _wrap_UInt16Matrix_get_col},
    { "__call", _wrap_UInt16Matrix___call},
    { "set", _wrap_UInt16Matrix_set},
    { "get", _wrap_UInt16Matrix_get},
    { "get_row", _wrap_UInt16Matrix_get_row},
    { "resize", _wrap_UInt16Matrix_resize},
    { "rows", _wrap_UInt16Matrix_rows},
    { "cols", _wrap_UInt16Matrix_cols},
    { "empty", _wrap_UInt16Matrix_empty},
    { "at", _wrap_UInt16Matrix_at},
    { "clear", _wrap_UInt16Matrix_clear},
    { "push_back", _wrap_UInt16Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_UInt16Matrix_meta[] = {
    { "__getitem", _wrap_UInt16Matrix___getitem},
    { "__setitem", _wrap_UInt16Matrix___setitem},
    { "__call", _wrap_UInt16Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt16Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Matrix_Sf_SwigStatic = {
    "UInt16Matrix",
    swig_UInt16Matrix_Sf_SwigStatic_methods,
    swig_UInt16Matrix_Sf_SwigStatic_attributes,
    swig_UInt16Matrix_Sf_SwigStatic_constants,
    swig_UInt16Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Matrix_bases[] = {0};
static const char *swig_UInt16Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Matrix = { "UInt16Matrix", "UInt16Matrix", &SWIGTYPE_p_MatrixT_unsigned_short_t,_proxy__wrap_new_UInt16Matrix, swig_delete_UInt16Matrix, swig_UInt16Matrix_methods, swig_UInt16Matrix_attributes, &swig_UInt16Matrix_Sf_SwigStatic, swig_UInt16Matrix_meta, swig_UInt16Matrix_bases, swig_UInt16Matrix_base_names };

static int _wrap_Int32Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  std::vector< std::vector< int > > *arg2 = (std::vector< std::vector< int > > *) 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::v",1,"Matrix< int32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< int32_t >::v",2,"std::vector< std::vector< int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_v_set",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,0))){
    SWIG_fail_ptr("Int32Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::v",1,"Matrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_v_get",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  result = (std::vector< std::vector< int > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::Matrix",0,0)
  result = (Matrix< int32_t > *)new Matrix< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< int32_t >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< int32_t > *)new Matrix< int32_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int > *arg1 = 0 ;
  Matrix< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< int32_t >::Matrix",1,"Matrix< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("new_Int32Matrix",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  result = (Matrix< int32_t > *)new Matrix< int32_t >((Matrix< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int32Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< int32_t >::Matrix()\n"
    "    Matrix< int32_t >::Matrix(size_t,size_t)\n"
    "    Matrix< int32_t >::Matrix(Matrix< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  Array< int > result;
  
  SWIG_check_num_args("Matrix< int32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::__getitem",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix___getitem",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  Array< int > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::__setitem",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< int32_t >::__setitem",3,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix___setitem",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix___setitem",3,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->__setitem(arg2,(Array< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  Array< int > result;
  
  SWIG_check_num_args("Matrix< int32_t >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::get_col",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_get_col",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::operator ()",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int32_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix___call",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Matrix< int32_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::set",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int32_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< int32_t >::set",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_set",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int result;
  
  SWIG_check_num_args("Matrix< int32_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::get",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int32_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_get",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  Array< int > result;
  
  SWIG_check_num_args("Matrix< int32_t >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::get_row",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_get_row",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< int32_t >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::resize",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int32_t >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_resize",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< int32_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::rows",1,"Matrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_rows",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< int32_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::cols",1,"Matrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_cols",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::empty",1,"Matrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_empty",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int result;
  
  SWIG_check_num_args("Matrix< int32_t >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::at",1,"Matrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< int32_t >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< int32_t >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_at",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::clear",1,"Matrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_clear",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< int32_t > *arg1 = (Matrix< int32_t > *) 0 ;
  Array< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< int32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< int32_t >::push_back",1,"Matrix< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< int32_t >::push_back",2,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_push_back",1,SWIGTYPE_p_MatrixT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_push_back",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->push_back((Array< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Matrix(void *obj) {
Matrix< int32_t > *arg1 = (Matrix< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Matrix_attributes[] = {
    { "v", _wrap_Int32Matrix_v_get, _wrap_Int32Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Matrix_methods[]= {
    { "__getitem", _wrap_Int32Matrix___getitem},
    { "__setitem", _wrap_Int32Matrix___setitem},
    { "get_col", _wrap_Int32Matrix_get_col},
    { "__call", _wrap_Int32Matrix___call},
    { "set", _wrap_Int32Matrix_set},
    { "get", _wrap_Int32Matrix_get},
    { "get_row", _wrap_Int32Matrix_get_row},
    { "resize", _wrap_Int32Matrix_resize},
    { "rows", _wrap_Int32Matrix_rows},
    { "cols", _wrap_Int32Matrix_cols},
    { "empty", _wrap_Int32Matrix_empty},
    { "at", _wrap_Int32Matrix_at},
    { "clear", _wrap_Int32Matrix_clear},
    { "push_back", _wrap_Int32Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_Int32Matrix_meta[] = {
    { "__getitem", _wrap_Int32Matrix___getitem},
    { "__setitem", _wrap_Int32Matrix___setitem},
    { "__call", _wrap_Int32Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int32Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Matrix_Sf_SwigStatic = {
    "Int32Matrix",
    swig_Int32Matrix_Sf_SwigStatic_methods,
    swig_Int32Matrix_Sf_SwigStatic_attributes,
    swig_Int32Matrix_Sf_SwigStatic_constants,
    swig_Int32Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Matrix_bases[] = {0};
static const char *swig_Int32Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Matrix = { "Int32Matrix", "Int32Matrix", &SWIGTYPE_p_MatrixT_int_t,_proxy__wrap_new_Int32Matrix, swig_delete_Int32Matrix, swig_Int32Matrix_methods, swig_Int32Matrix_attributes, &swig_Int32Matrix_Sf_SwigStatic, swig_Int32Matrix_meta, swig_Int32Matrix_bases, swig_Int32Matrix_base_names };

static int _wrap_UInt32Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  std::vector< std::vector< unsigned int > > *arg2 = (std::vector< std::vector< unsigned int > > *) 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::v",1,"Matrix< uint32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< uint32_t >::v",2,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_v_set",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("UInt32Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::v",1,"Matrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_v_get",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  result = (std::vector< std::vector< unsigned int > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::Matrix",0,0)
  result = (Matrix< uint32_t > *)new Matrix< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< uint32_t >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< uint32_t > *)new Matrix< uint32_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned int > *arg1 = 0 ;
  Matrix< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< uint32_t >::Matrix",1,"Matrix< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Matrix",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  result = (Matrix< uint32_t > *)new Matrix< uint32_t >((Matrix< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt32Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< uint32_t >::Matrix()\n"
    "    Matrix< uint32_t >::Matrix(size_t,size_t)\n"
    "    Matrix< uint32_t >::Matrix(Matrix< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("Matrix< uint32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::__getitem",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix___getitem",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::__setitem",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< uint32_t >::__setitem",3,"Array< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix___setitem",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix___setitem",3,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->__setitem(arg2,(Array< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("Matrix< uint32_t >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::get_col",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_get_col",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::operator ()",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint32_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix___call",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned int *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::set",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint32_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< uint32_t >::set",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_set",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Matrix< uint32_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::get",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint32_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_get",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("Matrix< uint32_t >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::get_row",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_get_row",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::resize",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint32_t >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_resize",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< uint32_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::rows",1,"Matrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_rows",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< uint32_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::cols",1,"Matrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_cols",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::empty",1,"Matrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_empty",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Matrix< uint32_t >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::at",1,"Matrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< uint32_t >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< uint32_t >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_at",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::clear",1,"Matrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_clear",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) 0 ;
  Array< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< uint32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< uint32_t >::push_back",1,"Matrix< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< uint32_t >::push_back",2,"Array< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_push_back",1,SWIGTYPE_p_MatrixT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_push_back",2,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->push_back((Array< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Matrix(void *obj) {
Matrix< uint32_t > *arg1 = (Matrix< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Matrix_attributes[] = {
    { "v", _wrap_UInt32Matrix_v_get, _wrap_UInt32Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Matrix_methods[]= {
    { "__getitem", _wrap_UInt32Matrix___getitem},
    { "__setitem", _wrap_UInt32Matrix___setitem},
    { "get_col", _wrap_UInt32Matrix_get_col},
    { "__call", _wrap_UInt32Matrix___call},
    { "set", _wrap_UInt32Matrix_set},
    { "get", _wrap_UInt32Matrix_get},
    { "get_row", _wrap_UInt32Matrix_get_row},
    { "resize", _wrap_UInt32Matrix_resize},
    { "rows", _wrap_UInt32Matrix_rows},
    { "cols", _wrap_UInt32Matrix_cols},
    { "empty", _wrap_UInt32Matrix_empty},
    { "at", _wrap_UInt32Matrix_at},
    { "clear", _wrap_UInt32Matrix_clear},
    { "push_back", _wrap_UInt32Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_UInt32Matrix_meta[] = {
    { "__getitem", _wrap_UInt32Matrix___getitem},
    { "__setitem", _wrap_UInt32Matrix___setitem},
    { "__call", _wrap_UInt32Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt32Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Matrix_Sf_SwigStatic = {
    "UInt32Matrix",
    swig_UInt32Matrix_Sf_SwigStatic_methods,
    swig_UInt32Matrix_Sf_SwigStatic_attributes,
    swig_UInt32Matrix_Sf_SwigStatic_constants,
    swig_UInt32Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Matrix_bases[] = {0};
static const char *swig_UInt32Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Matrix = { "UInt32Matrix", "UInt32Matrix", &SWIGTYPE_p_MatrixT_unsigned_int_t,_proxy__wrap_new_UInt32Matrix, swig_delete_UInt32Matrix, swig_UInt32Matrix_methods, swig_UInt32Matrix_attributes, &swig_UInt32Matrix_Sf_SwigStatic, swig_UInt32Matrix_meta, swig_UInt32Matrix_bases, swig_UInt32Matrix_base_names };

static int _wrap_Int64Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  std::vector< std::vector< long long > > *arg2 = (std::vector< std::vector< long long > > *) 0 ;
  
  SWIG_check_num_args("Matrix< long long >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::v",1,"Matrix< long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< long long >::v",2,"std::vector< std::vector< long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_v_set",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_long_long_t_t,0))){
    SWIG_fail_ptr("Int64Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_long_long_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  std::vector< std::vector< long long > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< long long >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::v",1,"Matrix< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_v_get",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  result = (std::vector< std::vector< long long > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_long_long_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *result = 0 ;
  
  SWIG_check_num_args("Matrix< long long >::Matrix",0,0)
  result = (Matrix< long long > *)new Matrix< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< long long > *result = 0 ;
  
  SWIG_check_num_args("Matrix< long long >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< long long >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< long long > *)new Matrix< long long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = 0 ;
  Matrix< long long > *result = 0 ;
  
  SWIG_check_num_args("Matrix< long long >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< long long >::Matrix",1,"Matrix< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("new_Int64Matrix",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  result = (Matrix< long long > *)new Matrix< long long >((Matrix< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int64Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< long long >::Matrix()\n"
    "    Matrix< long long >::Matrix(size_t,size_t)\n"
    "    Matrix< long long >::Matrix(Matrix< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  Array< long long > result;
  
  SWIG_check_num_args("Matrix< long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::__getitem",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix___getitem",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  Array< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::__setitem",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< long long >::__setitem",3,"Array< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix___setitem",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix___setitem",3,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->__setitem(arg2,(Array< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  Array< long long > result;
  
  SWIG_check_num_args("Matrix< long long >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::get_col",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_get_col",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Matrix< long long >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::operator ()",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< long long >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix___call",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long arg4 ;
  
  SWIG_check_num_args("Matrix< long long >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::set",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< long long >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< long long >::set",4,"long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_set",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (long long)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long result;
  
  SWIG_check_num_args("Matrix< long long >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::get",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< long long >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_get",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long long)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  Array< long long > result;
  
  SWIG_check_num_args("Matrix< long long >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::get_row",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_get_row",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< long long >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::resize",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< long long >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_resize",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< long long >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::rows",1,"Matrix< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_rows",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< long long >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::cols",1,"Matrix< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_cols",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::empty",1,"Matrix< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_empty",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long result;
  
  SWIG_check_num_args("Matrix< long long >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::at",1,"Matrix< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< long long >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< long long >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_at",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long long)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  
  SWIG_check_num_args("Matrix< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::clear",1,"Matrix< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_clear",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< long long > *arg1 = (Matrix< long long > *) 0 ;
  Array< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< long long >::push_back",1,"Matrix< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< long long >::push_back",2,"Array< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_push_back",1,SWIGTYPE_p_MatrixT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_push_back",2,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->push_back((Array< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Matrix(void *obj) {
Matrix< long long > *arg1 = (Matrix< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Matrix_attributes[] = {
    { "v", _wrap_Int64Matrix_v_get, _wrap_Int64Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Matrix_methods[]= {
    { "__getitem", _wrap_Int64Matrix___getitem},
    { "__setitem", _wrap_Int64Matrix___setitem},
    { "get_col", _wrap_Int64Matrix_get_col},
    { "__call", _wrap_Int64Matrix___call},
    { "set", _wrap_Int64Matrix_set},
    { "get", _wrap_Int64Matrix_get},
    { "get_row", _wrap_Int64Matrix_get_row},
    { "resize", _wrap_Int64Matrix_resize},
    { "rows", _wrap_Int64Matrix_rows},
    { "cols", _wrap_Int64Matrix_cols},
    { "empty", _wrap_Int64Matrix_empty},
    { "at", _wrap_Int64Matrix_at},
    { "clear", _wrap_Int64Matrix_clear},
    { "push_back", _wrap_Int64Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_Int64Matrix_meta[] = {
    { "__getitem", _wrap_Int64Matrix___getitem},
    { "__setitem", _wrap_Int64Matrix___setitem},
    { "__call", _wrap_Int64Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int64Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Matrix_Sf_SwigStatic = {
    "Int64Matrix",
    swig_Int64Matrix_Sf_SwigStatic_methods,
    swig_Int64Matrix_Sf_SwigStatic_attributes,
    swig_Int64Matrix_Sf_SwigStatic_constants,
    swig_Int64Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Matrix_bases[] = {0};
static const char *swig_Int64Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Matrix = { "Int64Matrix", "Int64Matrix", &SWIGTYPE_p_MatrixT_long_long_t,_proxy__wrap_new_Int64Matrix, swig_delete_Int64Matrix, swig_Int64Matrix_methods, swig_Int64Matrix_attributes, &swig_Int64Matrix_Sf_SwigStatic, swig_Int64Matrix_meta, swig_Int64Matrix_bases, swig_Int64Matrix_base_names };

static int _wrap_UInt64Matrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  std::vector< std::vector< unsigned long long > > *arg2 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::v",1,"Matrix< unsigned long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::v",2,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_v_set",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("UInt64Matrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  std::vector< std::vector< unsigned long long > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::v",1,"Matrix< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_v_get",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  result = (std::vector< std::vector< unsigned long long > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::Matrix",0,0)
  result = (Matrix< unsigned long long > *)new Matrix< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< unsigned long long > *)new Matrix< unsigned long long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = 0 ;
  Matrix< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::Matrix",1,"Matrix< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_UInt64Matrix",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  result = (Matrix< unsigned long long > *)new Matrix< unsigned long long >((Matrix< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt64Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< unsigned long long >::Matrix()\n"
    "    Matrix< unsigned long long >::Matrix(size_t,size_t)\n"
    "    Matrix< unsigned long long >::Matrix(Matrix< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::__getitem",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix___getitem",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  Array< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::__setitem",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< unsigned long long >::__setitem",3,"Array< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix___setitem",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix___setitem",3,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->__setitem(arg2,(Array< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::get_col",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_get_col",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::operator ()",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< unsigned long long >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix___call",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long arg4 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::set",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< unsigned long long >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix< unsigned long long >::set",4,"unsigned long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_set",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (unsigned long long)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::get",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< unsigned long long >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_get",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long long)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::get_row",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_get_row",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::resize",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< unsigned long long >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_resize",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::rows",1,"Matrix< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_rows",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::cols",1,"Matrix< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_cols",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::empty",1,"Matrix< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_empty",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long result;
  
  SWIG_check_num_args("Matrix< unsigned long long >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::at",1,"Matrix< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< unsigned long long >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_at",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long long)(arg1)->at(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::clear",1,"Matrix< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_clear",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) 0 ;
  Array< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< unsigned long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< unsigned long long >::push_back",1,"Matrix< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< unsigned long long >::push_back",2,"Array< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_push_back",1,SWIGTYPE_p_MatrixT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_push_back",2,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->push_back((Array< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Matrix(void *obj) {
Matrix< unsigned long long > *arg1 = (Matrix< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Matrix_attributes[] = {
    { "v", _wrap_UInt64Matrix_v_get, _wrap_UInt64Matrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Matrix_methods[]= {
    { "__getitem", _wrap_UInt64Matrix___getitem},
    { "__setitem", _wrap_UInt64Matrix___setitem},
    { "get_col", _wrap_UInt64Matrix_get_col},
    { "__call", _wrap_UInt64Matrix___call},
    { "set", _wrap_UInt64Matrix_set},
    { "get", _wrap_UInt64Matrix_get},
    { "get_row", _wrap_UInt64Matrix_get_row},
    { "resize", _wrap_UInt64Matrix_resize},
    { "rows", _wrap_UInt64Matrix_rows},
    { "cols", _wrap_UInt64Matrix_cols},
    { "empty", _wrap_UInt64Matrix_empty},
    { "at", _wrap_UInt64Matrix_at},
    { "clear", _wrap_UInt64Matrix_clear},
    { "push_back", _wrap_UInt64Matrix_push_back},
    {0,0}
};
static swig_lua_method swig_UInt64Matrix_meta[] = {
    { "__getitem", _wrap_UInt64Matrix___getitem},
    { "__setitem", _wrap_UInt64Matrix___setitem},
    { "__call", _wrap_UInt64Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt64Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Matrix_Sf_SwigStatic = {
    "UInt64Matrix",
    swig_UInt64Matrix_Sf_SwigStatic_methods,
    swig_UInt64Matrix_Sf_SwigStatic_attributes,
    swig_UInt64Matrix_Sf_SwigStatic_constants,
    swig_UInt64Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Matrix_bases[] = {0};
static const char *swig_UInt64Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Matrix = { "UInt64Matrix", "UInt64Matrix", &SWIGTYPE_p_MatrixT_unsigned_long_long_t,_proxy__wrap_new_UInt64Matrix, swig_delete_UInt64Matrix, swig_UInt64Matrix_methods, swig_UInt64Matrix_attributes, &swig_UInt64Matrix_Sf_SwigStatic, swig_UInt64Matrix_meta, swig_UInt64Matrix_bases, swig_UInt64Matrix_base_names };

static int _wrap_StringMatrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  std::vector< std::vector< std::string > > *arg2 = (std::vector< std::vector< std::string > > *) 0 ;
  
  SWIG_check_num_args("Matrix< string >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::v",1,"Matrix< string > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< string >::v",2,"std::vector< std::vector< std::string > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_v_set",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t,0))){
    SWIG_fail_ptr("StringMatrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< string >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::v",1,"Matrix< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_v_get",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  result = (std::vector< std::vector< std::string > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *result = 0 ;
  
  SWIG_check_num_args("Matrix< string >::Matrix",0,0)
  result = (Matrix< string > *)new Matrix< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< string > *result = 0 ;
  
  SWIG_check_num_args("Matrix< string >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< string >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< string > *)new Matrix< string >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = 0 ;
  Matrix< string > *result = 0 ;
  
  SWIG_check_num_args("Matrix< string >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< string >::Matrix",1,"Matrix< string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("new_StringMatrix",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  result = (Matrix< string > *)new Matrix< string >((Matrix< string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_string_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringMatrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StringMatrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< string >::Matrix()\n"
    "    Matrix< string >::Matrix(size_t,size_t)\n"
    "    Matrix< string >::Matrix(Matrix< string > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StringMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  Array< string > result;
  
  SWIG_check_num_args("Matrix< string >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::__getitem",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix___getitem",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< string > * resultptr = new Array< string >((const Array< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  Array< string > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< string >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::__setitem",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< string >::__setitem",3,"Array< string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix___setitem",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringMatrix___setitem",3,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->__setitem(arg2,(Array< string > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  Array< string > result;
  
  SWIG_check_num_args("Matrix< string >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::get_col",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_get_col",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< string > * resultptr = new Array< string >((const Array< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  string *result = 0 ;
  
  SWIG_check_num_args("Matrix< string >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::operator ()",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< string >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix___call",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (string *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  string arg4 ;
  string *argp4 ;
  
  SWIG_check_num_args("Matrix< string >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::set",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< string >::set",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix< string >::set",4,"string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_set",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringMatrix_set",4,SWIGTYPE_p_string);
  }
  arg4 = *argp4;
  
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  string result;
  
  SWIG_check_num_args("Matrix< string >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::get",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< string >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_get",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->get(arg2,arg3);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  Array< string > result;
  
  SWIG_check_num_args("Matrix< string >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::get_row",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_get_row",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< string > * resultptr = new Array< string >((const Array< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< string >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::resize",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< string >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_resize",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< string >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::rows",1,"Matrix< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_rows",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< string >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::cols",1,"Matrix< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_cols",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::empty",1,"Matrix< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_empty",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  string result;
  
  SWIG_check_num_args("Matrix< string >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::at",1,"Matrix< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< string >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< string >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_at",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->at(arg2,arg3);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  
  SWIG_check_num_args("Matrix< string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::clear",1,"Matrix< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_clear",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< string > *arg1 = (Matrix< string > *) 0 ;
  Array< string > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< string >::push_back",1,"Matrix< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< string >::push_back",2,"Array< string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_push_back",1,SWIGTYPE_p_MatrixT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringMatrix_push_back",2,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->push_back((Array< string > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringMatrix(void *obj) {
Matrix< string > *arg1 = (Matrix< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringMatrix_attributes[] = {
    { "v", _wrap_StringMatrix_v_get, _wrap_StringMatrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_StringMatrix_methods[]= {
    { "__getitem", _wrap_StringMatrix___getitem},
    { "__setitem", _wrap_StringMatrix___setitem},
    { "get_col", _wrap_StringMatrix_get_col},
    { "__call", _wrap_StringMatrix___call},
    { "set", _wrap_StringMatrix_set},
    { "get", _wrap_StringMatrix_get},
    { "get_row", _wrap_StringMatrix_get_row},
    { "resize", _wrap_StringMatrix_resize},
    { "rows", _wrap_StringMatrix_rows},
    { "cols", _wrap_StringMatrix_cols},
    { "empty", _wrap_StringMatrix_empty},
    { "at", _wrap_StringMatrix_at},
    { "clear", _wrap_StringMatrix_clear},
    { "push_back", _wrap_StringMatrix_push_back},
    {0,0}
};
static swig_lua_method swig_StringMatrix_meta[] = {
    { "__getitem", _wrap_StringMatrix___getitem},
    { "__setitem", _wrap_StringMatrix___setitem},
    { "__call", _wrap_StringMatrix___call},
    {0,0}
};

static swig_lua_attribute swig_StringMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringMatrix_Sf_SwigStatic = {
    "StringMatrix",
    swig_StringMatrix_Sf_SwigStatic_methods,
    swig_StringMatrix_Sf_SwigStatic_attributes,
    swig_StringMatrix_Sf_SwigStatic_constants,
    swig_StringMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringMatrix_bases[] = {0};
static const char *swig_StringMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_StringMatrix = { "StringMatrix", "StringMatrix", &SWIGTYPE_p_MatrixT_string_t,_proxy__wrap_new_StringMatrix, swig_delete_StringMatrix, swig_StringMatrix_methods, swig_StringMatrix_attributes, &swig_StringMatrix_Sf_SwigStatic, swig_StringMatrix_meta, swig_StringMatrix_bases, swig_StringMatrix_base_names };

static int _wrap_BasicMatrix_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  std::vector< std::vector< BasicType > > *arg2 = (std::vector< std::vector< BasicType > > *) 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::v",1,"Matrix< BasicType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Matrix< BasicType >::v",2,"std::vector< std::vector< BasicType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_v_set",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_BasicType_t_t,0))){
    SWIG_fail_ptr("BasicMatrix_v_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_BasicType_t_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  std::vector< std::vector< BasicType > > *result = 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::v",1,"Matrix< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_v_get",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  result = (std::vector< std::vector< BasicType > > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_BasicType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::Matrix",0,0)
  result = (Matrix< BasicType > *)new Matrix< BasicType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Matrix< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix< BasicType >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Matrix< BasicType > *)new Matrix< BasicType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = 0 ;
  Matrix< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix< BasicType >::Matrix",1,"Matrix< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("new_BasicMatrix",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  result = (Matrix< BasicType > *)new Matrix< BasicType >((Matrix< BasicType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BasicMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MatrixT_BasicType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BasicMatrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BasicMatrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BasicMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix< BasicType >::Matrix()\n"
    "    Matrix< BasicType >::Matrix(size_t,size_t)\n"
    "    Matrix< BasicType >::Matrix(Matrix< BasicType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BasicMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  Array< BasicType > result;
  
  SWIG_check_num_args("Matrix< BasicType >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::__getitem",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix___getitem",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    Array< BasicType > * resultptr = new Array< BasicType >((const Array< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  Array< BasicType > *arg3 = 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::__setitem",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix< BasicType >::__setitem",3,"Array< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix___setitem",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix___setitem",3,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->__setitem(arg2,(Array< BasicType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_get_col(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  Array< BasicType > result;
  
  SWIG_check_num_args("Matrix< BasicType >::get_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::get_col",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::get_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_get_col",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_col(arg2);
  {
    Array< BasicType > * resultptr = new Array< BasicType >((const Array< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  BasicType *result = 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::operator ()",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< BasicType >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix___call",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (BasicType *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BasicType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  BasicType arg4 ;
  BasicType *argp4 ;
  
  SWIG_check_num_args("Matrix< BasicType >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::set",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< BasicType >::set",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix< BasicType >::set",4,"BasicType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_set",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicMatrix_set",4,SWIGTYPE_p_BasicType);
  }
  arg4 = *argp4;
  
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  BasicType result;
  
  SWIG_check_num_args("Matrix< BasicType >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::get",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< BasicType >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_get",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->get(arg2,arg3);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  Array< BasicType > result;
  
  SWIG_check_num_args("Matrix< BasicType >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::get_row",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_get_row",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< BasicType > * resultptr = new Array< BasicType >((const Array< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Matrix< BasicType >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::resize",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< BasicType >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_resize",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< BasicType >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::rows",1,"Matrix< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_rows",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Matrix< BasicType >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::cols",1,"Matrix< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_cols",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix< BasicType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::empty",1,"Matrix< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_empty",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_at(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  BasicType result;
  
  SWIG_check_num_args("Matrix< BasicType >::at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::at",1,"Matrix< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix< BasicType >::at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix< BasicType >::at",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_at",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->at(arg2,arg3);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::clear",1,"Matrix< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_clear",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicMatrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Matrix< BasicType > *arg1 = (Matrix< BasicType > *) 0 ;
  Array< BasicType > *arg2 = 0 ;
  
  SWIG_check_num_args("Matrix< BasicType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix< BasicType >::push_back",1,"Matrix< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix< BasicType >::push_back",2,"Array< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MatrixT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_push_back",1,SWIGTYPE_p_MatrixT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicMatrix_push_back",2,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->push_back((Array< BasicType > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicMatrix(void *obj) {
Matrix< BasicType > *arg1 = (Matrix< BasicType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicMatrix_attributes[] = {
    { "v", _wrap_BasicMatrix_v_get, _wrap_BasicMatrix_v_set },
    {0,0,0}
};
static swig_lua_method swig_BasicMatrix_methods[]= {
    { "__getitem", _wrap_BasicMatrix___getitem},
    { "__setitem", _wrap_BasicMatrix___setitem},
    { "get_col", _wrap_BasicMatrix_get_col},
    { "__call", _wrap_BasicMatrix___call},
    { "set", _wrap_BasicMatrix_set},
    { "get", _wrap_BasicMatrix_get},
    { "get_row", _wrap_BasicMatrix_get_row},
    { "resize", _wrap_BasicMatrix_resize},
    { "rows", _wrap_BasicMatrix_rows},
    { "cols", _wrap_BasicMatrix_cols},
    { "empty", _wrap_BasicMatrix_empty},
    { "at", _wrap_BasicMatrix_at},
    { "clear", _wrap_BasicMatrix_clear},
    { "push_back", _wrap_BasicMatrix_push_back},
    {0,0}
};
static swig_lua_method swig_BasicMatrix_meta[] = {
    { "__getitem", _wrap_BasicMatrix___getitem},
    { "__setitem", _wrap_BasicMatrix___setitem},
    { "__call", _wrap_BasicMatrix___call},
    {0,0}
};

static swig_lua_attribute swig_BasicMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicMatrix_Sf_SwigStatic = {
    "BasicMatrix",
    swig_BasicMatrix_Sf_SwigStatic_methods,
    swig_BasicMatrix_Sf_SwigStatic_attributes,
    swig_BasicMatrix_Sf_SwigStatic_constants,
    swig_BasicMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicMatrix_bases[] = {0};
static const char *swig_BasicMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_BasicMatrix = { "BasicMatrix", "BasicMatrix", &SWIGTYPE_p_MatrixT_BasicType_t,_proxy__wrap_new_BasicMatrix, swig_delete_BasicMatrix, swig_BasicMatrix_methods, swig_BasicMatrix_attributes, &swig_BasicMatrix_Sf_SwigStatic, swig_BasicMatrix_meta, swig_BasicMatrix_bases, swig_BasicMatrix_base_names };

static int _wrap_FloatList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  std::list< float > arg2 ;
  std::list< float > *argp2 ;
  
  SWIG_check_num_args("List< float >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::l",1,"List< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< float >::l",2,"std::list< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_l_set",1,SWIGTYPE_p_ListT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_float_t,0))){
    SWIG_fail_ptr("FloatList_l_set",2,SWIGTYPE_p_std__listT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  std::list< float > result;
  
  SWIG_check_num_args("List< float >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::l",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_l_get",1,SWIGTYPE_p_ListT_float_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< float > * resultptr = new std::list< float >((const std::list< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< float > *result = 0 ;
  
  SWIG_check_num_args("List< float >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< float >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< float > *)new List< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *result = 0 ;
  
  SWIG_check_num_args("List< float >::List",0,0)
  result = (List< float > *)new List< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< float >::List(size_t)\n"
    "    List< float >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("List< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::__getitem",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList___getitem",1,SWIGTYPE_p_ListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("List< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::__setitem",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< float >::__setitem",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList___setitem",1,SWIGTYPE_p_ListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t arg2 ;
  Array< float > *arg3 = 0 ;
  
  SWIG_check_num_args("List< float >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::insert_vector",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< float >::insert_vector",3,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_insert_vector",1,SWIGTYPE_p_ListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatList_insert_vector",3,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("List< float >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::insert_at",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< float >::insert_at",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_insert_at",1,SWIGTYPE_p_ListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("List< float >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::remove_at",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_remove_at",1,SWIGTYPE_p_ListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("List< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::push_back",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::push_back",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_push_back",1,SWIGTYPE_p_ListT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("List< float >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::push_front",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::push_front",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_push_front",1,SWIGTYPE_p_ListT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  
  SWIG_check_num_args("List< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::pop_back",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_pop_back",1,SWIGTYPE_p_ListT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  
  SWIG_check_num_args("List< float >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::pop_front",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_pop_front",1,SWIGTYPE_p_ListT_float_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::empty",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_empty",1,SWIGTYPE_p_ListT_float_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::max_size",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_max_size",1,SWIGTYPE_p_ListT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  
  SWIG_check_num_args("List< float >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::unique",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_unique",1,SWIGTYPE_p_ListT_float_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_front(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("List< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::front",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_front",1,SWIGTYPE_p_ListT_float_t);
  }
  
  result = (float)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_back(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("List< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::back",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_back",1,SWIGTYPE_p_ListT_float_t);
  }
  
  result = (float)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::resize",1,"List< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_resize",1,SWIGTYPE_p_ListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  
  SWIG_check_num_args("List< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::clear",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_clear",1,SWIGTYPE_p_ListT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  
  SWIG_check_num_args("List< float >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::reverse",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_reverse",1,SWIGTYPE_p_ListT_float_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_size(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::size",1,"List< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_size",1,SWIGTYPE_p_ListT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatList_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< float > *arg1 = (List< float > *) 0 ;
  List< float > *arg2 = 0 ;
  
  SWIG_check_num_args("List< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< float >::swap",1,"List< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< float >::swap",2,"List< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_swap",1,SWIGTYPE_p_ListT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_float_t,0))){
    SWIG_fail_ptr("FloatList_swap",2,SWIGTYPE_p_ListT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatList(void *obj) {
List< float > *arg1 = (List< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatList_attributes[] = {
    { "l", _wrap_FloatList_l_get, _wrap_FloatList_l_set },
    {0,0,0}
};
static swig_lua_method swig_FloatList_methods[]= {
    { "__getitem", _wrap_FloatList___getitem},
    { "__setitem", _wrap_FloatList___setitem},
    { "insert_vector", _wrap_FloatList_insert_vector},
    { "insert_at", _wrap_FloatList_insert_at},
    { "remove_at", _wrap_FloatList_remove_at},
    { "push_back", _wrap_FloatList_push_back},
    { "push_front", _wrap_FloatList_push_front},
    { "pop_back", _wrap_FloatList_pop_back},
    { "pop_front", _wrap_FloatList_pop_front},
    { "empty", _wrap_FloatList_empty},
    { "max_size", _wrap_FloatList_max_size},
    { "unique", _wrap_FloatList_unique},
    { "front", _wrap_FloatList_front},
    { "back", _wrap_FloatList_back},
    { "resize", _wrap_FloatList_resize},
    { "clear", _wrap_FloatList_clear},
    { "reverse", _wrap_FloatList_reverse},
    { "size", _wrap_FloatList_size},
    { "swap", _wrap_FloatList_swap},
    {0,0}
};
static swig_lua_method swig_FloatList_meta[] = {
    { "__getitem", _wrap_FloatList___getitem},
    { "__setitem", _wrap_FloatList___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatList_Sf_SwigStatic = {
    "FloatList",
    swig_FloatList_Sf_SwigStatic_methods,
    swig_FloatList_Sf_SwigStatic_attributes,
    swig_FloatList_Sf_SwigStatic_constants,
    swig_FloatList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatList_bases[] = {0};
static const char *swig_FloatList_base_names[] = {0};
static swig_lua_class _wrap_class_FloatList = { "FloatList", "FloatList", &SWIGTYPE_p_ListT_float_t,_proxy__wrap_new_FloatList, swig_delete_FloatList, swig_FloatList_methods, swig_FloatList_attributes, &swig_FloatList_Sf_SwigStatic, swig_FloatList_meta, swig_FloatList_bases, swig_FloatList_base_names };

static int _wrap_DoubleList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  std::list< double > arg2 ;
  std::list< double > *argp2 ;
  
  SWIG_check_num_args("List< double >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::l",1,"List< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< double >::l",2,"std::list< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_l_set",1,SWIGTYPE_p_ListT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_double_t,0))){
    SWIG_fail_ptr("DoubleList_l_set",2,SWIGTYPE_p_std__listT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  std::list< double > result;
  
  SWIG_check_num_args("List< double >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::l",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_l_get",1,SWIGTYPE_p_ListT_double_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< double > * resultptr = new std::list< double >((const std::list< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< double > *result = 0 ;
  
  SWIG_check_num_args("List< double >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< double >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< double > *)new List< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *result = 0 ;
  
  SWIG_check_num_args("List< double >::List",0,0)
  result = (List< double > *)new List< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< double >::List(size_t)\n"
    "    List< double >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("List< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::__getitem",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList___getitem",1,SWIGTYPE_p_ListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("List< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::__setitem",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< double >::__setitem",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList___setitem",1,SWIGTYPE_p_ListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t arg2 ;
  Array< double > *arg3 = 0 ;
  
  SWIG_check_num_args("List< double >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::insert_vector",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< double >::insert_vector",3,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_insert_vector",1,SWIGTYPE_p_ListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleList_insert_vector",3,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("List< double >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::insert_at",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< double >::insert_at",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_insert_at",1,SWIGTYPE_p_ListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("List< double >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::remove_at",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_remove_at",1,SWIGTYPE_p_ListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("List< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::push_back",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::push_back",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_push_back",1,SWIGTYPE_p_ListT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("List< double >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::push_front",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::push_front",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_push_front",1,SWIGTYPE_p_ListT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  
  SWIG_check_num_args("List< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::pop_back",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_pop_back",1,SWIGTYPE_p_ListT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  
  SWIG_check_num_args("List< double >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::pop_front",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_pop_front",1,SWIGTYPE_p_ListT_double_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::empty",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_empty",1,SWIGTYPE_p_ListT_double_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::max_size",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_max_size",1,SWIGTYPE_p_ListT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  
  SWIG_check_num_args("List< double >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::unique",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_unique",1,SWIGTYPE_p_ListT_double_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_front(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("List< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::front",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_front",1,SWIGTYPE_p_ListT_double_t);
  }
  
  result = (double)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_back(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("List< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::back",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_back",1,SWIGTYPE_p_ListT_double_t);
  }
  
  result = (double)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::resize",1,"List< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_resize",1,SWIGTYPE_p_ListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  
  SWIG_check_num_args("List< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::clear",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_clear",1,SWIGTYPE_p_ListT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  
  SWIG_check_num_args("List< double >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::reverse",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_reverse",1,SWIGTYPE_p_ListT_double_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_size(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::size",1,"List< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_size",1,SWIGTYPE_p_ListT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleList_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< double > *arg1 = (List< double > *) 0 ;
  List< double > *arg2 = 0 ;
  
  SWIG_check_num_args("List< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< double >::swap",1,"List< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< double >::swap",2,"List< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_swap",1,SWIGTYPE_p_ListT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_double_t,0))){
    SWIG_fail_ptr("DoubleList_swap",2,SWIGTYPE_p_ListT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleList(void *obj) {
List< double > *arg1 = (List< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleList_attributes[] = {
    { "l", _wrap_DoubleList_l_get, _wrap_DoubleList_l_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleList_methods[]= {
    { "__getitem", _wrap_DoubleList___getitem},
    { "__setitem", _wrap_DoubleList___setitem},
    { "insert_vector", _wrap_DoubleList_insert_vector},
    { "insert_at", _wrap_DoubleList_insert_at},
    { "remove_at", _wrap_DoubleList_remove_at},
    { "push_back", _wrap_DoubleList_push_back},
    { "push_front", _wrap_DoubleList_push_front},
    { "pop_back", _wrap_DoubleList_pop_back},
    { "pop_front", _wrap_DoubleList_pop_front},
    { "empty", _wrap_DoubleList_empty},
    { "max_size", _wrap_DoubleList_max_size},
    { "unique", _wrap_DoubleList_unique},
    { "front", _wrap_DoubleList_front},
    { "back", _wrap_DoubleList_back},
    { "resize", _wrap_DoubleList_resize},
    { "clear", _wrap_DoubleList_clear},
    { "reverse", _wrap_DoubleList_reverse},
    { "size", _wrap_DoubleList_size},
    { "swap", _wrap_DoubleList_swap},
    {0,0}
};
static swig_lua_method swig_DoubleList_meta[] = {
    { "__getitem", _wrap_DoubleList___getitem},
    { "__setitem", _wrap_DoubleList___setitem},
    {0,0}
};

static swig_lua_attribute swig_DoubleList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleList_Sf_SwigStatic = {
    "DoubleList",
    swig_DoubleList_Sf_SwigStatic_methods,
    swig_DoubleList_Sf_SwigStatic_attributes,
    swig_DoubleList_Sf_SwigStatic_constants,
    swig_DoubleList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleList_bases[] = {0};
static const char *swig_DoubleList_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleList = { "DoubleList", "DoubleList", &SWIGTYPE_p_ListT_double_t,_proxy__wrap_new_DoubleList, swig_delete_DoubleList, swig_DoubleList_methods, swig_DoubleList_attributes, &swig_DoubleList_Sf_SwigStatic, swig_DoubleList_meta, swig_DoubleList_bases, swig_DoubleList_base_names };

static int _wrap_Int8List_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  std::list< signed char > arg2 ;
  std::list< signed char > *argp2 ;
  
  SWIG_check_num_args("List< int8_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::l",1,"List< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< int8_t >::l",2,"std::list< signed char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_l_set",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_l_set",2,SWIGTYPE_p_std__listT_signed_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  std::list< signed char > result;
  
  SWIG_check_num_args("List< int8_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::l",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_l_get",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< signed char > * resultptr = new std::list< signed char >((const std::list< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8List__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< int8_t > *result = 0 ;
  
  SWIG_check_num_args("List< int8_t >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< int8_t >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< int8_t > *)new List< int8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8List__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *result = 0 ;
  
  SWIG_check_num_args("List< int8_t >::List",0,0)
  result = (List< int8_t > *)new List< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8List(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8List__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8List__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8List'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< int8_t >::List(size_t)\n"
    "    List< int8_t >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_Int8List___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("List< int8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::__getitem",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List___getitem",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("List< int8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::__setitem",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< int8_t >::__setitem",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List___setitem",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t arg2 ;
  Array< signed char > *arg3 = 0 ;
  
  SWIG_check_num_args("List< int8_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::insert_vector",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< int8_t >::insert_vector",3,"Array< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_insert_vector",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_insert_vector",3,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< signed char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("List< int8_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::insert_at",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< int8_t >::insert_at",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_insert_at",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("List< int8_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::remove_at",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_remove_at",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("List< int8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::push_back",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::push_back",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_push_back",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("List< int8_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::push_front",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::push_front",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_push_front",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  
  SWIG_check_num_args("List< int8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::pop_back",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_pop_back",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  
  SWIG_check_num_args("List< int8_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::pop_front",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_pop_front",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::empty",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_empty",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< int8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::max_size",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_max_size",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  
  SWIG_check_num_args("List< int8_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::unique",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_unique",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("List< int8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::front",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_front",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  result = (signed char)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("List< int8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::back",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_back",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  result = (signed char)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< int8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::resize",1,"List< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_resize",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  
  SWIG_check_num_args("List< int8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::clear",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_clear",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  
  SWIG_check_num_args("List< int8_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::reverse",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_reverse",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_size(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::size",1,"List< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_size",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8List_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< int8_t > *arg1 = (List< int8_t > *) 0 ;
  List< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("List< int8_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int8_t >::swap",1,"List< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< int8_t >::swap",2,"List< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_swap",1,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8List_swap",2,SWIGTYPE_p_ListT_signed_char_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8List(void *obj) {
List< int8_t > *arg1 = (List< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8List(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8List);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8List_attributes[] = {
    { "l", _wrap_Int8List_l_get, _wrap_Int8List_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int8List_methods[]= {
    { "__getitem", _wrap_Int8List___getitem},
    { "__setitem", _wrap_Int8List___setitem},
    { "insert_vector", _wrap_Int8List_insert_vector},
    { "insert_at", _wrap_Int8List_insert_at},
    { "remove_at", _wrap_Int8List_remove_at},
    { "push_back", _wrap_Int8List_push_back},
    { "push_front", _wrap_Int8List_push_front},
    { "pop_back", _wrap_Int8List_pop_back},
    { "pop_front", _wrap_Int8List_pop_front},
    { "empty", _wrap_Int8List_empty},
    { "max_size", _wrap_Int8List_max_size},
    { "unique", _wrap_Int8List_unique},
    { "front", _wrap_Int8List_front},
    { "back", _wrap_Int8List_back},
    { "resize", _wrap_Int8List_resize},
    { "clear", _wrap_Int8List_clear},
    { "reverse", _wrap_Int8List_reverse},
    { "size", _wrap_Int8List_size},
    { "swap", _wrap_Int8List_swap},
    {0,0}
};
static swig_lua_method swig_Int8List_meta[] = {
    { "__getitem", _wrap_Int8List___getitem},
    { "__setitem", _wrap_Int8List___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int8List_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8List_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8List_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8List_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8List_Sf_SwigStatic = {
    "Int8List",
    swig_Int8List_Sf_SwigStatic_methods,
    swig_Int8List_Sf_SwigStatic_attributes,
    swig_Int8List_Sf_SwigStatic_constants,
    swig_Int8List_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8List_bases[] = {0};
static const char *swig_Int8List_base_names[] = {0};
static swig_lua_class _wrap_class_Int8List = { "Int8List", "Int8List", &SWIGTYPE_p_ListT_signed_char_t,_proxy__wrap_new_Int8List, swig_delete_Int8List, swig_Int8List_methods, swig_Int8List_attributes, &swig_Int8List_Sf_SwigStatic, swig_Int8List_meta, swig_Int8List_bases, swig_Int8List_base_names };

static int _wrap_UInt8list_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  std::list< unsigned char > arg2 ;
  std::list< unsigned char > *argp2 ;
  
  SWIG_check_num_args("List< uint8_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::l",1,"List< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< uint8_t >::l",2,"std::list< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_l_set",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_l_set",2,SWIGTYPE_p_std__listT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  std::list< unsigned char > result;
  
  SWIG_check_num_args("List< uint8_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::l",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_l_get",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned char > * resultptr = new std::list< unsigned char >((const std::list< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8list__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("List< uint8_t >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< uint8_t >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< uint8_t > *)new List< uint8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8list__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("List< uint8_t >::List",0,0)
  result = (List< uint8_t > *)new List< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8list(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8list__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8list__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8list'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< uint8_t >::List(size_t)\n"
    "    List< uint8_t >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8list___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("List< uint8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::__getitem",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list___getitem",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("List< uint8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::__setitem",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< uint8_t >::__setitem",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list___setitem",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned char > *arg3 = 0 ;
  
  SWIG_check_num_args("List< uint8_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::insert_vector",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< uint8_t >::insert_vector",3,"Array< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_insert_vector",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("List< uint8_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::insert_at",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< uint8_t >::insert_at",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_insert_at",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("List< uint8_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::remove_at",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_remove_at",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("List< uint8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::push_back",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::push_back",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_push_back",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("List< uint8_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::push_front",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::push_front",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_push_front",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  
  SWIG_check_num_args("List< uint8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::pop_back",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_pop_back",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  
  SWIG_check_num_args("List< uint8_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::pop_front",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_pop_front",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::empty",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_empty",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< uint8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::max_size",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_max_size",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  
  SWIG_check_num_args("List< uint8_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::unique",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_unique",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("List< uint8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::front",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_front",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("List< uint8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::back",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_back",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< uint8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::resize",1,"List< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_resize",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  
  SWIG_check_num_args("List< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::clear",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_clear",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  
  SWIG_check_num_args("List< uint8_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::reverse",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_reverse",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_size(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::size",1,"List< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_size",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8list_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< uint8_t > *arg1 = (List< uint8_t > *) 0 ;
  List< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("List< uint8_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint8_t >::swap",1,"List< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< uint8_t >::swap",2,"List< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_swap",1,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8list_swap",2,SWIGTYPE_p_ListT_unsigned_char_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8list(void *obj) {
List< uint8_t > *arg1 = (List< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8list(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8list);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8list_attributes[] = {
    { "l", _wrap_UInt8list_l_get, _wrap_UInt8list_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8list_methods[]= {
    { "__getitem", _wrap_UInt8list___getitem},
    { "__setitem", _wrap_UInt8list___setitem},
    { "insert_vector", _wrap_UInt8list_insert_vector},
    { "insert_at", _wrap_UInt8list_insert_at},
    { "remove_at", _wrap_UInt8list_remove_at},
    { "push_back", _wrap_UInt8list_push_back},
    { "push_front", _wrap_UInt8list_push_front},
    { "pop_back", _wrap_UInt8list_pop_back},
    { "pop_front", _wrap_UInt8list_pop_front},
    { "empty", _wrap_UInt8list_empty},
    { "max_size", _wrap_UInt8list_max_size},
    { "unique", _wrap_UInt8list_unique},
    { "front", _wrap_UInt8list_front},
    { "back", _wrap_UInt8list_back},
    { "resize", _wrap_UInt8list_resize},
    { "clear", _wrap_UInt8list_clear},
    { "reverse", _wrap_UInt8list_reverse},
    { "size", _wrap_UInt8list_size},
    { "swap", _wrap_UInt8list_swap},
    {0,0}
};
static swig_lua_method swig_UInt8list_meta[] = {
    { "__getitem", _wrap_UInt8list___getitem},
    { "__setitem", _wrap_UInt8list___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt8list_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8list_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8list_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8list_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8list_Sf_SwigStatic = {
    "UInt8list",
    swig_UInt8list_Sf_SwigStatic_methods,
    swig_UInt8list_Sf_SwigStatic_attributes,
    swig_UInt8list_Sf_SwigStatic_constants,
    swig_UInt8list_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8list_bases[] = {0};
static const char *swig_UInt8list_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8list = { "UInt8list", "UInt8list", &SWIGTYPE_p_ListT_unsigned_char_t,_proxy__wrap_new_UInt8list, swig_delete_UInt8list, swig_UInt8list_methods, swig_UInt8list_attributes, &swig_UInt8list_Sf_SwigStatic, swig_UInt8list_meta, swig_UInt8list_bases, swig_UInt8list_base_names };

static int _wrap_Int16List_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  std::list< short > arg2 ;
  std::list< short > *argp2 ;
  
  SWIG_check_num_args("List< int16_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::l",1,"List< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< int16_t >::l",2,"std::list< short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_l_set",1,SWIGTYPE_p_ListT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_short_t,0))){
    SWIG_fail_ptr("Int16List_l_set",2,SWIGTYPE_p_std__listT_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  std::list< short > result;
  
  SWIG_check_num_args("List< int16_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::l",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_l_get",1,SWIGTYPE_p_ListT_short_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< short > * resultptr = new std::list< short >((const std::list< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16List__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< int16_t > *result = 0 ;
  
  SWIG_check_num_args("List< int16_t >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< int16_t >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< int16_t > *)new List< int16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16List__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *result = 0 ;
  
  SWIG_check_num_args("List< int16_t >::List",0,0)
  result = (List< int16_t > *)new List< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16List(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16List__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16List__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16List'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< int16_t >::List(size_t)\n"
    "    List< int16_t >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_Int16List___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("List< int16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::__getitem",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List___getitem",1,SWIGTYPE_p_ListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("List< int16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::__setitem",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< int16_t >::__setitem",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List___setitem",1,SWIGTYPE_p_ListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t arg2 ;
  Array< short > *arg3 = 0 ;
  
  SWIG_check_num_args("List< int16_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::insert_vector",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< int16_t >::insert_vector",3,"Array< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_insert_vector",1,SWIGTYPE_p_ListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16List_insert_vector",3,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("List< int16_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::insert_at",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< int16_t >::insert_at",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_insert_at",1,SWIGTYPE_p_ListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("List< int16_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::remove_at",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_remove_at",1,SWIGTYPE_p_ListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("List< int16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::push_back",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::push_back",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_push_back",1,SWIGTYPE_p_ListT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("List< int16_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::push_front",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::push_front",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_push_front",1,SWIGTYPE_p_ListT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  
  SWIG_check_num_args("List< int16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::pop_back",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_pop_back",1,SWIGTYPE_p_ListT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  
  SWIG_check_num_args("List< int16_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::pop_front",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_pop_front",1,SWIGTYPE_p_ListT_short_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::empty",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_empty",1,SWIGTYPE_p_ListT_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< int16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::max_size",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_max_size",1,SWIGTYPE_p_ListT_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  
  SWIG_check_num_args("List< int16_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::unique",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_unique",1,SWIGTYPE_p_ListT_short_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("List< int16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::front",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_front",1,SWIGTYPE_p_ListT_short_t);
  }
  
  result = (short)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("List< int16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::back",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_back",1,SWIGTYPE_p_ListT_short_t);
  }
  
  result = (short)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< int16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::resize",1,"List< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_resize",1,SWIGTYPE_p_ListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  
  SWIG_check_num_args("List< int16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::clear",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_clear",1,SWIGTYPE_p_ListT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  
  SWIG_check_num_args("List< int16_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::reverse",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_reverse",1,SWIGTYPE_p_ListT_short_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_size(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::size",1,"List< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_size",1,SWIGTYPE_p_ListT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16List_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< int16_t > *arg1 = (List< int16_t > *) 0 ;
  List< short > *arg2 = 0 ;
  
  SWIG_check_num_args("List< int16_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int16_t >::swap",1,"List< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< int16_t >::swap",2,"List< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_swap",1,SWIGTYPE_p_ListT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_short_t,0))){
    SWIG_fail_ptr("Int16List_swap",2,SWIGTYPE_p_ListT_short_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16List(void *obj) {
List< int16_t > *arg1 = (List< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16List(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16List);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16List_attributes[] = {
    { "l", _wrap_Int16List_l_get, _wrap_Int16List_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int16List_methods[]= {
    { "__getitem", _wrap_Int16List___getitem},
    { "__setitem", _wrap_Int16List___setitem},
    { "insert_vector", _wrap_Int16List_insert_vector},
    { "insert_at", _wrap_Int16List_insert_at},
    { "remove_at", _wrap_Int16List_remove_at},
    { "push_back", _wrap_Int16List_push_back},
    { "push_front", _wrap_Int16List_push_front},
    { "pop_back", _wrap_Int16List_pop_back},
    { "pop_front", _wrap_Int16List_pop_front},
    { "empty", _wrap_Int16List_empty},
    { "max_size", _wrap_Int16List_max_size},
    { "unique", _wrap_Int16List_unique},
    { "front", _wrap_Int16List_front},
    { "back", _wrap_Int16List_back},
    { "resize", _wrap_Int16List_resize},
    { "clear", _wrap_Int16List_clear},
    { "reverse", _wrap_Int16List_reverse},
    { "size", _wrap_Int16List_size},
    { "swap", _wrap_Int16List_swap},
    {0,0}
};
static swig_lua_method swig_Int16List_meta[] = {
    { "__getitem", _wrap_Int16List___getitem},
    { "__setitem", _wrap_Int16List___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int16List_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16List_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16List_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16List_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16List_Sf_SwigStatic = {
    "Int16List",
    swig_Int16List_Sf_SwigStatic_methods,
    swig_Int16List_Sf_SwigStatic_attributes,
    swig_Int16List_Sf_SwigStatic_constants,
    swig_Int16List_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16List_bases[] = {0};
static const char *swig_Int16List_base_names[] = {0};
static swig_lua_class _wrap_class_Int16List = { "Int16List", "Int16List", &SWIGTYPE_p_ListT_short_t,_proxy__wrap_new_Int16List, swig_delete_Int16List, swig_Int16List_methods, swig_Int16List_attributes, &swig_Int16List_Sf_SwigStatic, swig_Int16List_meta, swig_Int16List_bases, swig_Int16List_base_names };

static int _wrap_UInt16list_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  std::list< unsigned short > arg2 ;
  std::list< unsigned short > *argp2 ;
  
  SWIG_check_num_args("List< uint16_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::l",1,"List< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< uint16_t >::l",2,"std::list< unsigned short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_l_set",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_l_set",2,SWIGTYPE_p_std__listT_unsigned_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  std::list< unsigned short > result;
  
  SWIG_check_num_args("List< uint16_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::l",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_l_get",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned short > * resultptr = new std::list< unsigned short >((const std::list< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16list__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("List< uint16_t >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< uint16_t >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< uint16_t > *)new List< uint16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16list__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("List< uint16_t >::List",0,0)
  result = (List< uint16_t > *)new List< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16list(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16list__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16list__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16list'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< uint16_t >::List(size_t)\n"
    "    List< uint16_t >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16list___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("List< uint16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::__getitem",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list___getitem",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("List< uint16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::__setitem",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< uint16_t >::__setitem",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list___setitem",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned short > *arg3 = 0 ;
  
  SWIG_check_num_args("List< uint16_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::insert_vector",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< uint16_t >::insert_vector",3,"Array< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_insert_vector",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("List< uint16_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::insert_at",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< uint16_t >::insert_at",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_insert_at",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("List< uint16_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::remove_at",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_remove_at",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("List< uint16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::push_back",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::push_back",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_push_back",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("List< uint16_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::push_front",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::push_front",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_push_front",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  
  SWIG_check_num_args("List< uint16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::pop_back",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_pop_back",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  
  SWIG_check_num_args("List< uint16_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::pop_front",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_pop_front",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::empty",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_empty",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< uint16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::max_size",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_max_size",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  
  SWIG_check_num_args("List< uint16_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::unique",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_unique",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("List< uint16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::front",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_front",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("List< uint16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::back",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_back",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< uint16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::resize",1,"List< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_resize",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  
  SWIG_check_num_args("List< uint16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::clear",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_clear",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  
  SWIG_check_num_args("List< uint16_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::reverse",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_reverse",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_size(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::size",1,"List< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_size",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16list_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< uint16_t > *arg1 = (List< uint16_t > *) 0 ;
  List< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("List< uint16_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint16_t >::swap",1,"List< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< uint16_t >::swap",2,"List< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_swap",1,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16list_swap",2,SWIGTYPE_p_ListT_unsigned_short_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16list(void *obj) {
List< uint16_t > *arg1 = (List< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16list(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16list);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16list_attributes[] = {
    { "l", _wrap_UInt16list_l_get, _wrap_UInt16list_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16list_methods[]= {
    { "__getitem", _wrap_UInt16list___getitem},
    { "__setitem", _wrap_UInt16list___setitem},
    { "insert_vector", _wrap_UInt16list_insert_vector},
    { "insert_at", _wrap_UInt16list_insert_at},
    { "remove_at", _wrap_UInt16list_remove_at},
    { "push_back", _wrap_UInt16list_push_back},
    { "push_front", _wrap_UInt16list_push_front},
    { "pop_back", _wrap_UInt16list_pop_back},
    { "pop_front", _wrap_UInt16list_pop_front},
    { "empty", _wrap_UInt16list_empty},
    { "max_size", _wrap_UInt16list_max_size},
    { "unique", _wrap_UInt16list_unique},
    { "front", _wrap_UInt16list_front},
    { "back", _wrap_UInt16list_back},
    { "resize", _wrap_UInt16list_resize},
    { "clear", _wrap_UInt16list_clear},
    { "reverse", _wrap_UInt16list_reverse},
    { "size", _wrap_UInt16list_size},
    { "swap", _wrap_UInt16list_swap},
    {0,0}
};
static swig_lua_method swig_UInt16list_meta[] = {
    { "__getitem", _wrap_UInt16list___getitem},
    { "__setitem", _wrap_UInt16list___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt16list_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16list_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16list_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16list_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16list_Sf_SwigStatic = {
    "UInt16list",
    swig_UInt16list_Sf_SwigStatic_methods,
    swig_UInt16list_Sf_SwigStatic_attributes,
    swig_UInt16list_Sf_SwigStatic_constants,
    swig_UInt16list_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16list_bases[] = {0};
static const char *swig_UInt16list_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16list = { "UInt16list", "UInt16list", &SWIGTYPE_p_ListT_unsigned_short_t,_proxy__wrap_new_UInt16list, swig_delete_UInt16list, swig_UInt16list_methods, swig_UInt16list_attributes, &swig_UInt16list_Sf_SwigStatic, swig_UInt16list_meta, swig_UInt16list_bases, swig_UInt16list_base_names };

static int _wrap_Int32List_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  std::list< int > arg2 ;
  std::list< int > *argp2 ;
  
  SWIG_check_num_args("List< int32_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::l",1,"List< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< int32_t >::l",2,"std::list< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_l_set",1,SWIGTYPE_p_ListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_int_t,0))){
    SWIG_fail_ptr("Int32List_l_set",2,SWIGTYPE_p_std__listT_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  std::list< int > result;
  
  SWIG_check_num_args("List< int32_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::l",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_l_get",1,SWIGTYPE_p_ListT_int_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< int > * resultptr = new std::list< int >((const std::list< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32List__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< int32_t > *result = 0 ;
  
  SWIG_check_num_args("List< int32_t >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< int32_t >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< int32_t > *)new List< int32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32List__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *result = 0 ;
  
  SWIG_check_num_args("List< int32_t >::List",0,0)
  result = (List< int32_t > *)new List< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32List(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32List__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32List__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32List'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< int32_t >::List(size_t)\n"
    "    List< int32_t >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_Int32List___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("List< int32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::__getitem",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List___getitem",1,SWIGTYPE_p_ListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("List< int32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::__setitem",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< int32_t >::__setitem",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List___setitem",1,SWIGTYPE_p_ListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t arg2 ;
  Array< int > *arg3 = 0 ;
  
  SWIG_check_num_args("List< int32_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::insert_vector",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< int32_t >::insert_vector",3,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_insert_vector",1,SWIGTYPE_p_ListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32List_insert_vector",3,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("List< int32_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::insert_at",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< int32_t >::insert_at",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_insert_at",1,SWIGTYPE_p_ListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("List< int32_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::remove_at",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_remove_at",1,SWIGTYPE_p_ListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("List< int32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::push_back",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::push_back",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_push_back",1,SWIGTYPE_p_ListT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("List< int32_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::push_front",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::push_front",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_push_front",1,SWIGTYPE_p_ListT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  
  SWIG_check_num_args("List< int32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::pop_back",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_pop_back",1,SWIGTYPE_p_ListT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  
  SWIG_check_num_args("List< int32_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::pop_front",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_pop_front",1,SWIGTYPE_p_ListT_int_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::empty",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_empty",1,SWIGTYPE_p_ListT_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< int32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::max_size",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_max_size",1,SWIGTYPE_p_ListT_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  
  SWIG_check_num_args("List< int32_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::unique",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_unique",1,SWIGTYPE_p_ListT_int_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_front(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("List< int32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::front",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_front",1,SWIGTYPE_p_ListT_int_t);
  }
  
  result = (int)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_back(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("List< int32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::back",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_back",1,SWIGTYPE_p_ListT_int_t);
  }
  
  result = (int)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< int32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::resize",1,"List< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< int32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_resize",1,SWIGTYPE_p_ListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  
  SWIG_check_num_args("List< int32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::clear",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_clear",1,SWIGTYPE_p_ListT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  
  SWIG_check_num_args("List< int32_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::reverse",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_reverse",1,SWIGTYPE_p_ListT_int_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_size(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::size",1,"List< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_size",1,SWIGTYPE_p_ListT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32List_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< int32_t > *arg1 = (List< int32_t > *) 0 ;
  List< int > *arg2 = 0 ;
  
  SWIG_check_num_args("List< int32_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< int32_t >::swap",1,"List< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< int32_t >::swap",2,"List< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_swap",1,SWIGTYPE_p_ListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_int_t,0))){
    SWIG_fail_ptr("Int32List_swap",2,SWIGTYPE_p_ListT_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32List(void *obj) {
List< int32_t > *arg1 = (List< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32List(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32List);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32List_attributes[] = {
    { "l", _wrap_Int32List_l_get, _wrap_Int32List_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int32List_methods[]= {
    { "__getitem", _wrap_Int32List___getitem},
    { "__setitem", _wrap_Int32List___setitem},
    { "insert_vector", _wrap_Int32List_insert_vector},
    { "insert_at", _wrap_Int32List_insert_at},
    { "remove_at", _wrap_Int32List_remove_at},
    { "push_back", _wrap_Int32List_push_back},
    { "push_front", _wrap_Int32List_push_front},
    { "pop_back", _wrap_Int32List_pop_back},
    { "pop_front", _wrap_Int32List_pop_front},
    { "empty", _wrap_Int32List_empty},
    { "max_size", _wrap_Int32List_max_size},
    { "unique", _wrap_Int32List_unique},
    { "front", _wrap_Int32List_front},
    { "back", _wrap_Int32List_back},
    { "resize", _wrap_Int32List_resize},
    { "clear", _wrap_Int32List_clear},
    { "reverse", _wrap_Int32List_reverse},
    { "size", _wrap_Int32List_size},
    { "swap", _wrap_Int32List_swap},
    {0,0}
};
static swig_lua_method swig_Int32List_meta[] = {
    { "__getitem", _wrap_Int32List___getitem},
    { "__setitem", _wrap_Int32List___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int32List_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32List_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32List_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32List_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32List_Sf_SwigStatic = {
    "Int32List",
    swig_Int32List_Sf_SwigStatic_methods,
    swig_Int32List_Sf_SwigStatic_attributes,
    swig_Int32List_Sf_SwigStatic_constants,
    swig_Int32List_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32List_bases[] = {0};
static const char *swig_Int32List_base_names[] = {0};
static swig_lua_class _wrap_class_Int32List = { "Int32List", "Int32List", &SWIGTYPE_p_ListT_int_t,_proxy__wrap_new_Int32List, swig_delete_Int32List, swig_Int32List_methods, swig_Int32List_attributes, &swig_Int32List_Sf_SwigStatic, swig_Int32List_meta, swig_Int32List_bases, swig_Int32List_base_names };

static int _wrap_UInt32List_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  std::list< unsigned int > arg2 ;
  std::list< unsigned int > *argp2 ;
  
  SWIG_check_num_args("List< uint32_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::l",1,"List< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< uint32_t >::l",2,"std::list< unsigned int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_l_set",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_l_set",2,SWIGTYPE_p_std__listT_unsigned_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  std::list< unsigned int > result;
  
  SWIG_check_num_args("List< uint32_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::l",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_l_get",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned int > * resultptr = new std::list< unsigned int >((const std::list< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32List__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("List< uint32_t >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< uint32_t >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< uint32_t > *)new List< uint32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32List__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("List< uint32_t >::List",0,0)
  result = (List< uint32_t > *)new List< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32List(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32List__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32List__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32List'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< uint32_t >::List(size_t)\n"
    "    List< uint32_t >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32List___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("List< uint32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::__getitem",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List___getitem",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("List< uint32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::__setitem",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< uint32_t >::__setitem",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List___setitem",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("List< uint32_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::insert_vector",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< uint32_t >::insert_vector",3,"Array< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_insert_vector",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("List< uint32_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::insert_at",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< uint32_t >::insert_at",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_insert_at",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("List< uint32_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::remove_at",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_remove_at",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("List< uint32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::push_back",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::push_back",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_push_back",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("List< uint32_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::push_front",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::push_front",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_push_front",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  
  SWIG_check_num_args("List< uint32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::pop_back",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_pop_back",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  
  SWIG_check_num_args("List< uint32_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::pop_front",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_pop_front",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::empty",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_empty",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< uint32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::max_size",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_max_size",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  
  SWIG_check_num_args("List< uint32_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::unique",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_unique",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_front(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("List< uint32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::front",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_front",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_back(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("List< uint32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::back",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_back",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< uint32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::resize",1,"List< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< uint32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_resize",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  
  SWIG_check_num_args("List< uint32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::clear",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_clear",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  
  SWIG_check_num_args("List< uint32_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::reverse",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_reverse",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_size(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::size",1,"List< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_size",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32List_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< uint32_t > *arg1 = (List< uint32_t > *) 0 ;
  List< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("List< uint32_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< uint32_t >::swap",1,"List< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< uint32_t >::swap",2,"List< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_swap",1,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32List_swap",2,SWIGTYPE_p_ListT_unsigned_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32List(void *obj) {
List< uint32_t > *arg1 = (List< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32List(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32List);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32List_attributes[] = {
    { "l", _wrap_UInt32List_l_get, _wrap_UInt32List_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32List_methods[]= {
    { "__getitem", _wrap_UInt32List___getitem},
    { "__setitem", _wrap_UInt32List___setitem},
    { "insert_vector", _wrap_UInt32List_insert_vector},
    { "insert_at", _wrap_UInt32List_insert_at},
    { "remove_at", _wrap_UInt32List_remove_at},
    { "push_back", _wrap_UInt32List_push_back},
    { "push_front", _wrap_UInt32List_push_front},
    { "pop_back", _wrap_UInt32List_pop_back},
    { "pop_front", _wrap_UInt32List_pop_front},
    { "empty", _wrap_UInt32List_empty},
    { "max_size", _wrap_UInt32List_max_size},
    { "unique", _wrap_UInt32List_unique},
    { "front", _wrap_UInt32List_front},
    { "back", _wrap_UInt32List_back},
    { "resize", _wrap_UInt32List_resize},
    { "clear", _wrap_UInt32List_clear},
    { "reverse", _wrap_UInt32List_reverse},
    { "size", _wrap_UInt32List_size},
    { "swap", _wrap_UInt32List_swap},
    {0,0}
};
static swig_lua_method swig_UInt32List_meta[] = {
    { "__getitem", _wrap_UInt32List___getitem},
    { "__setitem", _wrap_UInt32List___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt32List_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32List_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32List_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32List_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32List_Sf_SwigStatic = {
    "UInt32List",
    swig_UInt32List_Sf_SwigStatic_methods,
    swig_UInt32List_Sf_SwigStatic_attributes,
    swig_UInt32List_Sf_SwigStatic_constants,
    swig_UInt32List_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32List_bases[] = {0};
static const char *swig_UInt32List_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32List = { "UInt32List", "UInt32List", &SWIGTYPE_p_ListT_unsigned_int_t,_proxy__wrap_new_UInt32List, swig_delete_UInt32List, swig_UInt32List_methods, swig_UInt32List_attributes, &swig_UInt32List_Sf_SwigStatic, swig_UInt32List_meta, swig_UInt32List_bases, swig_UInt32List_base_names };

static int _wrap_Int64List_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  std::list< long long > arg2 ;
  std::list< long long > *argp2 ;
  
  SWIG_check_num_args("List< long long >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::l",1,"List< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< long long >::l",2,"std::list< long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_l_set",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_l_set",2,SWIGTYPE_p_std__listT_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  std::list< long long > result;
  
  SWIG_check_num_args("List< long long >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::l",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_l_get",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< long long > * resultptr = new std::list< long long >((const std::list< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64List__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< long long > *result = 0 ;
  
  SWIG_check_num_args("List< long long >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< long long >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< long long > *)new List< long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64List__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *result = 0 ;
  
  SWIG_check_num_args("List< long long >::List",0,0)
  result = (List< long long > *)new List< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64List(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64List__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int64List__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64List'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< long long >::List(size_t)\n"
    "    List< long long >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_Int64List___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("List< long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::__getitem",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List___getitem",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("List< long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::__setitem",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< long long >::__setitem",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List___setitem",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t arg2 ;
  Array< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("List< long long >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::insert_vector",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< long long >::insert_vector",3,"Array< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_insert_vector",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_insert_vector",3,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("List< long long >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::insert_at",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< long long >::insert_at",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_insert_at",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("List< long long >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::remove_at",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_remove_at",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("List< long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::push_back",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::push_back",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_push_back",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("List< long long >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::push_front",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::push_front",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_push_front",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  
  SWIG_check_num_args("List< long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::pop_back",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_pop_back",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  
  SWIG_check_num_args("List< long long >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::pop_front",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_pop_front",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::empty",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_empty",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::max_size",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_max_size",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  
  SWIG_check_num_args("List< long long >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::unique",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_unique",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_front(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("List< long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::front",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_front",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  result = (long long)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_back(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("List< long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::back",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_back",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  result = (long long)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::resize",1,"List< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_resize",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  
  SWIG_check_num_args("List< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::clear",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_clear",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  
  SWIG_check_num_args("List< long long >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::reverse",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_reverse",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_size(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::size",1,"List< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_size",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64List_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< long long > *arg1 = (List< long long > *) 0 ;
  List< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("List< long long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< long long >::swap",1,"List< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< long long >::swap",2,"List< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_swap",1,SWIGTYPE_p_ListT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_long_long_t,0))){
    SWIG_fail_ptr("Int64List_swap",2,SWIGTYPE_p_ListT_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64List(void *obj) {
List< long long > *arg1 = (List< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64List(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64List);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64List_attributes[] = {
    { "l", _wrap_Int64List_l_get, _wrap_Int64List_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int64List_methods[]= {
    { "__getitem", _wrap_Int64List___getitem},
    { "__setitem", _wrap_Int64List___setitem},
    { "insert_vector", _wrap_Int64List_insert_vector},
    { "insert_at", _wrap_Int64List_insert_at},
    { "remove_at", _wrap_Int64List_remove_at},
    { "push_back", _wrap_Int64List_push_back},
    { "push_front", _wrap_Int64List_push_front},
    { "pop_back", _wrap_Int64List_pop_back},
    { "pop_front", _wrap_Int64List_pop_front},
    { "empty", _wrap_Int64List_empty},
    { "max_size", _wrap_Int64List_max_size},
    { "unique", _wrap_Int64List_unique},
    { "front", _wrap_Int64List_front},
    { "back", _wrap_Int64List_back},
    { "resize", _wrap_Int64List_resize},
    { "clear", _wrap_Int64List_clear},
    { "reverse", _wrap_Int64List_reverse},
    { "size", _wrap_Int64List_size},
    { "swap", _wrap_Int64List_swap},
    {0,0}
};
static swig_lua_method swig_Int64List_meta[] = {
    { "__getitem", _wrap_Int64List___getitem},
    { "__setitem", _wrap_Int64List___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int64List_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64List_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64List_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64List_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64List_Sf_SwigStatic = {
    "Int64List",
    swig_Int64List_Sf_SwigStatic_methods,
    swig_Int64List_Sf_SwigStatic_attributes,
    swig_Int64List_Sf_SwigStatic_constants,
    swig_Int64List_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64List_bases[] = {0};
static const char *swig_Int64List_base_names[] = {0};
static swig_lua_class _wrap_class_Int64List = { "Int64List", "Int64List", &SWIGTYPE_p_ListT_long_long_t,_proxy__wrap_new_Int64List, swig_delete_Int64List, swig_Int64List_methods, swig_Int64List_attributes, &swig_Int64List_Sf_SwigStatic, swig_Int64List_meta, swig_Int64List_bases, swig_Int64List_base_names };

static int _wrap_UInt64List_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  std::list< unsigned long long > arg2 ;
  std::list< unsigned long long > *argp2 ;
  
  SWIG_check_num_args("List< unsigned long long >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::l",1,"List< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< unsigned long long >::l",2,"std::list< unsigned long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_l_set",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_l_set",2,SWIGTYPE_p_std__listT_unsigned_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  std::list< unsigned long long > result;
  
  SWIG_check_num_args("List< unsigned long long >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::l",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_l_get",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned long long > * resultptr = new std::list< unsigned long long >((const std::list< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64List__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< unsigned long long >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< unsigned long long > *)new List< unsigned long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64List__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::List",0,0)
  result = (List< unsigned long long > *)new List< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64List(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64List__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt64List__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64List'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< unsigned long long >::List(size_t)\n"
    "    List< unsigned long long >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64List___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("List< unsigned long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::__getitem",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List___getitem",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("List< unsigned long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::__setitem",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< unsigned long long >::__setitem",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List___setitem",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t arg2 ;
  Array< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::insert_vector",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< unsigned long long >::insert_vector",3,"Array< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_insert_vector",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("List< unsigned long long >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::insert_at",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("List< unsigned long long >::insert_at",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_insert_at",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("List< unsigned long long >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::remove_at",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_remove_at",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("List< unsigned long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::push_back",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::push_back",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_push_back",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("List< unsigned long long >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::push_front",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::push_front",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_push_front",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::pop_back",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_pop_back",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::pop_front",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_pop_front",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::empty",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_empty",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< unsigned long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::max_size",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_max_size",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::unique",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_unique",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_front(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("List< unsigned long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::front",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_front",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_back(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("List< unsigned long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::back",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_back",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< unsigned long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::resize",1,"List< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< unsigned long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_resize",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::clear",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_clear",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::reverse",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_reverse",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_size(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::size",1,"List< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_size",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64List_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< unsigned long long > *arg1 = (List< unsigned long long > *) 0 ;
  List< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("List< unsigned long long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< unsigned long long >::swap",1,"List< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< unsigned long long >::swap",2,"List< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_swap",1,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64List_swap",2,SWIGTYPE_p_ListT_unsigned_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64List(void *obj) {
List< unsigned long long > *arg1 = (List< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64List(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64List);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64List_attributes[] = {
    { "l", _wrap_UInt64List_l_get, _wrap_UInt64List_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64List_methods[]= {
    { "__getitem", _wrap_UInt64List___getitem},
    { "__setitem", _wrap_UInt64List___setitem},
    { "insert_vector", _wrap_UInt64List_insert_vector},
    { "insert_at", _wrap_UInt64List_insert_at},
    { "remove_at", _wrap_UInt64List_remove_at},
    { "push_back", _wrap_UInt64List_push_back},
    { "push_front", _wrap_UInt64List_push_front},
    { "pop_back", _wrap_UInt64List_pop_back},
    { "pop_front", _wrap_UInt64List_pop_front},
    { "empty", _wrap_UInt64List_empty},
    { "max_size", _wrap_UInt64List_max_size},
    { "unique", _wrap_UInt64List_unique},
    { "front", _wrap_UInt64List_front},
    { "back", _wrap_UInt64List_back},
    { "resize", _wrap_UInt64List_resize},
    { "clear", _wrap_UInt64List_clear},
    { "reverse", _wrap_UInt64List_reverse},
    { "size", _wrap_UInt64List_size},
    { "swap", _wrap_UInt64List_swap},
    {0,0}
};
static swig_lua_method swig_UInt64List_meta[] = {
    { "__getitem", _wrap_UInt64List___getitem},
    { "__setitem", _wrap_UInt64List___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt64List_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64List_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64List_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64List_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64List_Sf_SwigStatic = {
    "UInt64List",
    swig_UInt64List_Sf_SwigStatic_methods,
    swig_UInt64List_Sf_SwigStatic_attributes,
    swig_UInt64List_Sf_SwigStatic_constants,
    swig_UInt64List_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64List_bases[] = {0};
static const char *swig_UInt64List_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64List = { "UInt64List", "UInt64List", &SWIGTYPE_p_ListT_unsigned_long_long_t,_proxy__wrap_new_UInt64List, swig_delete_UInt64List, swig_UInt64List_methods, swig_UInt64List_attributes, &swig_UInt64List_Sf_SwigStatic, swig_UInt64List_meta, swig_UInt64List_bases, swig_UInt64List_base_names };

static int _wrap_StringList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  std::list< string > arg2 ;
  std::list< string > *argp2 ;
  
  SWIG_check_num_args("List< string >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::l",1,"List< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< string >::l",2,"std::list< string >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_l_set",1,SWIGTYPE_p_ListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_string_t,0))){
    SWIG_fail_ptr("StringList_l_set",2,SWIGTYPE_p_std__listT_string_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  std::list< string > result;
  
  SWIG_check_num_args("List< string >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::l",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_l_get",1,SWIGTYPE_p_ListT_string_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< string > * resultptr = new std::list< string >((const std::list< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< string > *result = 0 ;
  
  SWIG_check_num_args("List< string >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< string >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< string > *)new List< string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *result = 0 ;
  
  SWIG_check_num_args("List< string >::List",0,0)
  result = (List< string > *)new List< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StringList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< string >::List(size_t)\n"
    "    List< string >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_StringList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t arg2 ;
  string result;
  
  SWIG_check_num_args("List< string >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::__getitem",1,"List< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< string >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList___getitem",1,SWIGTYPE_p_ListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("List< string >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::__setitem",1,"List< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< string >::__setitem",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< string >::__setitem",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList___setitem",1,SWIGTYPE_p_ListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringList___setitem",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t arg2 ;
  Array< string > *arg3 = 0 ;
  
  SWIG_check_num_args("List< string >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::insert_vector",1,"List< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< string >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< string >::insert_vector",3,"Array< string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_insert_vector",1,SWIGTYPE_p_ListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringList_insert_vector",3,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< string > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("List< string >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::insert_at",1,"List< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< string >::insert_at",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< string >::insert_at",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_insert_at",1,SWIGTYPE_p_ListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringList_insert_at",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t arg2 ;
  string result;
  
  SWIG_check_num_args("List< string >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::remove_at",1,"List< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< string >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_remove_at",1,SWIGTYPE_p_ListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->remove_at(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("List< string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::push_back",1,"List< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< string >::push_back",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_push_back",1,SWIGTYPE_p_ListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringList_push_back",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("List< string >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::push_front",1,"List< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< string >::push_front",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_push_front",1,SWIGTYPE_p_ListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringList_push_front",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  
  SWIG_check_num_args("List< string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::pop_back",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_pop_back",1,SWIGTYPE_p_ListT_string_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  
  SWIG_check_num_args("List< string >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::pop_front",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_pop_front",1,SWIGTYPE_p_ListT_string_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::empty",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_empty",1,SWIGTYPE_p_ListT_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::max_size",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_max_size",1,SWIGTYPE_p_ListT_string_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  
  SWIG_check_num_args("List< string >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::unique",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_unique",1,SWIGTYPE_p_ListT_string_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_front(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("List< string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::front",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_front",1,SWIGTYPE_p_ListT_string_t);
  }
  
  result = (arg1)->front();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_back(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("List< string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::back",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_back",1,SWIGTYPE_p_ListT_string_t);
  }
  
  result = (arg1)->back();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< string >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::resize",1,"List< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< string >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_resize",1,SWIGTYPE_p_ListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  
  SWIG_check_num_args("List< string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::clear",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_clear",1,SWIGTYPE_p_ListT_string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  
  SWIG_check_num_args("List< string >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::reverse",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_reverse",1,SWIGTYPE_p_ListT_string_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_size(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::size",1,"List< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_size",1,SWIGTYPE_p_ListT_string_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringList_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< string > *arg1 = (List< string > *) 0 ;
  List< string > *arg2 = 0 ;
  
  SWIG_check_num_args("List< string >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< string >::swap",1,"List< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< string >::swap",2,"List< string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_swap",1,SWIGTYPE_p_ListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_string_t,0))){
    SWIG_fail_ptr("StringList_swap",2,SWIGTYPE_p_ListT_string_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringList(void *obj) {
List< string > *arg1 = (List< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringList_attributes[] = {
    { "l", _wrap_StringList_l_get, _wrap_StringList_l_set },
    {0,0,0}
};
static swig_lua_method swig_StringList_methods[]= {
    { "__getitem", _wrap_StringList___getitem},
    { "__setitem", _wrap_StringList___setitem},
    { "insert_vector", _wrap_StringList_insert_vector},
    { "insert_at", _wrap_StringList_insert_at},
    { "remove_at", _wrap_StringList_remove_at},
    { "push_back", _wrap_StringList_push_back},
    { "push_front", _wrap_StringList_push_front},
    { "pop_back", _wrap_StringList_pop_back},
    { "pop_front", _wrap_StringList_pop_front},
    { "empty", _wrap_StringList_empty},
    { "max_size", _wrap_StringList_max_size},
    { "unique", _wrap_StringList_unique},
    { "front", _wrap_StringList_front},
    { "back", _wrap_StringList_back},
    { "resize", _wrap_StringList_resize},
    { "clear", _wrap_StringList_clear},
    { "reverse", _wrap_StringList_reverse},
    { "size", _wrap_StringList_size},
    { "swap", _wrap_StringList_swap},
    {0,0}
};
static swig_lua_method swig_StringList_meta[] = {
    { "__getitem", _wrap_StringList___getitem},
    { "__setitem", _wrap_StringList___setitem},
    {0,0}
};

static swig_lua_attribute swig_StringList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringList_Sf_SwigStatic = {
    "StringList",
    swig_StringList_Sf_SwigStatic_methods,
    swig_StringList_Sf_SwigStatic_attributes,
    swig_StringList_Sf_SwigStatic_constants,
    swig_StringList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringList_bases[] = {0};
static const char *swig_StringList_base_names[] = {0};
static swig_lua_class _wrap_class_StringList = { "StringList", "StringList", &SWIGTYPE_p_ListT_string_t,_proxy__wrap_new_StringList, swig_delete_StringList, swig_StringList_methods, swig_StringList_attributes, &swig_StringList_Sf_SwigStatic, swig_StringList_meta, swig_StringList_bases, swig_StringList_base_names };

static int _wrap_PtrList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  std::list< void * > arg2 ;
  std::list< void * > *argp2 ;
  
  SWIG_check_num_args("List< void * >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::l",1,"List< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< void * >::l",2,"std::list< void * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_l_set",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_l_set",2,SWIGTYPE_p_std__listT_void_p_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  std::list< void * > result;
  
  SWIG_check_num_args("List< void * >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::l",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_l_get",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< void * > * resultptr = new std::list< void * >((const std::list< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< void * > *result = 0 ;
  
  SWIG_check_num_args("List< void * >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< void * >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< void * > *)new List< void * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *result = 0 ;
  
  SWIG_check_num_args("List< void * >::List",0,0)
  result = (List< void * > *)new List< void * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PtrList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PtrList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PtrList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< void * >::List(size_t)\n"
    "    List< void * >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_PtrList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("List< void * >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::__getitem",1,"List< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< void * >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList___getitem",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) (void *)0 ;
  
  SWIG_check_num_args("List< void * >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::__setitem",1,"List< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< void * >::__setitem",2,"size_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("List< void * >::__setitem",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList___setitem",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrList___setitem");
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t arg2 ;
  Array< void * > *arg3 = 0 ;
  
  SWIG_check_num_args("List< void * >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::insert_vector",1,"List< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< void * >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< void * >::insert_vector",3,"Array< void * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_insert_vector",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_insert_vector",3,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< void * > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) (void *)0 ;
  
  SWIG_check_num_args("List< void * >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::insert_at",1,"List< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< void * >::insert_at",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("List< void * >::insert_at",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_insert_at",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrList_insert_at");
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("List< void * >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::remove_at",1,"List< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< void * >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_remove_at",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->remove_at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("List< void * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::push_back",1,"List< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("List< void * >::push_back",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_push_back",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrList_push_back");
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("List< void * >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::push_front",1,"List< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("List< void * >::push_front",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_push_front",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrList_push_front");
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  
  SWIG_check_num_args("List< void * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::pop_back",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_pop_back",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  
  SWIG_check_num_args("List< void * >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::pop_front",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_pop_front",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< void * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::empty",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_empty",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< void * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::max_size",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_max_size",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  
  SWIG_check_num_args("List< void * >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::unique",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_unique",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_front(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("List< void * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::front",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_front",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  result = (void *)(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_back(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("List< void * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::back",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_back",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  result = (void *)(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< void * >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::resize",1,"List< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< void * >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_resize",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  
  SWIG_check_num_args("List< void * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::clear",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_clear",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  
  SWIG_check_num_args("List< void * >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::reverse",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_reverse",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_size(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< void * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::size",1,"List< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_size",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrList_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< void * > *arg1 = (List< void * > *) 0 ;
  List< void * > *arg2 = 0 ;
  
  SWIG_check_num_args("List< void * >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< void * >::swap",1,"List< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< void * >::swap",2,"List< void * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_swap",1,SWIGTYPE_p_ListT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_void_p_t,0))){
    SWIG_fail_ptr("PtrList_swap",2,SWIGTYPE_p_ListT_void_p_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PtrList(void *obj) {
List< void * > *arg1 = (List< void * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PtrList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PtrList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PtrList_attributes[] = {
    { "l", _wrap_PtrList_l_get, _wrap_PtrList_l_set },
    {0,0,0}
};
static swig_lua_method swig_PtrList_methods[]= {
    { "__getitem", _wrap_PtrList___getitem},
    { "__setitem", _wrap_PtrList___setitem},
    { "insert_vector", _wrap_PtrList_insert_vector},
    { "insert_at", _wrap_PtrList_insert_at},
    { "remove_at", _wrap_PtrList_remove_at},
    { "push_back", _wrap_PtrList_push_back},
    { "push_front", _wrap_PtrList_push_front},
    { "pop_back", _wrap_PtrList_pop_back},
    { "pop_front", _wrap_PtrList_pop_front},
    { "empty", _wrap_PtrList_empty},
    { "max_size", _wrap_PtrList_max_size},
    { "unique", _wrap_PtrList_unique},
    { "front", _wrap_PtrList_front},
    { "back", _wrap_PtrList_back},
    { "resize", _wrap_PtrList_resize},
    { "clear", _wrap_PtrList_clear},
    { "reverse", _wrap_PtrList_reverse},
    { "size", _wrap_PtrList_size},
    { "swap", _wrap_PtrList_swap},
    {0,0}
};
static swig_lua_method swig_PtrList_meta[] = {
    { "__getitem", _wrap_PtrList___getitem},
    { "__setitem", _wrap_PtrList___setitem},
    {0,0}
};

static swig_lua_attribute swig_PtrList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PtrList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PtrList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PtrList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PtrList_Sf_SwigStatic = {
    "PtrList",
    swig_PtrList_Sf_SwigStatic_methods,
    swig_PtrList_Sf_SwigStatic_attributes,
    swig_PtrList_Sf_SwigStatic_constants,
    swig_PtrList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PtrList_bases[] = {0};
static const char *swig_PtrList_base_names[] = {0};
static swig_lua_class _wrap_class_PtrList = { "PtrList", "PtrList", &SWIGTYPE_p_ListT_void_p_t,_proxy__wrap_new_PtrList, swig_delete_PtrList, swig_PtrList_methods, swig_PtrList_attributes, &swig_PtrList_Sf_SwigStatic, swig_PtrList_meta, swig_PtrList_bases, swig_PtrList_base_names };

static int _wrap_BasicList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  std::list< BasicType > arg2 ;
  std::list< BasicType > *argp2 ;
  
  SWIG_check_num_args("List< BasicType >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::l",1,"List< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< BasicType >::l",2,"std::list< BasicType >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_l_set",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_l_set",2,SWIGTYPE_p_std__listT_BasicType_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  std::list< BasicType > result;
  
  SWIG_check_num_args("List< BasicType >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::l",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_l_get",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< BasicType > * resultptr = new std::list< BasicType >((const std::list< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  List< BasicType > *result = 0 ;
  
  SWIG_check_num_args("List< BasicType >::List",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("List< BasicType >::List",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (List< BasicType > *)new List< BasicType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *result = 0 ;
  
  SWIG_check_num_args("List< BasicType >::List",0,0)
  result = (List< BasicType > *)new List< BasicType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ListT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BasicList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BasicList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BasicList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    List< BasicType >::List(size_t)\n"
    "    List< BasicType >::List()\n");
  lua_error(L);return 0;
}


static int _wrap_BasicList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType result;
  
  SWIG_check_num_args("List< BasicType >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::__getitem",1,"List< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< BasicType >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList___getitem",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType arg3 ;
  BasicType *argp3 ;
  
  SWIG_check_num_args("List< BasicType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::__setitem",1,"List< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< BasicType >::__setitem",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< BasicType >::__setitem",3,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList___setitem",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicList___setitem",3,SWIGTYPE_p_BasicType);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t arg2 ;
  Array< BasicType > *arg3 = 0 ;
  
  SWIG_check_num_args("List< BasicType >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::insert_vector",1,"List< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< BasicType >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< BasicType >::insert_vector",3,"Array< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_insert_vector",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_insert_vector",3,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< BasicType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType arg3 ;
  BasicType *argp3 ;
  
  SWIG_check_num_args("List< BasicType >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::insert_at",1,"List< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< BasicType >::insert_at",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("List< BasicType >::insert_at",3,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_insert_at",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicList_insert_at",3,SWIGTYPE_p_BasicType);
  }
  arg3 = *argp3;
  
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType result;
  
  SWIG_check_num_args("List< BasicType >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::remove_at",1,"List< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< BasicType >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_remove_at",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->remove_at(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  BasicType arg2 ;
  BasicType *argp2 ;
  
  SWIG_check_num_args("List< BasicType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::push_back",1,"List< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< BasicType >::push_back",2,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_push_back",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicList_push_back",2,SWIGTYPE_p_BasicType);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  BasicType arg2 ;
  BasicType *argp2 ;
  
  SWIG_check_num_args("List< BasicType >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::push_front",1,"List< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< BasicType >::push_front",2,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_push_front",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicList_push_front",2,SWIGTYPE_p_BasicType);
  }
  arg2 = *argp2;
  
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  
  SWIG_check_num_args("List< BasicType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::pop_back",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_pop_back",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  
  SWIG_check_num_args("List< BasicType >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::pop_front",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_pop_front",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_empty(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("List< BasicType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::empty",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_empty",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< BasicType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::max_size",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_max_size",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_unique(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  
  SWIG_check_num_args("List< BasicType >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::unique",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_unique",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_front(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  BasicType result;
  
  SWIG_check_num_args("List< BasicType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::front",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_front",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  result = (arg1)->front();
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_back(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  BasicType result;
  
  SWIG_check_num_args("List< BasicType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::back",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_back",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  result = (arg1)->back();
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_resize(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("List< BasicType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::resize",1,"List< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("List< BasicType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_resize",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_clear(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  
  SWIG_check_num_args("List< BasicType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::clear",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_clear",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  
  SWIG_check_num_args("List< BasicType >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::reverse",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_reverse",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_size(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("List< BasicType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::size",1,"List< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_size",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicList_swap(lua_State* L) {
  int SWIG_arg = 0;
  List< BasicType > *arg1 = (List< BasicType > *) 0 ;
  List< BasicType > *arg2 = 0 ;
  
  SWIG_check_num_args("List< BasicType >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("List< BasicType >::swap",1,"List< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("List< BasicType >::swap",2,"List< BasicType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_swap",1,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicList_swap",2,SWIGTYPE_p_ListT_BasicType_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicList(void *obj) {
List< BasicType > *arg1 = (List< BasicType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicList_attributes[] = {
    { "l", _wrap_BasicList_l_get, _wrap_BasicList_l_set },
    {0,0,0}
};
static swig_lua_method swig_BasicList_methods[]= {
    { "__getitem", _wrap_BasicList___getitem},
    { "__setitem", _wrap_BasicList___setitem},
    { "insert_vector", _wrap_BasicList_insert_vector},
    { "insert_at", _wrap_BasicList_insert_at},
    { "remove_at", _wrap_BasicList_remove_at},
    { "push_back", _wrap_BasicList_push_back},
    { "push_front", _wrap_BasicList_push_front},
    { "pop_back", _wrap_BasicList_pop_back},
    { "pop_front", _wrap_BasicList_pop_front},
    { "empty", _wrap_BasicList_empty},
    { "max_size", _wrap_BasicList_max_size},
    { "unique", _wrap_BasicList_unique},
    { "front", _wrap_BasicList_front},
    { "back", _wrap_BasicList_back},
    { "resize", _wrap_BasicList_resize},
    { "clear", _wrap_BasicList_clear},
    { "reverse", _wrap_BasicList_reverse},
    { "size", _wrap_BasicList_size},
    { "swap", _wrap_BasicList_swap},
    {0,0}
};
static swig_lua_method swig_BasicList_meta[] = {
    { "__getitem", _wrap_BasicList___getitem},
    { "__setitem", _wrap_BasicList___setitem},
    {0,0}
};

static swig_lua_attribute swig_BasicList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicList_Sf_SwigStatic = {
    "BasicList",
    swig_BasicList_Sf_SwigStatic_methods,
    swig_BasicList_Sf_SwigStatic_attributes,
    swig_BasicList_Sf_SwigStatic_constants,
    swig_BasicList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicList_bases[] = {0};
static const char *swig_BasicList_base_names[] = {0};
static swig_lua_class _wrap_class_BasicList = { "BasicList", "BasicList", &SWIGTYPE_p_ListT_BasicType_t,_proxy__wrap_new_BasicList, swig_delete_BasicList, swig_BasicList_methods, swig_BasicList_attributes, &swig_BasicList_Sf_SwigStatic, swig_BasicList_meta, swig_BasicList_bases, swig_BasicList_base_names };

static int _wrap_FloatForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  std::list< float > arg2 ;
  std::list< float > *argp2 ;
  
  SWIG_check_num_args("ForwardList< float >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::l",1,"ForwardList< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< float >::l",2,"std::list< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_l_set",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_l_set",2,SWIGTYPE_p_std__listT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  std::list< float > result;
  
  SWIG_check_num_args("ForwardList< float >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::l",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_l_get",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< float > * resultptr = new std::list< float >((const std::list< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< float > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< float >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< float >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< float > *)new ForwardList< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< float >::ForwardList",0,0)
  result = (ForwardList< float > *)new ForwardList< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< float >::ForwardList(size_t)\n"
    "    ForwardList< float >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("ForwardList< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::__getitem",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList___getitem",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("ForwardList< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::__setitem",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< float >::__setitem",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList___setitem",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t arg2 ;
  Array< float > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< float >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::insert_vector",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< float >::insert_vector",3,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_float_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("ForwardList< float >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::insert_at",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< float >::insert_at",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("ForwardList< float >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::remove_at",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ForwardList< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::push_back",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::push_back",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_push_back",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ForwardList< float >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::push_front",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::push_front",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_push_front",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  
  SWIG_check_num_args("ForwardList< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::pop_back",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  
  SWIG_check_num_args("ForwardList< float >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::pop_front",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::empty",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_empty",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::max_size",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_max_size",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  
  SWIG_check_num_args("ForwardList< float >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::unique",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_unique",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("ForwardList< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::front",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_front",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  result = (float)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("ForwardList< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::back",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_back",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  result = (float)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::resize",1,"ForwardList< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_resize",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  
  SWIG_check_num_args("ForwardList< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::clear",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_clear",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  
  SWIG_check_num_args("ForwardList< float >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::reverse",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_reverse",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::size",1,"ForwardList< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_size",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< float > *arg1 = (ForwardList< float > *) 0 ;
  ForwardList< float > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< float >::swap",1,"ForwardList< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< float >::swap",2,"ForwardList< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_swap",1,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_float_t,0))){
    SWIG_fail_ptr("FloatForwardList_swap",2,SWIGTYPE_p_ForwardListT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatForwardList(void *obj) {
ForwardList< float > *arg1 = (ForwardList< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatForwardList_attributes[] = {
    { "l", _wrap_FloatForwardList_l_get, _wrap_FloatForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_FloatForwardList_methods[]= {
    { "__getitem", _wrap_FloatForwardList___getitem},
    { "__setitem", _wrap_FloatForwardList___setitem},
    { "insert_vector", _wrap_FloatForwardList_insert_vector},
    { "insert_at", _wrap_FloatForwardList_insert_at},
    { "remove_at", _wrap_FloatForwardList_remove_at},
    { "push_back", _wrap_FloatForwardList_push_back},
    { "push_front", _wrap_FloatForwardList_push_front},
    { "pop_back", _wrap_FloatForwardList_pop_back},
    { "pop_front", _wrap_FloatForwardList_pop_front},
    { "empty", _wrap_FloatForwardList_empty},
    { "max_size", _wrap_FloatForwardList_max_size},
    { "unique", _wrap_FloatForwardList_unique},
    { "front", _wrap_FloatForwardList_front},
    { "back", _wrap_FloatForwardList_back},
    { "resize", _wrap_FloatForwardList_resize},
    { "clear", _wrap_FloatForwardList_clear},
    { "reverse", _wrap_FloatForwardList_reverse},
    { "size", _wrap_FloatForwardList_size},
    { "swap", _wrap_FloatForwardList_swap},
    {0,0}
};
static swig_lua_method swig_FloatForwardList_meta[] = {
    { "__getitem", _wrap_FloatForwardList___getitem},
    { "__setitem", _wrap_FloatForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatForwardList_Sf_SwigStatic = {
    "FloatForwardList",
    swig_FloatForwardList_Sf_SwigStatic_methods,
    swig_FloatForwardList_Sf_SwigStatic_attributes,
    swig_FloatForwardList_Sf_SwigStatic_constants,
    swig_FloatForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatForwardList_bases[] = {0};
static const char *swig_FloatForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_FloatForwardList = { "FloatForwardList", "FloatForwardList", &SWIGTYPE_p_ForwardListT_float_t,_proxy__wrap_new_FloatForwardList, swig_delete_FloatForwardList, swig_FloatForwardList_methods, swig_FloatForwardList_attributes, &swig_FloatForwardList_Sf_SwigStatic, swig_FloatForwardList_meta, swig_FloatForwardList_bases, swig_FloatForwardList_base_names };

static int _wrap_DoubleForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  std::list< double > arg2 ;
  std::list< double > *argp2 ;
  
  SWIG_check_num_args("ForwardList< double >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::l",1,"ForwardList< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< double >::l",2,"std::list< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_l_set",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_l_set",2,SWIGTYPE_p_std__listT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  std::list< double > result;
  
  SWIG_check_num_args("ForwardList< double >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::l",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_l_get",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< double > * resultptr = new std::list< double >((const std::list< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< double > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< double >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< double >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< double > *)new ForwardList< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< double >::ForwardList",0,0)
  result = (ForwardList< double > *)new ForwardList< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< double >::ForwardList(size_t)\n"
    "    ForwardList< double >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("ForwardList< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::__getitem",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList___getitem",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("ForwardList< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::__setitem",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< double >::__setitem",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList___setitem",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t arg2 ;
  Array< double > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< double >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::insert_vector",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< double >::insert_vector",3,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_double_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("ForwardList< double >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::insert_at",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< double >::insert_at",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("ForwardList< double >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::remove_at",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ForwardList< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::push_back",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::push_back",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_push_back",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ForwardList< double >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::push_front",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::push_front",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_push_front",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  
  SWIG_check_num_args("ForwardList< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::pop_back",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  
  SWIG_check_num_args("ForwardList< double >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::pop_front",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::empty",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_empty",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::max_size",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_max_size",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  
  SWIG_check_num_args("ForwardList< double >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::unique",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_unique",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("ForwardList< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::front",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_front",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  result = (double)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("ForwardList< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::back",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_back",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  result = (double)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::resize",1,"ForwardList< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_resize",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  
  SWIG_check_num_args("ForwardList< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::clear",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_clear",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  
  SWIG_check_num_args("ForwardList< double >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::reverse",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_reverse",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::size",1,"ForwardList< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_size",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< double > *arg1 = (ForwardList< double > *) 0 ;
  ForwardList< double > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< double >::swap",1,"ForwardList< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< double >::swap",2,"ForwardList< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_swap",1,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_double_t,0))){
    SWIG_fail_ptr("DoubleForwardList_swap",2,SWIGTYPE_p_ForwardListT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleForwardList(void *obj) {
ForwardList< double > *arg1 = (ForwardList< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleForwardList_attributes[] = {
    { "l", _wrap_DoubleForwardList_l_get, _wrap_DoubleForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleForwardList_methods[]= {
    { "__getitem", _wrap_DoubleForwardList___getitem},
    { "__setitem", _wrap_DoubleForwardList___setitem},
    { "insert_vector", _wrap_DoubleForwardList_insert_vector},
    { "insert_at", _wrap_DoubleForwardList_insert_at},
    { "remove_at", _wrap_DoubleForwardList_remove_at},
    { "push_back", _wrap_DoubleForwardList_push_back},
    { "push_front", _wrap_DoubleForwardList_push_front},
    { "pop_back", _wrap_DoubleForwardList_pop_back},
    { "pop_front", _wrap_DoubleForwardList_pop_front},
    { "empty", _wrap_DoubleForwardList_empty},
    { "max_size", _wrap_DoubleForwardList_max_size},
    { "unique", _wrap_DoubleForwardList_unique},
    { "front", _wrap_DoubleForwardList_front},
    { "back", _wrap_DoubleForwardList_back},
    { "resize", _wrap_DoubleForwardList_resize},
    { "clear", _wrap_DoubleForwardList_clear},
    { "reverse", _wrap_DoubleForwardList_reverse},
    { "size", _wrap_DoubleForwardList_size},
    { "swap", _wrap_DoubleForwardList_swap},
    {0,0}
};
static swig_lua_method swig_DoubleForwardList_meta[] = {
    { "__getitem", _wrap_DoubleForwardList___getitem},
    { "__setitem", _wrap_DoubleForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_DoubleForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleForwardList_Sf_SwigStatic = {
    "DoubleForwardList",
    swig_DoubleForwardList_Sf_SwigStatic_methods,
    swig_DoubleForwardList_Sf_SwigStatic_attributes,
    swig_DoubleForwardList_Sf_SwigStatic_constants,
    swig_DoubleForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleForwardList_bases[] = {0};
static const char *swig_DoubleForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleForwardList = { "DoubleForwardList", "DoubleForwardList", &SWIGTYPE_p_ForwardListT_double_t,_proxy__wrap_new_DoubleForwardList, swig_delete_DoubleForwardList, swig_DoubleForwardList_methods, swig_DoubleForwardList_attributes, &swig_DoubleForwardList_Sf_SwigStatic, swig_DoubleForwardList_meta, swig_DoubleForwardList_bases, swig_DoubleForwardList_base_names };

static int _wrap_Int8ForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  std::list< signed char > arg2 ;
  std::list< signed char > *argp2 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::l",1,"ForwardList< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< int8_t >::l",2,"std::list< signed char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_l_set",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_l_set",2,SWIGTYPE_p_std__listT_signed_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  std::list< signed char > result;
  
  SWIG_check_num_args("ForwardList< int8_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::l",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_l_get",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< signed char > * resultptr = new std::list< signed char >((const std::list< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8ForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< int8_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< int8_t >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< int8_t > *)new ForwardList< int8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8ForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::ForwardList",0,0)
  result = (ForwardList< int8_t > *)new ForwardList< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8ForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8ForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8ForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8ForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< int8_t >::ForwardList(size_t)\n"
    "    ForwardList< int8_t >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_Int8ForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("ForwardList< int8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::__getitem",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList___getitem",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::__setitem",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< int8_t >::__setitem",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList___setitem",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t arg2 ;
  Array< signed char > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::insert_vector",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< int8_t >::insert_vector",3,"Array< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_signed_char_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< signed char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::insert_at",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< int8_t >::insert_at",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("ForwardList< int8_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::remove_at",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::push_back",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::push_back",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_push_back",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::push_front",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::push_front",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_push_front",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::pop_back",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::pop_front",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::empty",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_empty",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< int8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::max_size",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_max_size",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::unique",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_unique",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("ForwardList< int8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::front",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_front",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  result = (signed char)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("ForwardList< int8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::back",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_back",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  result = (signed char)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::resize",1,"ForwardList< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_resize",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::clear",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_clear",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::reverse",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_reverse",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::size",1,"ForwardList< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_size",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8ForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) 0 ;
  ForwardList< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< int8_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int8_t >::swap",1,"ForwardList< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< int8_t >::swap",2,"ForwardList< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_swap",1,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_signed_char_t,0))){
    SWIG_fail_ptr("Int8ForwardList_swap",2,SWIGTYPE_p_ForwardListT_signed_char_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8ForwardList(void *obj) {
ForwardList< int8_t > *arg1 = (ForwardList< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8ForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8ForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8ForwardList_attributes[] = {
    { "l", _wrap_Int8ForwardList_l_get, _wrap_Int8ForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int8ForwardList_methods[]= {
    { "__getitem", _wrap_Int8ForwardList___getitem},
    { "__setitem", _wrap_Int8ForwardList___setitem},
    { "insert_vector", _wrap_Int8ForwardList_insert_vector},
    { "insert_at", _wrap_Int8ForwardList_insert_at},
    { "remove_at", _wrap_Int8ForwardList_remove_at},
    { "push_back", _wrap_Int8ForwardList_push_back},
    { "push_front", _wrap_Int8ForwardList_push_front},
    { "pop_back", _wrap_Int8ForwardList_pop_back},
    { "pop_front", _wrap_Int8ForwardList_pop_front},
    { "empty", _wrap_Int8ForwardList_empty},
    { "max_size", _wrap_Int8ForwardList_max_size},
    { "unique", _wrap_Int8ForwardList_unique},
    { "front", _wrap_Int8ForwardList_front},
    { "back", _wrap_Int8ForwardList_back},
    { "resize", _wrap_Int8ForwardList_resize},
    { "clear", _wrap_Int8ForwardList_clear},
    { "reverse", _wrap_Int8ForwardList_reverse},
    { "size", _wrap_Int8ForwardList_size},
    { "swap", _wrap_Int8ForwardList_swap},
    {0,0}
};
static swig_lua_method swig_Int8ForwardList_meta[] = {
    { "__getitem", _wrap_Int8ForwardList___getitem},
    { "__setitem", _wrap_Int8ForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int8ForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8ForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8ForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8ForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8ForwardList_Sf_SwigStatic = {
    "Int8ForwardList",
    swig_Int8ForwardList_Sf_SwigStatic_methods,
    swig_Int8ForwardList_Sf_SwigStatic_attributes,
    swig_Int8ForwardList_Sf_SwigStatic_constants,
    swig_Int8ForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8ForwardList_bases[] = {0};
static const char *swig_Int8ForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_Int8ForwardList = { "Int8ForwardList", "Int8ForwardList", &SWIGTYPE_p_ForwardListT_signed_char_t,_proxy__wrap_new_Int8ForwardList, swig_delete_Int8ForwardList, swig_Int8ForwardList_methods, swig_Int8ForwardList_attributes, &swig_Int8ForwardList_Sf_SwigStatic, swig_Int8ForwardList_meta, swig_Int8ForwardList_bases, swig_Int8ForwardList_base_names };

static int _wrap_UInt8forwardlist_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  std::list< unsigned char > arg2 ;
  std::list< unsigned char > *argp2 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::l",1,"ForwardList< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::l",2,"std::list< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_l_set",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_l_set",2,SWIGTYPE_p_std__listT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  std::list< unsigned char > result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::l",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_l_get",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned char > * resultptr = new std::list< unsigned char >((const std::list< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8forwardlist__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< uint8_t > *)new ForwardList< uint8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8forwardlist__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::ForwardList",0,0)
  result = (ForwardList< uint8_t > *)new ForwardList< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8forwardlist(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8forwardlist__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8forwardlist__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8forwardlist'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< uint8_t >::ForwardList(size_t)\n"
    "    ForwardList< uint8_t >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8forwardlist___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::__getitem",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist___getitem",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::__setitem",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< uint8_t >::__setitem",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist___setitem",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned char > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::insert_vector",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< uint8_t >::insert_vector",3,"Array< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_insert_vector",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_char_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::insert_at",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< uint8_t >::insert_at",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_insert_at",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::remove_at",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_remove_at",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::push_back",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::push_back",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_push_back",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::push_front",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::push_front",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_push_front",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::pop_back",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_pop_back",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::pop_front",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_pop_front",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::empty",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_empty",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::max_size",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_max_size",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::unique",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_unique",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::front",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_front",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::back",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_back",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::resize",1,"ForwardList< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_resize",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::clear",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_clear",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::reverse",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_reverse",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::size",1,"ForwardList< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_size",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8forwardlist_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) 0 ;
  ForwardList< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< uint8_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint8_t >::swap",1,"ForwardList< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< uint8_t >::swap",2,"ForwardList< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_swap",1,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8forwardlist_swap",2,SWIGTYPE_p_ForwardListT_unsigned_char_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8forwardlist(void *obj) {
ForwardList< uint8_t > *arg1 = (ForwardList< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8forwardlist(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8forwardlist);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8forwardlist_attributes[] = {
    { "l", _wrap_UInt8forwardlist_l_get, _wrap_UInt8forwardlist_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8forwardlist_methods[]= {
    { "__getitem", _wrap_UInt8forwardlist___getitem},
    { "__setitem", _wrap_UInt8forwardlist___setitem},
    { "insert_vector", _wrap_UInt8forwardlist_insert_vector},
    { "insert_at", _wrap_UInt8forwardlist_insert_at},
    { "remove_at", _wrap_UInt8forwardlist_remove_at},
    { "push_back", _wrap_UInt8forwardlist_push_back},
    { "push_front", _wrap_UInt8forwardlist_push_front},
    { "pop_back", _wrap_UInt8forwardlist_pop_back},
    { "pop_front", _wrap_UInt8forwardlist_pop_front},
    { "empty", _wrap_UInt8forwardlist_empty},
    { "max_size", _wrap_UInt8forwardlist_max_size},
    { "unique", _wrap_UInt8forwardlist_unique},
    { "front", _wrap_UInt8forwardlist_front},
    { "back", _wrap_UInt8forwardlist_back},
    { "resize", _wrap_UInt8forwardlist_resize},
    { "clear", _wrap_UInt8forwardlist_clear},
    { "reverse", _wrap_UInt8forwardlist_reverse},
    { "size", _wrap_UInt8forwardlist_size},
    { "swap", _wrap_UInt8forwardlist_swap},
    {0,0}
};
static swig_lua_method swig_UInt8forwardlist_meta[] = {
    { "__getitem", _wrap_UInt8forwardlist___getitem},
    { "__setitem", _wrap_UInt8forwardlist___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt8forwardlist_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8forwardlist_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8forwardlist_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8forwardlist_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8forwardlist_Sf_SwigStatic = {
    "UInt8forwardlist",
    swig_UInt8forwardlist_Sf_SwigStatic_methods,
    swig_UInt8forwardlist_Sf_SwigStatic_attributes,
    swig_UInt8forwardlist_Sf_SwigStatic_constants,
    swig_UInt8forwardlist_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8forwardlist_bases[] = {0};
static const char *swig_UInt8forwardlist_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8forwardlist = { "UInt8forwardlist", "UInt8forwardlist", &SWIGTYPE_p_ForwardListT_unsigned_char_t,_proxy__wrap_new_UInt8forwardlist, swig_delete_UInt8forwardlist, swig_UInt8forwardlist_methods, swig_UInt8forwardlist_attributes, &swig_UInt8forwardlist_Sf_SwigStatic, swig_UInt8forwardlist_meta, swig_UInt8forwardlist_bases, swig_UInt8forwardlist_base_names };

static int _wrap_Int16ForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  std::list< short > arg2 ;
  std::list< short > *argp2 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::l",1,"ForwardList< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< int16_t >::l",2,"std::list< short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_l_set",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_l_set",2,SWIGTYPE_p_std__listT_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  std::list< short > result;
  
  SWIG_check_num_args("ForwardList< int16_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::l",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_l_get",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< short > * resultptr = new std::list< short >((const std::list< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16ForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< int16_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< int16_t >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< int16_t > *)new ForwardList< int16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16ForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::ForwardList",0,0)
  result = (ForwardList< int16_t > *)new ForwardList< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16ForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16ForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16ForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16ForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< int16_t >::ForwardList(size_t)\n"
    "    ForwardList< int16_t >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_Int16ForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("ForwardList< int16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::__getitem",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList___getitem",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::__setitem",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< int16_t >::__setitem",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList___setitem",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t arg2 ;
  Array< short > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::insert_vector",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< int16_t >::insert_vector",3,"Array< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_short_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::insert_at",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< int16_t >::insert_at",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("ForwardList< int16_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::remove_at",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::push_back",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::push_back",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_push_back",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::push_front",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::push_front",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_push_front",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::pop_back",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::pop_front",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::empty",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_empty",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< int16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::max_size",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_max_size",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::unique",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_unique",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("ForwardList< int16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::front",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_front",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  result = (short)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("ForwardList< int16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::back",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_back",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  result = (short)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::resize",1,"ForwardList< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_resize",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::clear",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_clear",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::reverse",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_reverse",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::size",1,"ForwardList< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_size",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16ForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) 0 ;
  ForwardList< short > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< int16_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int16_t >::swap",1,"ForwardList< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< int16_t >::swap",2,"ForwardList< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_swap",1,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_short_t,0))){
    SWIG_fail_ptr("Int16ForwardList_swap",2,SWIGTYPE_p_ForwardListT_short_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16ForwardList(void *obj) {
ForwardList< int16_t > *arg1 = (ForwardList< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16ForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16ForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16ForwardList_attributes[] = {
    { "l", _wrap_Int16ForwardList_l_get, _wrap_Int16ForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int16ForwardList_methods[]= {
    { "__getitem", _wrap_Int16ForwardList___getitem},
    { "__setitem", _wrap_Int16ForwardList___setitem},
    { "insert_vector", _wrap_Int16ForwardList_insert_vector},
    { "insert_at", _wrap_Int16ForwardList_insert_at},
    { "remove_at", _wrap_Int16ForwardList_remove_at},
    { "push_back", _wrap_Int16ForwardList_push_back},
    { "push_front", _wrap_Int16ForwardList_push_front},
    { "pop_back", _wrap_Int16ForwardList_pop_back},
    { "pop_front", _wrap_Int16ForwardList_pop_front},
    { "empty", _wrap_Int16ForwardList_empty},
    { "max_size", _wrap_Int16ForwardList_max_size},
    { "unique", _wrap_Int16ForwardList_unique},
    { "front", _wrap_Int16ForwardList_front},
    { "back", _wrap_Int16ForwardList_back},
    { "resize", _wrap_Int16ForwardList_resize},
    { "clear", _wrap_Int16ForwardList_clear},
    { "reverse", _wrap_Int16ForwardList_reverse},
    { "size", _wrap_Int16ForwardList_size},
    { "swap", _wrap_Int16ForwardList_swap},
    {0,0}
};
static swig_lua_method swig_Int16ForwardList_meta[] = {
    { "__getitem", _wrap_Int16ForwardList___getitem},
    { "__setitem", _wrap_Int16ForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int16ForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16ForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16ForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16ForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16ForwardList_Sf_SwigStatic = {
    "Int16ForwardList",
    swig_Int16ForwardList_Sf_SwigStatic_methods,
    swig_Int16ForwardList_Sf_SwigStatic_attributes,
    swig_Int16ForwardList_Sf_SwigStatic_constants,
    swig_Int16ForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16ForwardList_bases[] = {0};
static const char *swig_Int16ForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_Int16ForwardList = { "Int16ForwardList", "Int16ForwardList", &SWIGTYPE_p_ForwardListT_short_t,_proxy__wrap_new_Int16ForwardList, swig_delete_Int16ForwardList, swig_Int16ForwardList_methods, swig_Int16ForwardList_attributes, &swig_Int16ForwardList_Sf_SwigStatic, swig_Int16ForwardList_meta, swig_Int16ForwardList_bases, swig_Int16ForwardList_base_names };

static int _wrap_UInt16forwardlist_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  std::list< unsigned short > arg2 ;
  std::list< unsigned short > *argp2 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::l",1,"ForwardList< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::l",2,"std::list< unsigned short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_l_set",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_l_set",2,SWIGTYPE_p_std__listT_unsigned_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  std::list< unsigned short > result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::l",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_l_get",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned short > * resultptr = new std::list< unsigned short >((const std::list< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16forwardlist__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< uint16_t > *)new ForwardList< uint16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16forwardlist__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::ForwardList",0,0)
  result = (ForwardList< uint16_t > *)new ForwardList< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16forwardlist(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16forwardlist__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16forwardlist__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16forwardlist'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< uint16_t >::ForwardList(size_t)\n"
    "    ForwardList< uint16_t >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16forwardlist___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::__getitem",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist___getitem",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::__setitem",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< uint16_t >::__setitem",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist___setitem",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned short > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::insert_vector",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< uint16_t >::insert_vector",3,"Array< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_insert_vector",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_short_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::insert_at",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< uint16_t >::insert_at",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_insert_at",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::remove_at",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_remove_at",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::push_back",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::push_back",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_push_back",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::push_front",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::push_front",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_push_front",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::pop_back",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_pop_back",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::pop_front",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_pop_front",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::empty",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_empty",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::max_size",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_max_size",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::unique",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_unique",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::front",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_front",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::back",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_back",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::resize",1,"ForwardList< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_resize",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::clear",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_clear",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::reverse",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_reverse",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::size",1,"ForwardList< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_size",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16forwardlist_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) 0 ;
  ForwardList< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< uint16_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint16_t >::swap",1,"ForwardList< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< uint16_t >::swap",2,"ForwardList< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_swap",1,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16forwardlist_swap",2,SWIGTYPE_p_ForwardListT_unsigned_short_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16forwardlist(void *obj) {
ForwardList< uint16_t > *arg1 = (ForwardList< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16forwardlist(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16forwardlist);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16forwardlist_attributes[] = {
    { "l", _wrap_UInt16forwardlist_l_get, _wrap_UInt16forwardlist_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16forwardlist_methods[]= {
    { "__getitem", _wrap_UInt16forwardlist___getitem},
    { "__setitem", _wrap_UInt16forwardlist___setitem},
    { "insert_vector", _wrap_UInt16forwardlist_insert_vector},
    { "insert_at", _wrap_UInt16forwardlist_insert_at},
    { "remove_at", _wrap_UInt16forwardlist_remove_at},
    { "push_back", _wrap_UInt16forwardlist_push_back},
    { "push_front", _wrap_UInt16forwardlist_push_front},
    { "pop_back", _wrap_UInt16forwardlist_pop_back},
    { "pop_front", _wrap_UInt16forwardlist_pop_front},
    { "empty", _wrap_UInt16forwardlist_empty},
    { "max_size", _wrap_UInt16forwardlist_max_size},
    { "unique", _wrap_UInt16forwardlist_unique},
    { "front", _wrap_UInt16forwardlist_front},
    { "back", _wrap_UInt16forwardlist_back},
    { "resize", _wrap_UInt16forwardlist_resize},
    { "clear", _wrap_UInt16forwardlist_clear},
    { "reverse", _wrap_UInt16forwardlist_reverse},
    { "size", _wrap_UInt16forwardlist_size},
    { "swap", _wrap_UInt16forwardlist_swap},
    {0,0}
};
static swig_lua_method swig_UInt16forwardlist_meta[] = {
    { "__getitem", _wrap_UInt16forwardlist___getitem},
    { "__setitem", _wrap_UInt16forwardlist___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt16forwardlist_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16forwardlist_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16forwardlist_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16forwardlist_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16forwardlist_Sf_SwigStatic = {
    "UInt16forwardlist",
    swig_UInt16forwardlist_Sf_SwigStatic_methods,
    swig_UInt16forwardlist_Sf_SwigStatic_attributes,
    swig_UInt16forwardlist_Sf_SwigStatic_constants,
    swig_UInt16forwardlist_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16forwardlist_bases[] = {0};
static const char *swig_UInt16forwardlist_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16forwardlist = { "UInt16forwardlist", "UInt16forwardlist", &SWIGTYPE_p_ForwardListT_unsigned_short_t,_proxy__wrap_new_UInt16forwardlist, swig_delete_UInt16forwardlist, swig_UInt16forwardlist_methods, swig_UInt16forwardlist_attributes, &swig_UInt16forwardlist_Sf_SwigStatic, swig_UInt16forwardlist_meta, swig_UInt16forwardlist_bases, swig_UInt16forwardlist_base_names };

static int _wrap_Int32ForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  std::list< int > arg2 ;
  std::list< int > *argp2 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::l",1,"ForwardList< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< int32_t >::l",2,"std::list< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_l_set",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_l_set",2,SWIGTYPE_p_std__listT_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  std::list< int > result;
  
  SWIG_check_num_args("ForwardList< int32_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::l",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_l_get",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< int > * resultptr = new std::list< int >((const std::list< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32ForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< int32_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< int32_t >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< int32_t > *)new ForwardList< int32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32ForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::ForwardList",0,0)
  result = (ForwardList< int32_t > *)new ForwardList< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32ForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32ForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32ForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32ForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< int32_t >::ForwardList(size_t)\n"
    "    ForwardList< int32_t >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_Int32ForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("ForwardList< int32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::__getitem",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList___getitem",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::__setitem",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< int32_t >::__setitem",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList___setitem",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t arg2 ;
  Array< int > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::insert_vector",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< int32_t >::insert_vector",3,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_int_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::insert_at",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< int32_t >::insert_at",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("ForwardList< int32_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::remove_at",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::push_back",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::push_back",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_push_back",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::push_front",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::push_front",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_push_front",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::pop_back",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::pop_front",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::empty",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_empty",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< int32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::max_size",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_max_size",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::unique",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_unique",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("ForwardList< int32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::front",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_front",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  result = (int)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("ForwardList< int32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::back",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_back",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  result = (int)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::resize",1,"ForwardList< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< int32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_resize",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::clear",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_clear",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::reverse",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_reverse",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::size",1,"ForwardList< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_size",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) 0 ;
  ForwardList< int > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< int32_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< int32_t >::swap",1,"ForwardList< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< int32_t >::swap",2,"ForwardList< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_swap",1,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_int_t,0))){
    SWIG_fail_ptr("Int32ForwardList_swap",2,SWIGTYPE_p_ForwardListT_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32ForwardList(void *obj) {
ForwardList< int32_t > *arg1 = (ForwardList< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32ForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32ForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32ForwardList_attributes[] = {
    { "l", _wrap_Int32ForwardList_l_get, _wrap_Int32ForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int32ForwardList_methods[]= {
    { "__getitem", _wrap_Int32ForwardList___getitem},
    { "__setitem", _wrap_Int32ForwardList___setitem},
    { "insert_vector", _wrap_Int32ForwardList_insert_vector},
    { "insert_at", _wrap_Int32ForwardList_insert_at},
    { "remove_at", _wrap_Int32ForwardList_remove_at},
    { "push_back", _wrap_Int32ForwardList_push_back},
    { "push_front", _wrap_Int32ForwardList_push_front},
    { "pop_back", _wrap_Int32ForwardList_pop_back},
    { "pop_front", _wrap_Int32ForwardList_pop_front},
    { "empty", _wrap_Int32ForwardList_empty},
    { "max_size", _wrap_Int32ForwardList_max_size},
    { "unique", _wrap_Int32ForwardList_unique},
    { "front", _wrap_Int32ForwardList_front},
    { "back", _wrap_Int32ForwardList_back},
    { "resize", _wrap_Int32ForwardList_resize},
    { "clear", _wrap_Int32ForwardList_clear},
    { "reverse", _wrap_Int32ForwardList_reverse},
    { "size", _wrap_Int32ForwardList_size},
    { "swap", _wrap_Int32ForwardList_swap},
    {0,0}
};
static swig_lua_method swig_Int32ForwardList_meta[] = {
    { "__getitem", _wrap_Int32ForwardList___getitem},
    { "__setitem", _wrap_Int32ForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int32ForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32ForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32ForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32ForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32ForwardList_Sf_SwigStatic = {
    "Int32ForwardList",
    swig_Int32ForwardList_Sf_SwigStatic_methods,
    swig_Int32ForwardList_Sf_SwigStatic_attributes,
    swig_Int32ForwardList_Sf_SwigStatic_constants,
    swig_Int32ForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32ForwardList_bases[] = {0};
static const char *swig_Int32ForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_Int32ForwardList = { "Int32ForwardList", "Int32ForwardList", &SWIGTYPE_p_ForwardListT_int_t,_proxy__wrap_new_Int32ForwardList, swig_delete_Int32ForwardList, swig_Int32ForwardList_methods, swig_Int32ForwardList_attributes, &swig_Int32ForwardList_Sf_SwigStatic, swig_Int32ForwardList_meta, swig_Int32ForwardList_bases, swig_Int32ForwardList_base_names };

static int _wrap_UInt32ForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  std::list< unsigned int > arg2 ;
  std::list< unsigned int > *argp2 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::l",1,"ForwardList< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::l",2,"std::list< unsigned int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_l_set",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_l_set",2,SWIGTYPE_p_std__listT_unsigned_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  std::list< unsigned int > result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::l",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_l_get",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned int > * resultptr = new std::list< unsigned int >((const std::list< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32ForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< uint32_t > *)new ForwardList< uint32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32ForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::ForwardList",0,0)
  result = (ForwardList< uint32_t > *)new ForwardList< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32ForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32ForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32ForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32ForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< uint32_t >::ForwardList(size_t)\n"
    "    ForwardList< uint32_t >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32ForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::__getitem",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList___getitem",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::__setitem",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< uint32_t >::__setitem",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList___setitem",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t arg2 ;
  Array< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::insert_vector",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< uint32_t >::insert_vector",3,"Array< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_int_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::insert_at",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< uint32_t >::insert_at",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::remove_at",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::push_back",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::push_back",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_push_back",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::push_front",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::push_front",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_push_front",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::pop_back",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::pop_front",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::empty",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_empty",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::max_size",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_max_size",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::unique",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_unique",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::front",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_front",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::back",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_back",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::resize",1,"ForwardList< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_resize",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::clear",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_clear",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::reverse",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_reverse",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::size",1,"ForwardList< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_size",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32ForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) 0 ;
  ForwardList< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< uint32_t >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< uint32_t >::swap",1,"ForwardList< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< uint32_t >::swap",2,"ForwardList< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_swap",1,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32ForwardList_swap",2,SWIGTYPE_p_ForwardListT_unsigned_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32ForwardList(void *obj) {
ForwardList< uint32_t > *arg1 = (ForwardList< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32ForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32ForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32ForwardList_attributes[] = {
    { "l", _wrap_UInt32ForwardList_l_get, _wrap_UInt32ForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32ForwardList_methods[]= {
    { "__getitem", _wrap_UInt32ForwardList___getitem},
    { "__setitem", _wrap_UInt32ForwardList___setitem},
    { "insert_vector", _wrap_UInt32ForwardList_insert_vector},
    { "insert_at", _wrap_UInt32ForwardList_insert_at},
    { "remove_at", _wrap_UInt32ForwardList_remove_at},
    { "push_back", _wrap_UInt32ForwardList_push_back},
    { "push_front", _wrap_UInt32ForwardList_push_front},
    { "pop_back", _wrap_UInt32ForwardList_pop_back},
    { "pop_front", _wrap_UInt32ForwardList_pop_front},
    { "empty", _wrap_UInt32ForwardList_empty},
    { "max_size", _wrap_UInt32ForwardList_max_size},
    { "unique", _wrap_UInt32ForwardList_unique},
    { "front", _wrap_UInt32ForwardList_front},
    { "back", _wrap_UInt32ForwardList_back},
    { "resize", _wrap_UInt32ForwardList_resize},
    { "clear", _wrap_UInt32ForwardList_clear},
    { "reverse", _wrap_UInt32ForwardList_reverse},
    { "size", _wrap_UInt32ForwardList_size},
    { "swap", _wrap_UInt32ForwardList_swap},
    {0,0}
};
static swig_lua_method swig_UInt32ForwardList_meta[] = {
    { "__getitem", _wrap_UInt32ForwardList___getitem},
    { "__setitem", _wrap_UInt32ForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt32ForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32ForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32ForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32ForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32ForwardList_Sf_SwigStatic = {
    "UInt32ForwardList",
    swig_UInt32ForwardList_Sf_SwigStatic_methods,
    swig_UInt32ForwardList_Sf_SwigStatic_attributes,
    swig_UInt32ForwardList_Sf_SwigStatic_constants,
    swig_UInt32ForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32ForwardList_bases[] = {0};
static const char *swig_UInt32ForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32ForwardList = { "UInt32ForwardList", "UInt32ForwardList", &SWIGTYPE_p_ForwardListT_unsigned_int_t,_proxy__wrap_new_UInt32ForwardList, swig_delete_UInt32ForwardList, swig_UInt32ForwardList_methods, swig_UInt32ForwardList_attributes, &swig_UInt32ForwardList_Sf_SwigStatic, swig_UInt32ForwardList_meta, swig_UInt32ForwardList_bases, swig_UInt32ForwardList_base_names };

static int _wrap_Int64ForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  std::list< long long > arg2 ;
  std::list< long long > *argp2 ;
  
  SWIG_check_num_args("ForwardList< long long >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::l",1,"ForwardList< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< long long >::l",2,"std::list< long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_l_set",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_l_set",2,SWIGTYPE_p_std__listT_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  std::list< long long > result;
  
  SWIG_check_num_args("ForwardList< long long >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::l",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_l_get",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< long long > * resultptr = new std::list< long long >((const std::list< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64ForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< long long > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< long long >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< long long > *)new ForwardList< long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64ForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::ForwardList",0,0)
  result = (ForwardList< long long > *)new ForwardList< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64ForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64ForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int64ForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64ForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< long long >::ForwardList(size_t)\n"
    "    ForwardList< long long >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_Int64ForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("ForwardList< long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::__getitem",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList___getitem",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("ForwardList< long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::__setitem",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< long long >::__setitem",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList___setitem",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t arg2 ;
  Array< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::insert_vector",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< long long >::insert_vector",3,"Array< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_long_long_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("ForwardList< long long >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::insert_at",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< long long >::insert_at",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("ForwardList< long long >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::remove_at",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("ForwardList< long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::push_back",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::push_back",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_push_back",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("ForwardList< long long >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::push_front",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::push_front",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_push_front",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::pop_back",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::pop_front",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::empty",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_empty",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::max_size",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_max_size",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::unique",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_unique",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("ForwardList< long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::front",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_front",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  result = (long long)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("ForwardList< long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::back",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_back",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  result = (long long)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::resize",1,"ForwardList< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_resize",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::clear",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_clear",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::reverse",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_reverse",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::size",1,"ForwardList< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_size",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64ForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< long long > *arg1 = (ForwardList< long long > *) 0 ;
  ForwardList< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< long long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< long long >::swap",1,"ForwardList< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< long long >::swap",2,"ForwardList< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_swap",1,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_long_long_t,0))){
    SWIG_fail_ptr("Int64ForwardList_swap",2,SWIGTYPE_p_ForwardListT_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64ForwardList(void *obj) {
ForwardList< long long > *arg1 = (ForwardList< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64ForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64ForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64ForwardList_attributes[] = {
    { "l", _wrap_Int64ForwardList_l_get, _wrap_Int64ForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_Int64ForwardList_methods[]= {
    { "__getitem", _wrap_Int64ForwardList___getitem},
    { "__setitem", _wrap_Int64ForwardList___setitem},
    { "insert_vector", _wrap_Int64ForwardList_insert_vector},
    { "insert_at", _wrap_Int64ForwardList_insert_at},
    { "remove_at", _wrap_Int64ForwardList_remove_at},
    { "push_back", _wrap_Int64ForwardList_push_back},
    { "push_front", _wrap_Int64ForwardList_push_front},
    { "pop_back", _wrap_Int64ForwardList_pop_back},
    { "pop_front", _wrap_Int64ForwardList_pop_front},
    { "empty", _wrap_Int64ForwardList_empty},
    { "max_size", _wrap_Int64ForwardList_max_size},
    { "unique", _wrap_Int64ForwardList_unique},
    { "front", _wrap_Int64ForwardList_front},
    { "back", _wrap_Int64ForwardList_back},
    { "resize", _wrap_Int64ForwardList_resize},
    { "clear", _wrap_Int64ForwardList_clear},
    { "reverse", _wrap_Int64ForwardList_reverse},
    { "size", _wrap_Int64ForwardList_size},
    { "swap", _wrap_Int64ForwardList_swap},
    {0,0}
};
static swig_lua_method swig_Int64ForwardList_meta[] = {
    { "__getitem", _wrap_Int64ForwardList___getitem},
    { "__setitem", _wrap_Int64ForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int64ForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64ForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64ForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64ForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64ForwardList_Sf_SwigStatic = {
    "Int64ForwardList",
    swig_Int64ForwardList_Sf_SwigStatic_methods,
    swig_Int64ForwardList_Sf_SwigStatic_attributes,
    swig_Int64ForwardList_Sf_SwigStatic_constants,
    swig_Int64ForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64ForwardList_bases[] = {0};
static const char *swig_Int64ForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_Int64ForwardList = { "Int64ForwardList", "Int64ForwardList", &SWIGTYPE_p_ForwardListT_long_long_t,_proxy__wrap_new_Int64ForwardList, swig_delete_Int64ForwardList, swig_Int64ForwardList_methods, swig_Int64ForwardList_attributes, &swig_Int64ForwardList_Sf_SwigStatic, swig_Int64ForwardList_meta, swig_Int64ForwardList_bases, swig_Int64ForwardList_base_names };

static int _wrap_UInt64ForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  std::list< unsigned long long > arg2 ;
  std::list< unsigned long long > *argp2 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::l",1,"ForwardList< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::l",2,"std::list< unsigned long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_l_set",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_l_set",2,SWIGTYPE_p_std__listT_unsigned_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  std::list< unsigned long long > result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::l",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_l_get",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< unsigned long long > * resultptr = new std::list< unsigned long long >((const std::list< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64ForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< unsigned long long > *)new ForwardList< unsigned long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64ForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::ForwardList",0,0)
  result = (ForwardList< unsigned long long > *)new ForwardList< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64ForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64ForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt64ForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64ForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< unsigned long long >::ForwardList(size_t)\n"
    "    ForwardList< unsigned long long >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64ForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::__getitem",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList___getitem",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::__setitem",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::__setitem",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< unsigned long long >::__setitem",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList___setitem",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t arg2 ;
  Array< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::insert_vector",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< unsigned long long >::insert_vector",3,"Array< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_unsigned_long_long_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::insert_at",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ForwardList< unsigned long long >::insert_at",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::remove_at",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->remove_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::push_back",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::push_back",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_push_back",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::push_front",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::push_front",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_push_front",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::pop_back",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::pop_front",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::empty",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_empty",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::max_size",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_max_size",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::unique",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_unique",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::front",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_front",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::back",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_back",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::resize",1,"ForwardList< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_resize",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::clear",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_clear",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::reverse",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_reverse",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::size",1,"ForwardList< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_size",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64ForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) 0 ;
  ForwardList< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< unsigned long long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< unsigned long long >::swap",1,"ForwardList< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< unsigned long long >::swap",2,"ForwardList< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_swap",1,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64ForwardList_swap",2,SWIGTYPE_p_ForwardListT_unsigned_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64ForwardList(void *obj) {
ForwardList< unsigned long long > *arg1 = (ForwardList< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64ForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64ForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64ForwardList_attributes[] = {
    { "l", _wrap_UInt64ForwardList_l_get, _wrap_UInt64ForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64ForwardList_methods[]= {
    { "__getitem", _wrap_UInt64ForwardList___getitem},
    { "__setitem", _wrap_UInt64ForwardList___setitem},
    { "insert_vector", _wrap_UInt64ForwardList_insert_vector},
    { "insert_at", _wrap_UInt64ForwardList_insert_at},
    { "remove_at", _wrap_UInt64ForwardList_remove_at},
    { "push_back", _wrap_UInt64ForwardList_push_back},
    { "push_front", _wrap_UInt64ForwardList_push_front},
    { "pop_back", _wrap_UInt64ForwardList_pop_back},
    { "pop_front", _wrap_UInt64ForwardList_pop_front},
    { "empty", _wrap_UInt64ForwardList_empty},
    { "max_size", _wrap_UInt64ForwardList_max_size},
    { "unique", _wrap_UInt64ForwardList_unique},
    { "front", _wrap_UInt64ForwardList_front},
    { "back", _wrap_UInt64ForwardList_back},
    { "resize", _wrap_UInt64ForwardList_resize},
    { "clear", _wrap_UInt64ForwardList_clear},
    { "reverse", _wrap_UInt64ForwardList_reverse},
    { "size", _wrap_UInt64ForwardList_size},
    { "swap", _wrap_UInt64ForwardList_swap},
    {0,0}
};
static swig_lua_method swig_UInt64ForwardList_meta[] = {
    { "__getitem", _wrap_UInt64ForwardList___getitem},
    { "__setitem", _wrap_UInt64ForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt64ForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64ForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64ForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64ForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64ForwardList_Sf_SwigStatic = {
    "UInt64ForwardList",
    swig_UInt64ForwardList_Sf_SwigStatic_methods,
    swig_UInt64ForwardList_Sf_SwigStatic_attributes,
    swig_UInt64ForwardList_Sf_SwigStatic_constants,
    swig_UInt64ForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64ForwardList_bases[] = {0};
static const char *swig_UInt64ForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64ForwardList = { "UInt64ForwardList", "UInt64ForwardList", &SWIGTYPE_p_ForwardListT_unsigned_long_long_t,_proxy__wrap_new_UInt64ForwardList, swig_delete_UInt64ForwardList, swig_UInt64ForwardList_methods, swig_UInt64ForwardList_attributes, &swig_UInt64ForwardList_Sf_SwigStatic, swig_UInt64ForwardList_meta, swig_UInt64ForwardList_bases, swig_UInt64ForwardList_base_names };

static int _wrap_StringForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  std::list< string > arg2 ;
  std::list< string > *argp2 ;
  
  SWIG_check_num_args("ForwardList< string >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::l",1,"ForwardList< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< string >::l",2,"std::list< string >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_l_set",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_l_set",2,SWIGTYPE_p_std__listT_string_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  std::list< string > result;
  
  SWIG_check_num_args("ForwardList< string >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::l",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_l_get",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< string > * resultptr = new std::list< string >((const std::list< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< string > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< string >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< string >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< string > *)new ForwardList< string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< string >::ForwardList",0,0)
  result = (ForwardList< string > *)new ForwardList< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StringForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< string >::ForwardList(size_t)\n"
    "    ForwardList< string >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_StringForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t arg2 ;
  string result;
  
  SWIG_check_num_args("ForwardList< string >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::__getitem",1,"ForwardList< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< string >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList___getitem",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("ForwardList< string >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::__setitem",1,"ForwardList< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< string >::__setitem",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< string >::__setitem",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList___setitem",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringForwardList___setitem",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t arg2 ;
  Array< string > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< string >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::insert_vector",1,"ForwardList< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< string >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< string >::insert_vector",3,"Array< string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_string_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< string > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("ForwardList< string >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::insert_at",1,"ForwardList< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< string >::insert_at",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< string >::insert_at",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringForwardList_insert_at",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t arg2 ;
  string result;
  
  SWIG_check_num_args("ForwardList< string >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::remove_at",1,"ForwardList< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< string >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->remove_at(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("ForwardList< string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::push_back",1,"ForwardList< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< string >::push_back",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_push_back",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringForwardList_push_back",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("ForwardList< string >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::push_front",1,"ForwardList< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< string >::push_front",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_push_front",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringForwardList_push_front",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  
  SWIG_check_num_args("ForwardList< string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::pop_back",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  
  SWIG_check_num_args("ForwardList< string >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::pop_front",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::empty",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_empty",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::max_size",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_max_size",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  
  SWIG_check_num_args("ForwardList< string >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::unique",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_unique",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("ForwardList< string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::front",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_front",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  result = (arg1)->front();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("ForwardList< string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::back",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_back",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  result = (arg1)->back();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< string >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::resize",1,"ForwardList< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< string >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_resize",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  
  SWIG_check_num_args("ForwardList< string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::clear",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_clear",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  
  SWIG_check_num_args("ForwardList< string >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::reverse",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_reverse",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::size",1,"ForwardList< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_size",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< string > *arg1 = (ForwardList< string > *) 0 ;
  ForwardList< string > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< string >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< string >::swap",1,"ForwardList< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< string >::swap",2,"ForwardList< string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_swap",1,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_string_t,0))){
    SWIG_fail_ptr("StringForwardList_swap",2,SWIGTYPE_p_ForwardListT_string_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringForwardList(void *obj) {
ForwardList< string > *arg1 = (ForwardList< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringForwardList_attributes[] = {
    { "l", _wrap_StringForwardList_l_get, _wrap_StringForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_StringForwardList_methods[]= {
    { "__getitem", _wrap_StringForwardList___getitem},
    { "__setitem", _wrap_StringForwardList___setitem},
    { "insert_vector", _wrap_StringForwardList_insert_vector},
    { "insert_at", _wrap_StringForwardList_insert_at},
    { "remove_at", _wrap_StringForwardList_remove_at},
    { "push_back", _wrap_StringForwardList_push_back},
    { "push_front", _wrap_StringForwardList_push_front},
    { "pop_back", _wrap_StringForwardList_pop_back},
    { "pop_front", _wrap_StringForwardList_pop_front},
    { "empty", _wrap_StringForwardList_empty},
    { "max_size", _wrap_StringForwardList_max_size},
    { "unique", _wrap_StringForwardList_unique},
    { "front", _wrap_StringForwardList_front},
    { "back", _wrap_StringForwardList_back},
    { "resize", _wrap_StringForwardList_resize},
    { "clear", _wrap_StringForwardList_clear},
    { "reverse", _wrap_StringForwardList_reverse},
    { "size", _wrap_StringForwardList_size},
    { "swap", _wrap_StringForwardList_swap},
    {0,0}
};
static swig_lua_method swig_StringForwardList_meta[] = {
    { "__getitem", _wrap_StringForwardList___getitem},
    { "__setitem", _wrap_StringForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_StringForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringForwardList_Sf_SwigStatic = {
    "StringForwardList",
    swig_StringForwardList_Sf_SwigStatic_methods,
    swig_StringForwardList_Sf_SwigStatic_attributes,
    swig_StringForwardList_Sf_SwigStatic_constants,
    swig_StringForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringForwardList_bases[] = {0};
static const char *swig_StringForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_StringForwardList = { "StringForwardList", "StringForwardList", &SWIGTYPE_p_ForwardListT_string_t,_proxy__wrap_new_StringForwardList, swig_delete_StringForwardList, swig_StringForwardList_methods, swig_StringForwardList_attributes, &swig_StringForwardList_Sf_SwigStatic, swig_StringForwardList_meta, swig_StringForwardList_bases, swig_StringForwardList_base_names };

static int _wrap_PtrForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  std::list< void * > arg2 ;
  std::list< void * > *argp2 ;
  
  SWIG_check_num_args("ForwardList< void * >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::l",1,"ForwardList< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< void * >::l",2,"std::list< void * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_l_set",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_l_set",2,SWIGTYPE_p_std__listT_void_p_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  std::list< void * > result;
  
  SWIG_check_num_args("ForwardList< void * >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::l",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_l_get",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< void * > * resultptr = new std::list< void * >((const std::list< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< void * > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< void * >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< void * > *)new ForwardList< void * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::ForwardList",0,0)
  result = (ForwardList< void * > *)new ForwardList< void * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PtrForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PtrForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PtrForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< void * >::ForwardList(size_t)\n"
    "    ForwardList< void * >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_PtrForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::__getitem",1,"ForwardList< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< void * >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList___getitem",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) (void *)0 ;
  
  SWIG_check_num_args("ForwardList< void * >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::__setitem",1,"ForwardList< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< void * >::__setitem",2,"size_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ForwardList< void * >::__setitem",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList___setitem",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrForwardList___setitem");
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t arg2 ;
  Array< void * > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::insert_vector",1,"ForwardList< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< void * >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< void * >::insert_vector",3,"Array< void * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_void_p_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< void * > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) (void *)0 ;
  
  SWIG_check_num_args("ForwardList< void * >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::insert_at",1,"ForwardList< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< void * >::insert_at",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ForwardList< void * >::insert_at",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrForwardList_insert_at");
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::remove_at",1,"ForwardList< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< void * >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->remove_at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("ForwardList< void * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::push_back",1,"ForwardList< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ForwardList< void * >::push_back",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_push_back",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrForwardList_push_back");
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("ForwardList< void * >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::push_front",1,"ForwardList< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ForwardList< void * >::push_front",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_push_front",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrForwardList_push_front");
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::pop_back",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::pop_front",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< void * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::empty",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_empty",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< void * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::max_size",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_max_size",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::unique",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_unique",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::front",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_front",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  result = (void *)(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::back",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_back",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  result = (void *)(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< void * >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::resize",1,"ForwardList< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< void * >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_resize",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::clear",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_clear",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::reverse",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_reverse",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< void * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::size",1,"ForwardList< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_size",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< void * > *arg1 = (ForwardList< void * > *) 0 ;
  ForwardList< void * > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< void * >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< void * >::swap",1,"ForwardList< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< void * >::swap",2,"ForwardList< void * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_swap",1,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_void_p_t,0))){
    SWIG_fail_ptr("PtrForwardList_swap",2,SWIGTYPE_p_ForwardListT_void_p_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PtrForwardList(void *obj) {
ForwardList< void * > *arg1 = (ForwardList< void * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PtrForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PtrForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PtrForwardList_attributes[] = {
    { "l", _wrap_PtrForwardList_l_get, _wrap_PtrForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_PtrForwardList_methods[]= {
    { "__getitem", _wrap_PtrForwardList___getitem},
    { "__setitem", _wrap_PtrForwardList___setitem},
    { "insert_vector", _wrap_PtrForwardList_insert_vector},
    { "insert_at", _wrap_PtrForwardList_insert_at},
    { "remove_at", _wrap_PtrForwardList_remove_at},
    { "push_back", _wrap_PtrForwardList_push_back},
    { "push_front", _wrap_PtrForwardList_push_front},
    { "pop_back", _wrap_PtrForwardList_pop_back},
    { "pop_front", _wrap_PtrForwardList_pop_front},
    { "empty", _wrap_PtrForwardList_empty},
    { "max_size", _wrap_PtrForwardList_max_size},
    { "unique", _wrap_PtrForwardList_unique},
    { "front", _wrap_PtrForwardList_front},
    { "back", _wrap_PtrForwardList_back},
    { "resize", _wrap_PtrForwardList_resize},
    { "clear", _wrap_PtrForwardList_clear},
    { "reverse", _wrap_PtrForwardList_reverse},
    { "size", _wrap_PtrForwardList_size},
    { "swap", _wrap_PtrForwardList_swap},
    {0,0}
};
static swig_lua_method swig_PtrForwardList_meta[] = {
    { "__getitem", _wrap_PtrForwardList___getitem},
    { "__setitem", _wrap_PtrForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_PtrForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PtrForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PtrForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PtrForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PtrForwardList_Sf_SwigStatic = {
    "PtrForwardList",
    swig_PtrForwardList_Sf_SwigStatic_methods,
    swig_PtrForwardList_Sf_SwigStatic_attributes,
    swig_PtrForwardList_Sf_SwigStatic_constants,
    swig_PtrForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PtrForwardList_bases[] = {0};
static const char *swig_PtrForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_PtrForwardList = { "PtrForwardList", "PtrForwardList", &SWIGTYPE_p_ForwardListT_void_p_t,_proxy__wrap_new_PtrForwardList, swig_delete_PtrForwardList, swig_PtrForwardList_methods, swig_PtrForwardList_attributes, &swig_PtrForwardList_Sf_SwigStatic, swig_PtrForwardList_meta, swig_PtrForwardList_bases, swig_PtrForwardList_base_names };

static int _wrap_BasicForwardList_l_set(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  std::list< BasicType > arg2 ;
  std::list< BasicType > *argp2 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::l",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::l",1,"ForwardList< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< BasicType >::l",2,"std::list< BasicType >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_l_set",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__listT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_l_set",2,SWIGTYPE_p_std__listT_BasicType_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->l = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_l_get(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  std::list< BasicType > result;
  
  SWIG_check_num_args("ForwardList< BasicType >::l",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::l",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_l_get",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  result =  ((arg1)->l);
  {
    std::list< BasicType > * resultptr = new std::list< BasicType >((const std::list< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicForwardList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ForwardList< BasicType > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::ForwardList",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ForwardList< BasicType >::ForwardList",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ForwardList< BasicType > *)new ForwardList< BasicType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicForwardList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *result = 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::ForwardList",0,0)
  result = (ForwardList< BasicType > *)new ForwardList< BasicType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ForwardListT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicForwardList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BasicForwardList__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BasicForwardList__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BasicForwardList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ForwardList< BasicType >::ForwardList(size_t)\n"
    "    ForwardList< BasicType >::ForwardList()\n");
  lua_error(L);return 0;
}


static int _wrap_BasicForwardList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType result;
  
  SWIG_check_num_args("ForwardList< BasicType >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::__getitem",1,"ForwardList< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< BasicType >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList___getitem",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList___setitem(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType arg3 ;
  BasicType *argp3 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::__setitem",1,"ForwardList< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< BasicType >::__setitem",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< BasicType >::__setitem",3,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList___setitem",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicForwardList___setitem",3,SWIGTYPE_p_BasicType);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_insert_vector(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t arg2 ;
  Array< BasicType > *arg3 = 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::insert_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::insert_vector",1,"ForwardList< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< BasicType >::insert_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< BasicType >::insert_vector",3,"Array< BasicType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_insert_vector",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_insert_vector",3,SWIGTYPE_p_ArrayT_BasicType_t);
  }
  
  (arg1)->insert_vector(arg2,(Array< BasicType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType arg3 ;
  BasicType *argp3 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::insert_at",1,"ForwardList< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< BasicType >::insert_at",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ForwardList< BasicType >::insert_at",3,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_insert_at",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicForwardList_insert_at",3,SWIGTYPE_p_BasicType);
  }
  arg3 = *argp3;
  
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t arg2 ;
  BasicType result;
  
  SWIG_check_num_args("ForwardList< BasicType >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::remove_at",1,"ForwardList< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< BasicType >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_remove_at",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->remove_at(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_push_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  BasicType arg2 ;
  BasicType *argp2 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::push_back",1,"ForwardList< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< BasicType >::push_back",2,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_push_back",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicForwardList_push_back",2,SWIGTYPE_p_BasicType);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_push_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  BasicType arg2 ;
  BasicType *argp2 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::push_front",1,"ForwardList< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< BasicType >::push_front",2,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_push_front",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicForwardList_push_front",2,SWIGTYPE_p_BasicType);
  }
  arg2 = *argp2;
  
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::pop_back",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_pop_back",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::pop_front",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_pop_front",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  (arg1)->pop_front();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_empty(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("ForwardList< BasicType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::empty",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_empty",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_max_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< BasicType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::max_size",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_max_size",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_unique(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::unique",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_unique",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  (arg1)->unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_front(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  BasicType result;
  
  SWIG_check_num_args("ForwardList< BasicType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::front",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_front",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  result = (arg1)->front();
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_back(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  BasicType result;
  
  SWIG_check_num_args("ForwardList< BasicType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::back",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_back",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  result = (arg1)->back();
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_resize(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::resize",1,"ForwardList< BasicType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ForwardList< BasicType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_resize",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_clear(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::clear",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_clear",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_reverse(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::reverse",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_reverse",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_size(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ForwardList< BasicType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::size",1,"ForwardList< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_size",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicForwardList_swap(lua_State* L) {
  int SWIG_arg = 0;
  ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) 0 ;
  ForwardList< BasicType > *arg2 = 0 ;
  
  SWIG_check_num_args("ForwardList< BasicType >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ForwardList< BasicType >::swap",1,"ForwardList< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ForwardList< BasicType >::swap",2,"ForwardList< BasicType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_swap",1,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ForwardListT_BasicType_t,0))){
    SWIG_fail_ptr("BasicForwardList_swap",2,SWIGTYPE_p_ForwardListT_BasicType_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicForwardList(void *obj) {
ForwardList< BasicType > *arg1 = (ForwardList< BasicType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicForwardList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicForwardList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicForwardList_attributes[] = {
    { "l", _wrap_BasicForwardList_l_get, _wrap_BasicForwardList_l_set },
    {0,0,0}
};
static swig_lua_method swig_BasicForwardList_methods[]= {
    { "__getitem", _wrap_BasicForwardList___getitem},
    { "__setitem", _wrap_BasicForwardList___setitem},
    { "insert_vector", _wrap_BasicForwardList_insert_vector},
    { "insert_at", _wrap_BasicForwardList_insert_at},
    { "remove_at", _wrap_BasicForwardList_remove_at},
    { "push_back", _wrap_BasicForwardList_push_back},
    { "push_front", _wrap_BasicForwardList_push_front},
    { "pop_back", _wrap_BasicForwardList_pop_back},
    { "pop_front", _wrap_BasicForwardList_pop_front},
    { "empty", _wrap_BasicForwardList_empty},
    { "max_size", _wrap_BasicForwardList_max_size},
    { "unique", _wrap_BasicForwardList_unique},
    { "front", _wrap_BasicForwardList_front},
    { "back", _wrap_BasicForwardList_back},
    { "resize", _wrap_BasicForwardList_resize},
    { "clear", _wrap_BasicForwardList_clear},
    { "reverse", _wrap_BasicForwardList_reverse},
    { "size", _wrap_BasicForwardList_size},
    { "swap", _wrap_BasicForwardList_swap},
    {0,0}
};
static swig_lua_method swig_BasicForwardList_meta[] = {
    { "__getitem", _wrap_BasicForwardList___getitem},
    { "__setitem", _wrap_BasicForwardList___setitem},
    {0,0}
};

static swig_lua_attribute swig_BasicForwardList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicForwardList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicForwardList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicForwardList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicForwardList_Sf_SwigStatic = {
    "BasicForwardList",
    swig_BasicForwardList_Sf_SwigStatic_methods,
    swig_BasicForwardList_Sf_SwigStatic_attributes,
    swig_BasicForwardList_Sf_SwigStatic_constants,
    swig_BasicForwardList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicForwardList_bases[] = {0};
static const char *swig_BasicForwardList_base_names[] = {0};
static swig_lua_class _wrap_class_BasicForwardList = { "BasicForwardList", "BasicForwardList", &SWIGTYPE_p_ForwardListT_BasicType_t,_proxy__wrap_new_BasicForwardList, swig_delete_BasicForwardList, swig_BasicForwardList_methods, swig_BasicForwardList_attributes, &swig_BasicForwardList_Sf_SwigStatic, swig_BasicForwardList_meta, swig_BasicForwardList_bases, swig_BasicForwardList_base_names };

static int _wrap_FloatDeque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  std::deque< float > *arg2 = (std::deque< float > *) 0 ;
  
  SWIG_check_num_args("Deque< float >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::d",1,"Deque< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< float >::d",2,"std::deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_d_set",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_d_set",2,SWIGTYPE_p_std__dequeT_float_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  std::deque< float > *result = 0 ;
  
  SWIG_check_num_args("Deque< float >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::d",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_d_get",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (std::deque< float > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatDeque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *result = 0 ;
  
  SWIG_check_num_args("Deque< float >::Deque",0,0)
  result = (Deque< float > *)new Deque< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::size",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_size",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::max_size",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_max_size",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::resize",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_resize",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::empty",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_empty",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  
  SWIG_check_num_args("Deque< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::shrink_to_fit",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_shrink_to_fit",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Deque< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::__getitem",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque___getitem",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Deque< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::__setitem",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< float >::__setitem",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque___setitem",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Deque< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::at",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_at",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Deque< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::front",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_front",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Deque< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::back",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_back",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Deque< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::push_back",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::push_back",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_push_back",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Deque< float >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::push_front",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::push_front",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_push_front",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("Deque< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::pop_back",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_pop_back",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (float)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("Deque< float >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::pop_front",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_pop_front",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  result = (float)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Deque< float >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::insert_at",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< float >::insert_at",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_insert_at",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< float >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::remove_at",1,"Deque< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< float >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_remove_at",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDeque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< float > *arg1 = (Deque< float > *) 0 ;
  
  SWIG_check_num_args("Deque< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< float >::clear",1,"Deque< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_float_t,0))){
    SWIG_fail_ptr("FloatDeque_clear",1,SWIGTYPE_p_DequeT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatDeque(void *obj) {
Deque< float > *arg1 = (Deque< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatDeque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatDeque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatDeque_attributes[] = {
    { "d", _wrap_FloatDeque_d_get, _wrap_FloatDeque_d_set },
    {0,0,0}
};
static swig_lua_method swig_FloatDeque_methods[]= {
    { "size", _wrap_FloatDeque_size},
    { "max_size", _wrap_FloatDeque_max_size},
    { "resize", _wrap_FloatDeque_resize},
    { "empty", _wrap_FloatDeque_empty},
    { "shrink_to_fit", _wrap_FloatDeque_shrink_to_fit},
    { "__getitem", _wrap_FloatDeque___getitem},
    { "__setitem", _wrap_FloatDeque___setitem},
    { "at", _wrap_FloatDeque_at},
    { "front", _wrap_FloatDeque_front},
    { "back", _wrap_FloatDeque_back},
    { "push_back", _wrap_FloatDeque_push_back},
    { "push_front", _wrap_FloatDeque_push_front},
    { "pop_back", _wrap_FloatDeque_pop_back},
    { "pop_front", _wrap_FloatDeque_pop_front},
    { "insert_at", _wrap_FloatDeque_insert_at},
    { "remove_at", _wrap_FloatDeque_remove_at},
    { "clear", _wrap_FloatDeque_clear},
    {0,0}
};
static swig_lua_method swig_FloatDeque_meta[] = {
    { "__getitem", _wrap_FloatDeque___getitem},
    { "__setitem", _wrap_FloatDeque___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatDeque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatDeque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatDeque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatDeque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatDeque_Sf_SwigStatic = {
    "FloatDeque",
    swig_FloatDeque_Sf_SwigStatic_methods,
    swig_FloatDeque_Sf_SwigStatic_attributes,
    swig_FloatDeque_Sf_SwigStatic_constants,
    swig_FloatDeque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatDeque_bases[] = {0};
static const char *swig_FloatDeque_base_names[] = {0};
static swig_lua_class _wrap_class_FloatDeque = { "FloatDeque", "FloatDeque", &SWIGTYPE_p_DequeT_float_t,_proxy__wrap_new_FloatDeque, swig_delete_FloatDeque, swig_FloatDeque_methods, swig_FloatDeque_attributes, &swig_FloatDeque_Sf_SwigStatic, swig_FloatDeque_meta, swig_FloatDeque_bases, swig_FloatDeque_base_names };

static int _wrap_DoubleDeque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  std::deque< double > *arg2 = (std::deque< double > *) 0 ;
  
  SWIG_check_num_args("Deque< double >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::d",1,"Deque< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< double >::d",2,"std::deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_d_set",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_d_set",2,SWIGTYPE_p_std__dequeT_double_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  std::deque< double > *result = 0 ;
  
  SWIG_check_num_args("Deque< double >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::d",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_d_get",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (std::deque< double > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleDeque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *result = 0 ;
  
  SWIG_check_num_args("Deque< double >::Deque",0,0)
  result = (Deque< double > *)new Deque< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::size",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_size",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::max_size",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_max_size",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::resize",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_resize",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::empty",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_empty",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  
  SWIG_check_num_args("Deque< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::shrink_to_fit",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_shrink_to_fit",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Deque< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::__getitem",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque___getitem",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Deque< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::__setitem",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< double >::__setitem",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque___setitem",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Deque< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::at",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_at",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Deque< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::front",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_front",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Deque< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::back",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_back",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Deque< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::push_back",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::push_back",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_push_back",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Deque< double >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::push_front",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::push_front",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_push_front",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("Deque< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::pop_back",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_pop_back",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (double)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("Deque< double >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::pop_front",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_pop_front",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  result = (double)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Deque< double >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::insert_at",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< double >::insert_at",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_insert_at",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< double >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::remove_at",1,"Deque< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< double >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_remove_at",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleDeque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< double > *arg1 = (Deque< double > *) 0 ;
  
  SWIG_check_num_args("Deque< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< double >::clear",1,"Deque< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_double_t,0))){
    SWIG_fail_ptr("DoubleDeque_clear",1,SWIGTYPE_p_DequeT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleDeque(void *obj) {
Deque< double > *arg1 = (Deque< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleDeque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleDeque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleDeque_attributes[] = {
    { "d", _wrap_DoubleDeque_d_get, _wrap_DoubleDeque_d_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleDeque_methods[]= {
    { "size", _wrap_DoubleDeque_size},
    { "max_size", _wrap_DoubleDeque_max_size},
    { "resize", _wrap_DoubleDeque_resize},
    { "empty", _wrap_DoubleDeque_empty},
    { "shrink_to_fit", _wrap_DoubleDeque_shrink_to_fit},
    { "__getitem", _wrap_DoubleDeque___getitem},
    { "__setitem", _wrap_DoubleDeque___setitem},
    { "at", _wrap_DoubleDeque_at},
    { "front", _wrap_DoubleDeque_front},
    { "back", _wrap_DoubleDeque_back},
    { "push_back", _wrap_DoubleDeque_push_back},
    { "push_front", _wrap_DoubleDeque_push_front},
    { "pop_back", _wrap_DoubleDeque_pop_back},
    { "pop_front", _wrap_DoubleDeque_pop_front},
    { "insert_at", _wrap_DoubleDeque_insert_at},
    { "remove_at", _wrap_DoubleDeque_remove_at},
    { "clear", _wrap_DoubleDeque_clear},
    {0,0}
};
static swig_lua_method swig_DoubleDeque_meta[] = {
    { "__getitem", _wrap_DoubleDeque___getitem},
    { "__setitem", _wrap_DoubleDeque___setitem},
    {0,0}
};

static swig_lua_attribute swig_DoubleDeque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleDeque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleDeque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleDeque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleDeque_Sf_SwigStatic = {
    "DoubleDeque",
    swig_DoubleDeque_Sf_SwigStatic_methods,
    swig_DoubleDeque_Sf_SwigStatic_attributes,
    swig_DoubleDeque_Sf_SwigStatic_constants,
    swig_DoubleDeque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleDeque_bases[] = {0};
static const char *swig_DoubleDeque_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleDeque = { "DoubleDeque", "DoubleDeque", &SWIGTYPE_p_DequeT_double_t,_proxy__wrap_new_DoubleDeque, swig_delete_DoubleDeque, swig_DoubleDeque_methods, swig_DoubleDeque_attributes, &swig_DoubleDeque_Sf_SwigStatic, swig_DoubleDeque_meta, swig_DoubleDeque_bases, swig_DoubleDeque_base_names };

static int _wrap_Int8Deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  std::deque< signed char > *arg2 = (std::deque< signed char > *) 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::d",1,"Deque< int8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< int8_t >::d",2,"std::deque< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_d_set",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_d_set",2,SWIGTYPE_p_std__dequeT_signed_char_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  std::deque< signed char > *result = 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::d",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_d_get",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (std::deque< signed char > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::Deque",0,0)
  result = (Deque< int8_t > *)new Deque< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::size",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_size",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< int8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::max_size",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_max_size",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< int8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::resize",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_resize",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::empty",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_empty",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::shrink_to_fit",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t arg2 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::__getitem",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque___getitem",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("Deque< int8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::__setitem",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< int8_t >::__setitem",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque___setitem",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t arg2 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::at",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_at",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::front",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_front",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::back",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_back",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("Deque< int8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::push_back",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::push_back",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_push_back",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("Deque< int8_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::push_front",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::push_front",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_push_front",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("Deque< int8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::pop_back",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_pop_back",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (signed char)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("Deque< int8_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::pop_front",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_pop_front",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  result = (signed char)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("Deque< int8_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::insert_at",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< int8_t >::insert_at",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_insert_at",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< int8_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::remove_at",1,"Deque< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int8_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_remove_at",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int8_t > *arg1 = (Deque< int8_t > *) 0 ;
  
  SWIG_check_num_args("Deque< int8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int8_t >::clear",1,"Deque< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Deque_clear",1,SWIGTYPE_p_DequeT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Deque(void *obj) {
Deque< int8_t > *arg1 = (Deque< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Deque_attributes[] = {
    { "d", _wrap_Int8Deque_d_get, _wrap_Int8Deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Deque_methods[]= {
    { "size", _wrap_Int8Deque_size},
    { "max_size", _wrap_Int8Deque_max_size},
    { "resize", _wrap_Int8Deque_resize},
    { "empty", _wrap_Int8Deque_empty},
    { "shrink_to_fit", _wrap_Int8Deque_shrink_to_fit},
    { "__getitem", _wrap_Int8Deque___getitem},
    { "__setitem", _wrap_Int8Deque___setitem},
    { "at", _wrap_Int8Deque_at},
    { "front", _wrap_Int8Deque_front},
    { "back", _wrap_Int8Deque_back},
    { "push_back", _wrap_Int8Deque_push_back},
    { "push_front", _wrap_Int8Deque_push_front},
    { "pop_back", _wrap_Int8Deque_pop_back},
    { "pop_front", _wrap_Int8Deque_pop_front},
    { "insert_at", _wrap_Int8Deque_insert_at},
    { "remove_at", _wrap_Int8Deque_remove_at},
    { "clear", _wrap_Int8Deque_clear},
    {0,0}
};
static swig_lua_method swig_Int8Deque_meta[] = {
    { "__getitem", _wrap_Int8Deque___getitem},
    { "__setitem", _wrap_Int8Deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int8Deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Deque_Sf_SwigStatic = {
    "Int8Deque",
    swig_Int8Deque_Sf_SwigStatic_methods,
    swig_Int8Deque_Sf_SwigStatic_attributes,
    swig_Int8Deque_Sf_SwigStatic_constants,
    swig_Int8Deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Deque_bases[] = {0};
static const char *swig_Int8Deque_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Deque = { "Int8Deque", "Int8Deque", &SWIGTYPE_p_DequeT_signed_char_t,_proxy__wrap_new_Int8Deque, swig_delete_Int8Deque, swig_Int8Deque_methods, swig_Int8Deque_attributes, &swig_Int8Deque_Sf_SwigStatic, swig_Int8Deque_meta, swig_Int8Deque_bases, swig_Int8Deque_base_names };

static int _wrap_UInt8deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  std::deque< unsigned char > *arg2 = (std::deque< unsigned char > *) 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::d",1,"Deque< uint8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< uint8_t >::d",2,"std::deque< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_d_set",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_d_set",2,SWIGTYPE_p_std__dequeT_unsigned_char_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  std::deque< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::d",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_d_get",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (std::deque< unsigned char > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::Deque",0,0)
  result = (Deque< uint8_t > *)new Deque< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::size",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_size",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< uint8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::max_size",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_max_size",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< uint8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::resize",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_resize",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::empty",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_empty",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::shrink_to_fit",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::__getitem",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque___getitem",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("Deque< uint8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::__setitem",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< uint8_t >::__setitem",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque___setitem",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::at",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_at",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::front",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_front",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::back",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_back",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Deque< uint8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::push_back",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::push_back",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_push_back",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Deque< uint8_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::push_front",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::push_front",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_push_front",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Deque< uint8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::pop_back",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_pop_back",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Deque< uint8_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::pop_front",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_pop_front",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("Deque< uint8_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::insert_at",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< uint8_t >::insert_at",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_insert_at",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< uint8_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::remove_at",1,"Deque< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint8_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_remove_at",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint8_t > *arg1 = (Deque< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Deque< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint8_t >::clear",1,"Deque< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8deque_clear",1,SWIGTYPE_p_DequeT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8deque(void *obj) {
Deque< uint8_t > *arg1 = (Deque< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8deque_attributes[] = {
    { "d", _wrap_UInt8deque_d_get, _wrap_UInt8deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8deque_methods[]= {
    { "size", _wrap_UInt8deque_size},
    { "max_size", _wrap_UInt8deque_max_size},
    { "resize", _wrap_UInt8deque_resize},
    { "empty", _wrap_UInt8deque_empty},
    { "shrink_to_fit", _wrap_UInt8deque_shrink_to_fit},
    { "__getitem", _wrap_UInt8deque___getitem},
    { "__setitem", _wrap_UInt8deque___setitem},
    { "at", _wrap_UInt8deque_at},
    { "front", _wrap_UInt8deque_front},
    { "back", _wrap_UInt8deque_back},
    { "push_back", _wrap_UInt8deque_push_back},
    { "push_front", _wrap_UInt8deque_push_front},
    { "pop_back", _wrap_UInt8deque_pop_back},
    { "pop_front", _wrap_UInt8deque_pop_front},
    { "insert_at", _wrap_UInt8deque_insert_at},
    { "remove_at", _wrap_UInt8deque_remove_at},
    { "clear", _wrap_UInt8deque_clear},
    {0,0}
};
static swig_lua_method swig_UInt8deque_meta[] = {
    { "__getitem", _wrap_UInt8deque___getitem},
    { "__setitem", _wrap_UInt8deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt8deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8deque_Sf_SwigStatic = {
    "UInt8deque",
    swig_UInt8deque_Sf_SwigStatic_methods,
    swig_UInt8deque_Sf_SwigStatic_attributes,
    swig_UInt8deque_Sf_SwigStatic_constants,
    swig_UInt8deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8deque_bases[] = {0};
static const char *swig_UInt8deque_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8deque = { "UInt8deque", "UInt8deque", &SWIGTYPE_p_DequeT_unsigned_char_t,_proxy__wrap_new_UInt8deque, swig_delete_UInt8deque, swig_UInt8deque_methods, swig_UInt8deque_attributes, &swig_UInt8deque_Sf_SwigStatic, swig_UInt8deque_meta, swig_UInt8deque_bases, swig_UInt8deque_base_names };

static int _wrap_Int16Deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  std::deque< short > *arg2 = (std::deque< short > *) 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::d",1,"Deque< int16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< int16_t >::d",2,"std::deque< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_d_set",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_d_set",2,SWIGTYPE_p_std__dequeT_short_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  std::deque< short > *result = 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::d",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_d_get",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (std::deque< short > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::Deque",0,0)
  result = (Deque< int16_t > *)new Deque< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::size",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_size",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< int16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::max_size",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_max_size",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< int16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::resize",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_resize",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::empty",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_empty",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::shrink_to_fit",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::__getitem",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque___getitem",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("Deque< int16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::__setitem",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< int16_t >::__setitem",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque___setitem",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::at",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_at",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::front",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_front",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::back",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_back",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("Deque< int16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::push_back",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::push_back",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_push_back",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("Deque< int16_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::push_front",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::push_front",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_push_front",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("Deque< int16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::pop_back",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_pop_back",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (short)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("Deque< int16_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::pop_front",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_pop_front",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  result = (short)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("Deque< int16_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::insert_at",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< int16_t >::insert_at",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_insert_at",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< int16_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::remove_at",1,"Deque< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int16_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_remove_at",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int16_t > *arg1 = (Deque< int16_t > *) 0 ;
  
  SWIG_check_num_args("Deque< int16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int16_t >::clear",1,"Deque< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_short_t,0))){
    SWIG_fail_ptr("Int16Deque_clear",1,SWIGTYPE_p_DequeT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Deque(void *obj) {
Deque< int16_t > *arg1 = (Deque< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Deque_attributes[] = {
    { "d", _wrap_Int16Deque_d_get, _wrap_Int16Deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Deque_methods[]= {
    { "size", _wrap_Int16Deque_size},
    { "max_size", _wrap_Int16Deque_max_size},
    { "resize", _wrap_Int16Deque_resize},
    { "empty", _wrap_Int16Deque_empty},
    { "shrink_to_fit", _wrap_Int16Deque_shrink_to_fit},
    { "__getitem", _wrap_Int16Deque___getitem},
    { "__setitem", _wrap_Int16Deque___setitem},
    { "at", _wrap_Int16Deque_at},
    { "front", _wrap_Int16Deque_front},
    { "back", _wrap_Int16Deque_back},
    { "push_back", _wrap_Int16Deque_push_back},
    { "push_front", _wrap_Int16Deque_push_front},
    { "pop_back", _wrap_Int16Deque_pop_back},
    { "pop_front", _wrap_Int16Deque_pop_front},
    { "insert_at", _wrap_Int16Deque_insert_at},
    { "remove_at", _wrap_Int16Deque_remove_at},
    { "clear", _wrap_Int16Deque_clear},
    {0,0}
};
static swig_lua_method swig_Int16Deque_meta[] = {
    { "__getitem", _wrap_Int16Deque___getitem},
    { "__setitem", _wrap_Int16Deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int16Deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Deque_Sf_SwigStatic = {
    "Int16Deque",
    swig_Int16Deque_Sf_SwigStatic_methods,
    swig_Int16Deque_Sf_SwigStatic_attributes,
    swig_Int16Deque_Sf_SwigStatic_constants,
    swig_Int16Deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Deque_bases[] = {0};
static const char *swig_Int16Deque_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Deque = { "Int16Deque", "Int16Deque", &SWIGTYPE_p_DequeT_short_t,_proxy__wrap_new_Int16Deque, swig_delete_Int16Deque, swig_Int16Deque_methods, swig_Int16Deque_attributes, &swig_Int16Deque_Sf_SwigStatic, swig_Int16Deque_meta, swig_Int16Deque_bases, swig_Int16Deque_base_names };

static int _wrap_UInt16Deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  std::deque< unsigned short > *arg2 = (std::deque< unsigned short > *) 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::d",1,"Deque< uint16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< uint16_t >::d",2,"std::deque< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_d_set",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_d_set",2,SWIGTYPE_p_std__dequeT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  std::deque< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::d",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_d_get",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (std::deque< unsigned short > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::Deque",0,0)
  result = (Deque< uint16_t > *)new Deque< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::size",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_size",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< uint16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::max_size",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_max_size",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< uint16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::resize",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_resize",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::empty",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_empty",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::shrink_to_fit",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::__getitem",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque___getitem",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("Deque< uint16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::__setitem",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< uint16_t >::__setitem",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque___setitem",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::at",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_at",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::front",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_front",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::back",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_back",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("Deque< uint16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::push_back",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::push_back",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_push_back",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("Deque< uint16_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::push_front",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::push_front",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_push_front",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("Deque< uint16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::pop_back",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_pop_back",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("Deque< uint16_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::pop_front",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_pop_front",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("Deque< uint16_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::insert_at",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< uint16_t >::insert_at",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_insert_at",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< uint16_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::remove_at",1,"Deque< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint16_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_remove_at",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint16_t > *arg1 = (Deque< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Deque< uint16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint16_t >::clear",1,"Deque< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Deque_clear",1,SWIGTYPE_p_DequeT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Deque(void *obj) {
Deque< uint16_t > *arg1 = (Deque< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Deque_attributes[] = {
    { "d", _wrap_UInt16Deque_d_get, _wrap_UInt16Deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Deque_methods[]= {
    { "size", _wrap_UInt16Deque_size},
    { "max_size", _wrap_UInt16Deque_max_size},
    { "resize", _wrap_UInt16Deque_resize},
    { "empty", _wrap_UInt16Deque_empty},
    { "shrink_to_fit", _wrap_UInt16Deque_shrink_to_fit},
    { "__getitem", _wrap_UInt16Deque___getitem},
    { "__setitem", _wrap_UInt16Deque___setitem},
    { "at", _wrap_UInt16Deque_at},
    { "front", _wrap_UInt16Deque_front},
    { "back", _wrap_UInt16Deque_back},
    { "push_back", _wrap_UInt16Deque_push_back},
    { "push_front", _wrap_UInt16Deque_push_front},
    { "pop_back", _wrap_UInt16Deque_pop_back},
    { "pop_front", _wrap_UInt16Deque_pop_front},
    { "insert_at", _wrap_UInt16Deque_insert_at},
    { "remove_at", _wrap_UInt16Deque_remove_at},
    { "clear", _wrap_UInt16Deque_clear},
    {0,0}
};
static swig_lua_method swig_UInt16Deque_meta[] = {
    { "__getitem", _wrap_UInt16Deque___getitem},
    { "__setitem", _wrap_UInt16Deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt16Deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Deque_Sf_SwigStatic = {
    "UInt16Deque",
    swig_UInt16Deque_Sf_SwigStatic_methods,
    swig_UInt16Deque_Sf_SwigStatic_attributes,
    swig_UInt16Deque_Sf_SwigStatic_constants,
    swig_UInt16Deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Deque_bases[] = {0};
static const char *swig_UInt16Deque_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Deque = { "UInt16Deque", "UInt16Deque", &SWIGTYPE_p_DequeT_unsigned_short_t,_proxy__wrap_new_UInt16Deque, swig_delete_UInt16Deque, swig_UInt16Deque_methods, swig_UInt16Deque_attributes, &swig_UInt16Deque_Sf_SwigStatic, swig_UInt16Deque_meta, swig_UInt16Deque_bases, swig_UInt16Deque_base_names };

static int _wrap_Int32Deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  std::deque< int > *arg2 = (std::deque< int > *) 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::d",1,"Deque< int32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< int32_t >::d",2,"std::deque< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_d_set",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_d_set",2,SWIGTYPE_p_std__dequeT_int_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  std::deque< int > *result = 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::d",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_d_get",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (std::deque< int > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::Deque",0,0)
  result = (Deque< int32_t > *)new Deque< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::size",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_size",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< int32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::max_size",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_max_size",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< int32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::resize",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_resize",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::empty",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_empty",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::shrink_to_fit",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::__getitem",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque___getitem",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Deque< int32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::__setitem",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< int32_t >::__setitem",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque___setitem",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::at",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_at",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::front",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_front",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::back",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_back",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Deque< int32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::push_back",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::push_back",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_push_back",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Deque< int32_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::push_front",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::push_front",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_push_front",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("Deque< int32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::pop_back",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_pop_back",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (int)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("Deque< int32_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::pop_front",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_pop_front",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  result = (int)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Deque< int32_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::insert_at",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< int32_t >::insert_at",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_insert_at",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< int32_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::remove_at",1,"Deque< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< int32_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_remove_at",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< int32_t > *arg1 = (Deque< int32_t > *) 0 ;
  
  SWIG_check_num_args("Deque< int32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< int32_t >::clear",1,"Deque< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_int_t,0))){
    SWIG_fail_ptr("Int32Deque_clear",1,SWIGTYPE_p_DequeT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Deque(void *obj) {
Deque< int32_t > *arg1 = (Deque< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Deque_attributes[] = {
    { "d", _wrap_Int32Deque_d_get, _wrap_Int32Deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Deque_methods[]= {
    { "size", _wrap_Int32Deque_size},
    { "max_size", _wrap_Int32Deque_max_size},
    { "resize", _wrap_Int32Deque_resize},
    { "empty", _wrap_Int32Deque_empty},
    { "shrink_to_fit", _wrap_Int32Deque_shrink_to_fit},
    { "__getitem", _wrap_Int32Deque___getitem},
    { "__setitem", _wrap_Int32Deque___setitem},
    { "at", _wrap_Int32Deque_at},
    { "front", _wrap_Int32Deque_front},
    { "back", _wrap_Int32Deque_back},
    { "push_back", _wrap_Int32Deque_push_back},
    { "push_front", _wrap_Int32Deque_push_front},
    { "pop_back", _wrap_Int32Deque_pop_back},
    { "pop_front", _wrap_Int32Deque_pop_front},
    { "insert_at", _wrap_Int32Deque_insert_at},
    { "remove_at", _wrap_Int32Deque_remove_at},
    { "clear", _wrap_Int32Deque_clear},
    {0,0}
};
static swig_lua_method swig_Int32Deque_meta[] = {
    { "__getitem", _wrap_Int32Deque___getitem},
    { "__setitem", _wrap_Int32Deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int32Deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Deque_Sf_SwigStatic = {
    "Int32Deque",
    swig_Int32Deque_Sf_SwigStatic_methods,
    swig_Int32Deque_Sf_SwigStatic_attributes,
    swig_Int32Deque_Sf_SwigStatic_constants,
    swig_Int32Deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Deque_bases[] = {0};
static const char *swig_Int32Deque_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Deque = { "Int32Deque", "Int32Deque", &SWIGTYPE_p_DequeT_int_t,_proxy__wrap_new_Int32Deque, swig_delete_Int32Deque, swig_Int32Deque_methods, swig_Int32Deque_attributes, &swig_Int32Deque_Sf_SwigStatic, swig_Int32Deque_meta, swig_Int32Deque_bases, swig_Int32Deque_base_names };

static int _wrap_UInt32Deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  std::deque< unsigned int > *arg2 = (std::deque< unsigned int > *) 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::d",1,"Deque< uint32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< uint32_t >::d",2,"std::deque< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_d_set",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_d_set",2,SWIGTYPE_p_std__dequeT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  std::deque< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::d",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_d_get",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (std::deque< unsigned int > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::Deque",0,0)
  result = (Deque< uint32_t > *)new Deque< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::size",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_size",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< uint32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::max_size",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_max_size",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< uint32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::resize",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_resize",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::empty",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_empty",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::shrink_to_fit",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::__getitem",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque___getitem",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Deque< uint32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::__setitem",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< uint32_t >::__setitem",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque___setitem",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::at",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_at",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::front",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_front",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::back",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_back",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Deque< uint32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::push_back",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::push_back",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_push_back",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Deque< uint32_t >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::push_front",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::push_front",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_push_front",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Deque< uint32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::pop_back",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_pop_back",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Deque< uint32_t >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::pop_front",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_pop_front",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Deque< uint32_t >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::insert_at",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< uint32_t >::insert_at",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_insert_at",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< uint32_t >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::remove_at",1,"Deque< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< uint32_t >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_remove_at",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< uint32_t > *arg1 = (Deque< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Deque< uint32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< uint32_t >::clear",1,"Deque< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Deque_clear",1,SWIGTYPE_p_DequeT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Deque(void *obj) {
Deque< uint32_t > *arg1 = (Deque< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Deque_attributes[] = {
    { "d", _wrap_UInt32Deque_d_get, _wrap_UInt32Deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Deque_methods[]= {
    { "size", _wrap_UInt32Deque_size},
    { "max_size", _wrap_UInt32Deque_max_size},
    { "resize", _wrap_UInt32Deque_resize},
    { "empty", _wrap_UInt32Deque_empty},
    { "shrink_to_fit", _wrap_UInt32Deque_shrink_to_fit},
    { "__getitem", _wrap_UInt32Deque___getitem},
    { "__setitem", _wrap_UInt32Deque___setitem},
    { "at", _wrap_UInt32Deque_at},
    { "front", _wrap_UInt32Deque_front},
    { "back", _wrap_UInt32Deque_back},
    { "push_back", _wrap_UInt32Deque_push_back},
    { "push_front", _wrap_UInt32Deque_push_front},
    { "pop_back", _wrap_UInt32Deque_pop_back},
    { "pop_front", _wrap_UInt32Deque_pop_front},
    { "insert_at", _wrap_UInt32Deque_insert_at},
    { "remove_at", _wrap_UInt32Deque_remove_at},
    { "clear", _wrap_UInt32Deque_clear},
    {0,0}
};
static swig_lua_method swig_UInt32Deque_meta[] = {
    { "__getitem", _wrap_UInt32Deque___getitem},
    { "__setitem", _wrap_UInt32Deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt32Deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Deque_Sf_SwigStatic = {
    "UInt32Deque",
    swig_UInt32Deque_Sf_SwigStatic_methods,
    swig_UInt32Deque_Sf_SwigStatic_attributes,
    swig_UInt32Deque_Sf_SwigStatic_constants,
    swig_UInt32Deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Deque_bases[] = {0};
static const char *swig_UInt32Deque_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Deque = { "UInt32Deque", "UInt32Deque", &SWIGTYPE_p_DequeT_unsigned_int_t,_proxy__wrap_new_UInt32Deque, swig_delete_UInt32Deque, swig_UInt32Deque_methods, swig_UInt32Deque_attributes, &swig_UInt32Deque_Sf_SwigStatic, swig_UInt32Deque_meta, swig_UInt32Deque_bases, swig_UInt32Deque_base_names };

static int _wrap_Int64Deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  std::deque< long long > *arg2 = (std::deque< long long > *) 0 ;
  
  SWIG_check_num_args("Deque< long long >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::d",1,"Deque< long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< long long >::d",2,"std::deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_d_set",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_d_set",2,SWIGTYPE_p_std__dequeT_long_long_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  std::deque< long long > *result = 0 ;
  
  SWIG_check_num_args("Deque< long long >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::d",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_d_get",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (std::deque< long long > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *result = 0 ;
  
  SWIG_check_num_args("Deque< long long >::Deque",0,0)
  result = (Deque< long long > *)new Deque< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::size",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_size",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::max_size",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_max_size",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::resize",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_resize",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::empty",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_empty",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  
  SWIG_check_num_args("Deque< long long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::shrink_to_fit",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t arg2 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Deque< long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::__getitem",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque___getitem",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("Deque< long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::__setitem",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< long long >::__setitem",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque___setitem",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t arg2 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Deque< long long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::at",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_at",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Deque< long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::front",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_front",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Deque< long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::back",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_back",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("Deque< long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::push_back",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::push_back",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_push_back",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("Deque< long long >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::push_front",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::push_front",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_push_front",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("Deque< long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::pop_back",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_pop_back",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (long long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("Deque< long long >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::pop_front",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_pop_front",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  result = (long long)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("Deque< long long >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::insert_at",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< long long >::insert_at",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_insert_at",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< long long >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::remove_at",1,"Deque< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< long long >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_remove_at",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< long long > *arg1 = (Deque< long long > *) 0 ;
  
  SWIG_check_num_args("Deque< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< long long >::clear",1,"Deque< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_long_long_t,0))){
    SWIG_fail_ptr("Int64Deque_clear",1,SWIGTYPE_p_DequeT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Deque(void *obj) {
Deque< long long > *arg1 = (Deque< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Deque_attributes[] = {
    { "d", _wrap_Int64Deque_d_get, _wrap_Int64Deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Deque_methods[]= {
    { "size", _wrap_Int64Deque_size},
    { "max_size", _wrap_Int64Deque_max_size},
    { "resize", _wrap_Int64Deque_resize},
    { "empty", _wrap_Int64Deque_empty},
    { "shrink_to_fit", _wrap_Int64Deque_shrink_to_fit},
    { "__getitem", _wrap_Int64Deque___getitem},
    { "__setitem", _wrap_Int64Deque___setitem},
    { "at", _wrap_Int64Deque_at},
    { "front", _wrap_Int64Deque_front},
    { "back", _wrap_Int64Deque_back},
    { "push_back", _wrap_Int64Deque_push_back},
    { "push_front", _wrap_Int64Deque_push_front},
    { "pop_back", _wrap_Int64Deque_pop_back},
    { "pop_front", _wrap_Int64Deque_pop_front},
    { "insert_at", _wrap_Int64Deque_insert_at},
    { "remove_at", _wrap_Int64Deque_remove_at},
    { "clear", _wrap_Int64Deque_clear},
    {0,0}
};
static swig_lua_method swig_Int64Deque_meta[] = {
    { "__getitem", _wrap_Int64Deque___getitem},
    { "__setitem", _wrap_Int64Deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int64Deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Deque_Sf_SwigStatic = {
    "Int64Deque",
    swig_Int64Deque_Sf_SwigStatic_methods,
    swig_Int64Deque_Sf_SwigStatic_attributes,
    swig_Int64Deque_Sf_SwigStatic_constants,
    swig_Int64Deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Deque_bases[] = {0};
static const char *swig_Int64Deque_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Deque = { "Int64Deque", "Int64Deque", &SWIGTYPE_p_DequeT_long_long_t,_proxy__wrap_new_Int64Deque, swig_delete_Int64Deque, swig_Int64Deque_methods, swig_Int64Deque_attributes, &swig_Int64Deque_Sf_SwigStatic, swig_Int64Deque_meta, swig_Int64Deque_bases, swig_Int64Deque_base_names };

static int _wrap_UInt64Deque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  std::deque< unsigned long long > *arg2 = (std::deque< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::d",1,"Deque< unsigned long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< unsigned long long >::d",2,"std::deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_d_set",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_d_set",2,SWIGTYPE_p_std__dequeT_unsigned_long_long_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  std::deque< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::d",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_d_get",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (std::deque< unsigned long long > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Deque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::Deque",0,0)
  result = (Deque< unsigned long long > *)new Deque< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::size",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_size",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< unsigned long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::max_size",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_max_size",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::resize",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_resize",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::empty",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_empty",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::shrink_to_fit",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_shrink_to_fit",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::__getitem",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque___getitem",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::__setitem",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< unsigned long long >::__setitem",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque___setitem",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::at",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_at",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::front",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_front",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::back",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_back",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::push_back",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::push_back",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_push_back",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::push_front",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::push_front",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_push_front",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("Deque< unsigned long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::pop_back",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_pop_back",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("Deque< unsigned long long >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::pop_front",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_pop_front",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->pop_front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::insert_at",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::insert_at",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Deque< unsigned long long >::insert_at",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_insert_at",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::remove_at",1,"Deque< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< unsigned long long >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_remove_at",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Deque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Deque< unsigned long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< unsigned long long >::clear",1,"Deque< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Deque_clear",1,SWIGTYPE_p_DequeT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Deque(void *obj) {
Deque< unsigned long long > *arg1 = (Deque< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Deque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Deque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Deque_attributes[] = {
    { "d", _wrap_UInt64Deque_d_get, _wrap_UInt64Deque_d_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Deque_methods[]= {
    { "size", _wrap_UInt64Deque_size},
    { "max_size", _wrap_UInt64Deque_max_size},
    { "resize", _wrap_UInt64Deque_resize},
    { "empty", _wrap_UInt64Deque_empty},
    { "shrink_to_fit", _wrap_UInt64Deque_shrink_to_fit},
    { "__getitem", _wrap_UInt64Deque___getitem},
    { "__setitem", _wrap_UInt64Deque___setitem},
    { "at", _wrap_UInt64Deque_at},
    { "front", _wrap_UInt64Deque_front},
    { "back", _wrap_UInt64Deque_back},
    { "push_back", _wrap_UInt64Deque_push_back},
    { "push_front", _wrap_UInt64Deque_push_front},
    { "pop_back", _wrap_UInt64Deque_pop_back},
    { "pop_front", _wrap_UInt64Deque_pop_front},
    { "insert_at", _wrap_UInt64Deque_insert_at},
    { "remove_at", _wrap_UInt64Deque_remove_at},
    { "clear", _wrap_UInt64Deque_clear},
    {0,0}
};
static swig_lua_method swig_UInt64Deque_meta[] = {
    { "__getitem", _wrap_UInt64Deque___getitem},
    { "__setitem", _wrap_UInt64Deque___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt64Deque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Deque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Deque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Deque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Deque_Sf_SwigStatic = {
    "UInt64Deque",
    swig_UInt64Deque_Sf_SwigStatic_methods,
    swig_UInt64Deque_Sf_SwigStatic_attributes,
    swig_UInt64Deque_Sf_SwigStatic_constants,
    swig_UInt64Deque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Deque_bases[] = {0};
static const char *swig_UInt64Deque_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Deque = { "UInt64Deque", "UInt64Deque", &SWIGTYPE_p_DequeT_unsigned_long_long_t,_proxy__wrap_new_UInt64Deque, swig_delete_UInt64Deque, swig_UInt64Deque_methods, swig_UInt64Deque_attributes, &swig_UInt64Deque_Sf_SwigStatic, swig_UInt64Deque_meta, swig_UInt64Deque_bases, swig_UInt64Deque_base_names };

static int _wrap_StringDeque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  std::deque< std::string > *arg2 = (std::deque< std::string > *) 0 ;
  
  SWIG_check_num_args("Deque< string >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::d",1,"Deque< string > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< string >::d",2,"std::deque< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_d_set",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_std__string_t,0))){
    SWIG_fail_ptr("StringDeque_d_set",2,SWIGTYPE_p_std__dequeT_std__string_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  std::deque< std::string > *result = 0 ;
  
  SWIG_check_num_args("Deque< string >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::d",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_d_get",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (std::deque< std::string > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringDeque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *result = 0 ;
  
  SWIG_check_num_args("Deque< string >::Deque",0,0)
  result = (Deque< string > *)new Deque< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::size",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_size",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::max_size",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_max_size",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< string >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::resize",1,"Deque< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< string >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_resize",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::empty",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_empty",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  
  SWIG_check_num_args("Deque< string >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::shrink_to_fit",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_shrink_to_fit",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t arg2 ;
  string *result = 0 ;
  
  SWIG_check_num_args("Deque< string >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::__getitem",1,"Deque< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< string >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque___getitem",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (string *) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("Deque< string >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::__setitem",1,"Deque< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< string >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Deque< string >::__setitem",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque___setitem",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringDeque___setitem",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t arg2 ;
  string *result = 0 ;
  
  SWIG_check_num_args("Deque< string >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::at",1,"Deque< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< string >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_at",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (string *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  string *result = 0 ;
  
  SWIG_check_num_args("Deque< string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::front",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_front",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (string *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  string *result = 0 ;
  
  SWIG_check_num_args("Deque< string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::back",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_back",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (string *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("Deque< string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::push_back",1,"Deque< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Deque< string >::push_back",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_push_back",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringDeque_push_back",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("Deque< string >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::push_front",1,"Deque< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Deque< string >::push_front",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_push_front",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringDeque_push_front",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("Deque< string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::pop_back",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_pop_back",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (arg1)->pop_back();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  string result;
  
  SWIG_check_num_args("Deque< string >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::pop_front",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_pop_front",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  result = (arg1)->pop_front();
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t arg2 ;
  string arg3 ;
  string *argp3 ;
  
  SWIG_check_num_args("Deque< string >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::insert_at",1,"Deque< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< string >::insert_at",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Deque< string >::insert_at",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_insert_at",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringDeque_insert_at",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< string >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::remove_at",1,"Deque< string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< string >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_remove_at",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringDeque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< string > *arg1 = (Deque< string > *) 0 ;
  
  SWIG_check_num_args("Deque< string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< string >::clear",1,"Deque< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_string_t,0))){
    SWIG_fail_ptr("StringDeque_clear",1,SWIGTYPE_p_DequeT_string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringDeque(void *obj) {
Deque< string > *arg1 = (Deque< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringDeque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringDeque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringDeque_attributes[] = {
    { "d", _wrap_StringDeque_d_get, _wrap_StringDeque_d_set },
    {0,0,0}
};
static swig_lua_method swig_StringDeque_methods[]= {
    { "size", _wrap_StringDeque_size},
    { "max_size", _wrap_StringDeque_max_size},
    { "resize", _wrap_StringDeque_resize},
    { "empty", _wrap_StringDeque_empty},
    { "shrink_to_fit", _wrap_StringDeque_shrink_to_fit},
    { "__getitem", _wrap_StringDeque___getitem},
    { "__setitem", _wrap_StringDeque___setitem},
    { "at", _wrap_StringDeque_at},
    { "front", _wrap_StringDeque_front},
    { "back", _wrap_StringDeque_back},
    { "push_back", _wrap_StringDeque_push_back},
    { "push_front", _wrap_StringDeque_push_front},
    { "pop_back", _wrap_StringDeque_pop_back},
    { "pop_front", _wrap_StringDeque_pop_front},
    { "insert_at", _wrap_StringDeque_insert_at},
    { "remove_at", _wrap_StringDeque_remove_at},
    { "clear", _wrap_StringDeque_clear},
    {0,0}
};
static swig_lua_method swig_StringDeque_meta[] = {
    { "__getitem", _wrap_StringDeque___getitem},
    { "__setitem", _wrap_StringDeque___setitem},
    {0,0}
};

static swig_lua_attribute swig_StringDeque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringDeque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringDeque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringDeque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringDeque_Sf_SwigStatic = {
    "StringDeque",
    swig_StringDeque_Sf_SwigStatic_methods,
    swig_StringDeque_Sf_SwigStatic_attributes,
    swig_StringDeque_Sf_SwigStatic_constants,
    swig_StringDeque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringDeque_bases[] = {0};
static const char *swig_StringDeque_base_names[] = {0};
static swig_lua_class _wrap_class_StringDeque = { "StringDeque", "StringDeque", &SWIGTYPE_p_DequeT_string_t,_proxy__wrap_new_StringDeque, swig_delete_StringDeque, swig_StringDeque_methods, swig_StringDeque_attributes, &swig_StringDeque_Sf_SwigStatic, swig_StringDeque_meta, swig_StringDeque_bases, swig_StringDeque_base_names };

static int _wrap_PtrDeque_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  std::deque< void * > *arg2 = (std::deque< void * > *) 0 ;
  
  SWIG_check_num_args("Deque< void * >::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::d",1,"Deque< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< void * >::d",2,"std::deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_d_set",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__dequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_d_set",2,SWIGTYPE_p_std__dequeT_void_p_t);
  }
  
  if (arg1) (arg1)->d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  std::deque< void * > *result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::d",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_d_get",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (std::deque< void * > *)& ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__dequeT_void_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrDeque(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::Deque",0,0)
  result = (Deque< void * > *)new Deque< void * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DequeT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< void * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::size",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_size",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Deque< void * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::max_size",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_max_size",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_resize(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< void * >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::resize",1,"Deque< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< void * >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_resize",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_empty(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Deque< void * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::empty",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_empty",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  
  SWIG_check_num_args("Deque< void * >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::shrink_to_fit",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_shrink_to_fit",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t arg2 ;
  void **result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::__getitem",1,"Deque< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< void * >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque___getitem",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void **) &(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) (void *)0 ;
  
  SWIG_check_num_args("Deque< void * >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::__setitem",1,"Deque< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< void * >::__setitem",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Deque< void * >::__setitem",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque___setitem",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrDeque___setitem");
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t arg2 ;
  void **result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::at",1,"Deque< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< void * >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_at",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void **) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  void **result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::front",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_front",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (void **) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  void **result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::back",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_back",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (void **) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("Deque< void * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::push_back",1,"Deque< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< void * >::push_back",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_push_back",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrDeque_push_back");
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_push_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("Deque< void * >::push_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::push_front",1,"Deque< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Deque< void * >::push_front",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_push_front",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrDeque_push_front");
  (arg1)->push_front(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::pop_back",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_pop_back",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (void *)(arg1)->pop_back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_pop_front(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Deque< void * >::pop_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::pop_front",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_pop_front",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  result = (void *)(arg1)->pop_front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_insert_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) (void *)0 ;
  
  SWIG_check_num_args("Deque< void * >::insert_at",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::insert_at",1,"Deque< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< void * >::insert_at",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Deque< void * >::insert_at",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_insert_at",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrDeque_insert_at");
  (arg1)->insert_at(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_remove_at(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Deque< void * >::remove_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::remove_at",1,"Deque< void * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Deque< void * >::remove_at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_remove_at",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->remove_at(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrDeque_clear(lua_State* L) {
  int SWIG_arg = 0;
  Deque< void * > *arg1 = (Deque< void * > *) 0 ;
  
  SWIG_check_num_args("Deque< void * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Deque< void * >::clear",1,"Deque< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DequeT_void_p_t,0))){
    SWIG_fail_ptr("PtrDeque_clear",1,SWIGTYPE_p_DequeT_void_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PtrDeque(void *obj) {
Deque< void * > *arg1 = (Deque< void * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PtrDeque(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PtrDeque);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PtrDeque_attributes[] = {
    { "d", _wrap_PtrDeque_d_get, _wrap_PtrDeque_d_set },
    {0,0,0}
};
static swig_lua_method swig_PtrDeque_methods[]= {
    { "size", _wrap_PtrDeque_size},
    { "max_size", _wrap_PtrDeque_max_size},
    { "resize", _wrap_PtrDeque_resize},
    { "empty", _wrap_PtrDeque_empty},
    { "shrink_to_fit", _wrap_PtrDeque_shrink_to_fit},
    { "__getitem", _wrap_PtrDeque___getitem},
    { "__setitem", _wrap_PtrDeque___setitem},
    { "at", _wrap_PtrDeque_at},
    { "front", _wrap_PtrDeque_front},
    { "back", _wrap_PtrDeque_back},
    { "push_back", _wrap_PtrDeque_push_back},
    { "push_front", _wrap_PtrDeque_push_front},
    { "pop_back", _wrap_PtrDeque_pop_back},
    { "pop_front", _wrap_PtrDeque_pop_front},
    { "insert_at", _wrap_PtrDeque_insert_at},
    { "remove_at", _wrap_PtrDeque_remove_at},
    { "clear", _wrap_PtrDeque_clear},
    {0,0}
};
static swig_lua_method swig_PtrDeque_meta[] = {
    { "__getitem", _wrap_PtrDeque___getitem},
    { "__setitem", _wrap_PtrDeque___setitem},
    {0,0}
};

static swig_lua_attribute swig_PtrDeque_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PtrDeque_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PtrDeque_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PtrDeque_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PtrDeque_Sf_SwigStatic = {
    "PtrDeque",
    swig_PtrDeque_Sf_SwigStatic_methods,
    swig_PtrDeque_Sf_SwigStatic_attributes,
    swig_PtrDeque_Sf_SwigStatic_constants,
    swig_PtrDeque_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PtrDeque_bases[] = {0};
static const char *swig_PtrDeque_base_names[] = {0};
static swig_lua_class _wrap_class_PtrDeque = { "PtrDeque", "PtrDeque", &SWIGTYPE_p_DequeT_void_p_t,_proxy__wrap_new_PtrDeque, swig_delete_PtrDeque, swig_PtrDeque_methods, swig_PtrDeque_attributes, &swig_PtrDeque_Sf_SwigStatic, swig_PtrDeque_meta, swig_PtrDeque_bases, swig_PtrDeque_base_names };

static int _wrap_FloatSet_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  std::set< float > arg2 ;
  std::set< float > *argp2 ;
  
  SWIG_check_num_args("Set< float >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::s",1,"Set< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< float >::s",2,"std::set< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_s_set",1,SWIGTYPE_p_SetT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_float_t,0))){
    SWIG_fail_ptr("FloatSet_s_set",2,SWIGTYPE_p_std__setT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  std::set< float > result;
  
  SWIG_check_num_args("Set< float >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::s",1,"Set< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_s_get",1,SWIGTYPE_p_SetT_float_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< float > * resultptr = new std::set< float >((const std::set< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSet(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *result = 0 ;
  
  SWIG_check_num_args("Set< float >::Set",0,0)
  result = (Set< float > *)new Set< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::empty",1,"Set< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_empty",1,SWIGTYPE_p_SetT_float_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::size",1,"Set< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_size",1,SWIGTYPE_p_SetT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::max_size",1,"Set< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_max_size",1,SWIGTYPE_p_SetT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("Set< float >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::insert",1,"Set< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< float >::insert",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_insert",1,SWIGTYPE_p_SetT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("Set< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::erase",1,"Set< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< float >::erase",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_erase",1,SWIGTYPE_p_SetT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< float >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::search",1,"Set< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< float >::search",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_search",1,SWIGTYPE_p_SetT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  
  SWIG_check_num_args("Set< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::clear",1,"Set< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_clear",1,SWIGTYPE_p_SetT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSet_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< float > *arg1 = (Set< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< float >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< float >::count",1,"Set< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< float >::count",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_float_t,0))){
    SWIG_fail_ptr("FloatSet_count",1,SWIGTYPE_p_SetT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatSet(void *obj) {
Set< float > *arg1 = (Set< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatSet_attributes[] = {
    { "s", _wrap_FloatSet_s_get, _wrap_FloatSet_s_set },
    {0,0,0}
};
static swig_lua_method swig_FloatSet_methods[]= {
    { "empty", _wrap_FloatSet_empty},
    { "size", _wrap_FloatSet_size},
    { "max_size", _wrap_FloatSet_max_size},
    { "insert", _wrap_FloatSet_insert},
    { "erase", _wrap_FloatSet_erase},
    { "search", _wrap_FloatSet_search},
    { "clear", _wrap_FloatSet_clear},
    { "count", _wrap_FloatSet_count},
    {0,0}
};
static swig_lua_method swig_FloatSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatSet_Sf_SwigStatic = {
    "FloatSet",
    swig_FloatSet_Sf_SwigStatic_methods,
    swig_FloatSet_Sf_SwigStatic_attributes,
    swig_FloatSet_Sf_SwigStatic_constants,
    swig_FloatSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatSet_bases[] = {0};
static const char *swig_FloatSet_base_names[] = {0};
static swig_lua_class _wrap_class_FloatSet = { "FloatSet", "FloatSet", &SWIGTYPE_p_SetT_float_t,_proxy__wrap_new_FloatSet, swig_delete_FloatSet, swig_FloatSet_methods, swig_FloatSet_attributes, &swig_FloatSet_Sf_SwigStatic, swig_FloatSet_meta, swig_FloatSet_bases, swig_FloatSet_base_names };

static int _wrap_DoubleSet_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  std::set< double > arg2 ;
  std::set< double > *argp2 ;
  
  SWIG_check_num_args("Set< double >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::s",1,"Set< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< double >::s",2,"std::set< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_s_set",1,SWIGTYPE_p_SetT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_s_set",2,SWIGTYPE_p_std__setT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  std::set< double > result;
  
  SWIG_check_num_args("Set< double >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::s",1,"Set< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_s_get",1,SWIGTYPE_p_SetT_double_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< double > * resultptr = new std::set< double >((const std::set< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleSet(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *result = 0 ;
  
  SWIG_check_num_args("Set< double >::Set",0,0)
  result = (Set< double > *)new Set< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::empty",1,"Set< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_empty",1,SWIGTYPE_p_SetT_double_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::size",1,"Set< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_size",1,SWIGTYPE_p_SetT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::max_size",1,"Set< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_max_size",1,SWIGTYPE_p_SetT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("Set< double >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::insert",1,"Set< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< double >::insert",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_insert",1,SWIGTYPE_p_SetT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("Set< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::erase",1,"Set< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< double >::erase",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_erase",1,SWIGTYPE_p_SetT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< double >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::search",1,"Set< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< double >::search",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_search",1,SWIGTYPE_p_SetT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  
  SWIG_check_num_args("Set< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::clear",1,"Set< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_clear",1,SWIGTYPE_p_SetT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSet_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< double > *arg1 = (Set< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< double >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< double >::count",1,"Set< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< double >::count",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_double_t,0))){
    SWIG_fail_ptr("DoubleSet_count",1,SWIGTYPE_p_SetT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleSet(void *obj) {
Set< double > *arg1 = (Set< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleSet_attributes[] = {
    { "s", _wrap_DoubleSet_s_get, _wrap_DoubleSet_s_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleSet_methods[]= {
    { "empty", _wrap_DoubleSet_empty},
    { "size", _wrap_DoubleSet_size},
    { "max_size", _wrap_DoubleSet_max_size},
    { "insert", _wrap_DoubleSet_insert},
    { "erase", _wrap_DoubleSet_erase},
    { "search", _wrap_DoubleSet_search},
    { "clear", _wrap_DoubleSet_clear},
    { "count", _wrap_DoubleSet_count},
    {0,0}
};
static swig_lua_method swig_DoubleSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleSet_Sf_SwigStatic = {
    "DoubleSet",
    swig_DoubleSet_Sf_SwigStatic_methods,
    swig_DoubleSet_Sf_SwigStatic_attributes,
    swig_DoubleSet_Sf_SwigStatic_constants,
    swig_DoubleSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleSet_bases[] = {0};
static const char *swig_DoubleSet_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleSet = { "DoubleSet", "DoubleSet", &SWIGTYPE_p_SetT_double_t,_proxy__wrap_new_DoubleSet, swig_delete_DoubleSet, swig_DoubleSet_methods, swig_DoubleSet_attributes, &swig_DoubleSet_Sf_SwigStatic, swig_DoubleSet_meta, swig_DoubleSet_bases, swig_DoubleSet_base_names };

static int _wrap_Int8Set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  std::set< signed char > arg2 ;
  std::set< signed char > *argp2 ;
  
  SWIG_check_num_args("Set< int8_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::s",1,"Set< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< int8_t >::s",2,"std::set< signed char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_s_set",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_s_set",2,SWIGTYPE_p_std__setT_signed_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  std::set< signed char > result;
  
  SWIG_check_num_args("Set< int8_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::s",1,"Set< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_s_get",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< signed char > * resultptr = new std::set< signed char >((const std::set< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Set(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Set< int8_t >::Set",0,0)
  result = (Set< int8_t > *)new Set< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::empty",1,"Set< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_empty",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::size",1,"Set< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_size",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< int8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::max_size",1,"Set< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_max_size",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("Set< int8_t >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::insert",1,"Set< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int8_t >::insert",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_insert",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("Set< int8_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::erase",1,"Set< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int8_t >::erase",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_erase",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< int8_t >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::search",1,"Set< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int8_t >::search",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_search",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((signed char const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  
  SWIG_check_num_args("Set< int8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::clear",1,"Set< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_clear",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< int8_t > *arg1 = (Set< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< int8_t >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int8_t >::count",1,"Set< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int8_t >::count",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Set_count",1,SWIGTYPE_p_SetT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((signed char const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Set(void *obj) {
Set< int8_t > *arg1 = (Set< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Set_attributes[] = {
    { "s", _wrap_Int8Set_s_get, _wrap_Int8Set_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Set_methods[]= {
    { "empty", _wrap_Int8Set_empty},
    { "size", _wrap_Int8Set_size},
    { "max_size", _wrap_Int8Set_max_size},
    { "insert", _wrap_Int8Set_insert},
    { "erase", _wrap_Int8Set_erase},
    { "search", _wrap_Int8Set_search},
    { "clear", _wrap_Int8Set_clear},
    { "count", _wrap_Int8Set_count},
    {0,0}
};
static swig_lua_method swig_Int8Set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int8Set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Set_Sf_SwigStatic = {
    "Int8Set",
    swig_Int8Set_Sf_SwigStatic_methods,
    swig_Int8Set_Sf_SwigStatic_attributes,
    swig_Int8Set_Sf_SwigStatic_constants,
    swig_Int8Set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Set_bases[] = {0};
static const char *swig_Int8Set_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Set = { "Int8Set", "Int8Set", &SWIGTYPE_p_SetT_signed_char_t,_proxy__wrap_new_Int8Set, swig_delete_Int8Set, swig_Int8Set_methods, swig_Int8Set_attributes, &swig_Int8Set_Sf_SwigStatic, swig_Int8Set_meta, swig_Int8Set_bases, swig_Int8Set_base_names };

static int _wrap_UInt8set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  std::set< unsigned char > arg2 ;
  std::set< unsigned char > *argp2 ;
  
  SWIG_check_num_args("Set< uint8_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::s",1,"Set< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< uint8_t >::s",2,"std::set< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_s_set",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_s_set",2,SWIGTYPE_p_std__setT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  std::set< unsigned char > result;
  
  SWIG_check_num_args("Set< uint8_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::s",1,"Set< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_s_get",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< unsigned char > * resultptr = new std::set< unsigned char >((const std::set< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8set(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Set< uint8_t >::Set",0,0)
  result = (Set< uint8_t > *)new Set< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::empty",1,"Set< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_empty",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::size",1,"Set< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_size",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint8_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::max_size",1,"Set< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_max_size",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("Set< uint8_t >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::insert",1,"Set< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint8_t >::insert",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_insert",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("Set< uint8_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::erase",1,"Set< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint8_t >::erase",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_erase",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< uint8_t >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::search",1,"Set< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint8_t >::search",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_search",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((unsigned char const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Set< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::clear",1,"Set< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_clear",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint8_t > *arg1 = (Set< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint8_t >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint8_t >::count",1,"Set< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint8_t >::count",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8set_count",1,SWIGTYPE_p_SetT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((unsigned char const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8set(void *obj) {
Set< uint8_t > *arg1 = (Set< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8set_attributes[] = {
    { "s", _wrap_UInt8set_s_get, _wrap_UInt8set_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8set_methods[]= {
    { "empty", _wrap_UInt8set_empty},
    { "size", _wrap_UInt8set_size},
    { "max_size", _wrap_UInt8set_max_size},
    { "insert", _wrap_UInt8set_insert},
    { "erase", _wrap_UInt8set_erase},
    { "search", _wrap_UInt8set_search},
    { "clear", _wrap_UInt8set_clear},
    { "count", _wrap_UInt8set_count},
    {0,0}
};
static swig_lua_method swig_UInt8set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt8set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8set_Sf_SwigStatic = {
    "UInt8set",
    swig_UInt8set_Sf_SwigStatic_methods,
    swig_UInt8set_Sf_SwigStatic_attributes,
    swig_UInt8set_Sf_SwigStatic_constants,
    swig_UInt8set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8set_bases[] = {0};
static const char *swig_UInt8set_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8set = { "UInt8set", "UInt8set", &SWIGTYPE_p_SetT_unsigned_char_t,_proxy__wrap_new_UInt8set, swig_delete_UInt8set, swig_UInt8set_methods, swig_UInt8set_attributes, &swig_UInt8set_Sf_SwigStatic, swig_UInt8set_meta, swig_UInt8set_bases, swig_UInt8set_base_names };

static int _wrap_Int16Set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  std::set< short > arg2 ;
  std::set< short > *argp2 ;
  
  SWIG_check_num_args("Set< int16_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::s",1,"Set< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< int16_t >::s",2,"std::set< short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_s_set",1,SWIGTYPE_p_SetT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_short_t,0))){
    SWIG_fail_ptr("Int16Set_s_set",2,SWIGTYPE_p_std__setT_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  std::set< short > result;
  
  SWIG_check_num_args("Set< int16_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::s",1,"Set< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_s_get",1,SWIGTYPE_p_SetT_short_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< short > * resultptr = new std::set< short >((const std::set< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Set(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Set< int16_t >::Set",0,0)
  result = (Set< int16_t > *)new Set< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::empty",1,"Set< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_empty",1,SWIGTYPE_p_SetT_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::size",1,"Set< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_size",1,SWIGTYPE_p_SetT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< int16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::max_size",1,"Set< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_max_size",1,SWIGTYPE_p_SetT_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("Set< int16_t >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::insert",1,"Set< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int16_t >::insert",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_insert",1,SWIGTYPE_p_SetT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("Set< int16_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::erase",1,"Set< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int16_t >::erase",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_erase",1,SWIGTYPE_p_SetT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< int16_t >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::search",1,"Set< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int16_t >::search",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_search",1,SWIGTYPE_p_SetT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((short const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  
  SWIG_check_num_args("Set< int16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::clear",1,"Set< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_clear",1,SWIGTYPE_p_SetT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< int16_t > *arg1 = (Set< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< int16_t >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int16_t >::count",1,"Set< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int16_t >::count",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_short_t,0))){
    SWIG_fail_ptr("Int16Set_count",1,SWIGTYPE_p_SetT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((short const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Set(void *obj) {
Set< int16_t > *arg1 = (Set< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Set_attributes[] = {
    { "s", _wrap_Int16Set_s_get, _wrap_Int16Set_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Set_methods[]= {
    { "empty", _wrap_Int16Set_empty},
    { "size", _wrap_Int16Set_size},
    { "max_size", _wrap_Int16Set_max_size},
    { "insert", _wrap_Int16Set_insert},
    { "erase", _wrap_Int16Set_erase},
    { "search", _wrap_Int16Set_search},
    { "clear", _wrap_Int16Set_clear},
    { "count", _wrap_Int16Set_count},
    {0,0}
};
static swig_lua_method swig_Int16Set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int16Set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Set_Sf_SwigStatic = {
    "Int16Set",
    swig_Int16Set_Sf_SwigStatic_methods,
    swig_Int16Set_Sf_SwigStatic_attributes,
    swig_Int16Set_Sf_SwigStatic_constants,
    swig_Int16Set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Set_bases[] = {0};
static const char *swig_Int16Set_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Set = { "Int16Set", "Int16Set", &SWIGTYPE_p_SetT_short_t,_proxy__wrap_new_Int16Set, swig_delete_Int16Set, swig_Int16Set_methods, swig_Int16Set_attributes, &swig_Int16Set_Sf_SwigStatic, swig_Int16Set_meta, swig_Int16Set_bases, swig_Int16Set_base_names };

static int _wrap_UInt16Set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  std::set< unsigned short > arg2 ;
  std::set< unsigned short > *argp2 ;
  
  SWIG_check_num_args("Set< uint16_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::s",1,"Set< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< uint16_t >::s",2,"std::set< unsigned short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_s_set",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_s_set",2,SWIGTYPE_p_std__setT_unsigned_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  std::set< unsigned short > result;
  
  SWIG_check_num_args("Set< uint16_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::s",1,"Set< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_s_get",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< unsigned short > * resultptr = new std::set< unsigned short >((const std::set< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Set(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Set< uint16_t >::Set",0,0)
  result = (Set< uint16_t > *)new Set< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::empty",1,"Set< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_empty",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::size",1,"Set< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_size",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint16_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::max_size",1,"Set< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_max_size",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("Set< uint16_t >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::insert",1,"Set< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint16_t >::insert",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_insert",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("Set< uint16_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::erase",1,"Set< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint16_t >::erase",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_erase",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< uint16_t >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::search",1,"Set< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint16_t >::search",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_search",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((unsigned short const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Set< uint16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::clear",1,"Set< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_clear",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint16_t > *arg1 = (Set< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint16_t >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint16_t >::count",1,"Set< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint16_t >::count",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Set_count",1,SWIGTYPE_p_SetT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((unsigned short const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Set(void *obj) {
Set< uint16_t > *arg1 = (Set< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Set_attributes[] = {
    { "s", _wrap_UInt16Set_s_get, _wrap_UInt16Set_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Set_methods[]= {
    { "empty", _wrap_UInt16Set_empty},
    { "size", _wrap_UInt16Set_size},
    { "max_size", _wrap_UInt16Set_max_size},
    { "insert", _wrap_UInt16Set_insert},
    { "erase", _wrap_UInt16Set_erase},
    { "search", _wrap_UInt16Set_search},
    { "clear", _wrap_UInt16Set_clear},
    { "count", _wrap_UInt16Set_count},
    {0,0}
};
static swig_lua_method swig_UInt16Set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt16Set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Set_Sf_SwigStatic = {
    "UInt16Set",
    swig_UInt16Set_Sf_SwigStatic_methods,
    swig_UInt16Set_Sf_SwigStatic_attributes,
    swig_UInt16Set_Sf_SwigStatic_constants,
    swig_UInt16Set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Set_bases[] = {0};
static const char *swig_UInt16Set_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Set = { "UInt16Set", "UInt16Set", &SWIGTYPE_p_SetT_unsigned_short_t,_proxy__wrap_new_UInt16Set, swig_delete_UInt16Set, swig_UInt16Set_methods, swig_UInt16Set_attributes, &swig_UInt16Set_Sf_SwigStatic, swig_UInt16Set_meta, swig_UInt16Set_bases, swig_UInt16Set_base_names };

static int _wrap_Int32Set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  std::set< int > arg2 ;
  std::set< int > *argp2 ;
  
  SWIG_check_num_args("Set< int32_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::s",1,"Set< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< int32_t >::s",2,"std::set< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_s_set",1,SWIGTYPE_p_SetT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_int_t,0))){
    SWIG_fail_ptr("Int32Set_s_set",2,SWIGTYPE_p_std__setT_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  std::set< int > result;
  
  SWIG_check_num_args("Set< int32_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::s",1,"Set< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_s_get",1,SWIGTYPE_p_SetT_int_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< int > * resultptr = new std::set< int >((const std::set< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Set(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Set< int32_t >::Set",0,0)
  result = (Set< int32_t > *)new Set< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::empty",1,"Set< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_empty",1,SWIGTYPE_p_SetT_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::size",1,"Set< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_size",1,SWIGTYPE_p_SetT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< int32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::max_size",1,"Set< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_max_size",1,SWIGTYPE_p_SetT_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("Set< int32_t >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::insert",1,"Set< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int32_t >::insert",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_insert",1,SWIGTYPE_p_SetT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("Set< int32_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::erase",1,"Set< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int32_t >::erase",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_erase",1,SWIGTYPE_p_SetT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< int32_t >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::search",1,"Set< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int32_t >::search",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_search",1,SWIGTYPE_p_SetT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((int const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  
  SWIG_check_num_args("Set< int32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::clear",1,"Set< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_clear",1,SWIGTYPE_p_SetT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< int32_t > *arg1 = (Set< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< int32_t >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< int32_t >::count",1,"Set< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< int32_t >::count",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_int_t,0))){
    SWIG_fail_ptr("Int32Set_count",1,SWIGTYPE_p_SetT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((int const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Set(void *obj) {
Set< int32_t > *arg1 = (Set< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Set_attributes[] = {
    { "s", _wrap_Int32Set_s_get, _wrap_Int32Set_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Set_methods[]= {
    { "empty", _wrap_Int32Set_empty},
    { "size", _wrap_Int32Set_size},
    { "max_size", _wrap_Int32Set_max_size},
    { "insert", _wrap_Int32Set_insert},
    { "erase", _wrap_Int32Set_erase},
    { "search", _wrap_Int32Set_search},
    { "clear", _wrap_Int32Set_clear},
    { "count", _wrap_Int32Set_count},
    {0,0}
};
static swig_lua_method swig_Int32Set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int32Set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Set_Sf_SwigStatic = {
    "Int32Set",
    swig_Int32Set_Sf_SwigStatic_methods,
    swig_Int32Set_Sf_SwigStatic_attributes,
    swig_Int32Set_Sf_SwigStatic_constants,
    swig_Int32Set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Set_bases[] = {0};
static const char *swig_Int32Set_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Set = { "Int32Set", "Int32Set", &SWIGTYPE_p_SetT_int_t,_proxy__wrap_new_Int32Set, swig_delete_Int32Set, swig_Int32Set_methods, swig_Int32Set_attributes, &swig_Int32Set_Sf_SwigStatic, swig_Int32Set_meta, swig_Int32Set_bases, swig_Int32Set_base_names };

static int _wrap_UInt32Set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  std::set< unsigned int > arg2 ;
  std::set< unsigned int > *argp2 ;
  
  SWIG_check_num_args("Set< uint32_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::s",1,"Set< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< uint32_t >::s",2,"std::set< unsigned int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_s_set",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_s_set",2,SWIGTYPE_p_std__setT_unsigned_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  std::set< unsigned int > result;
  
  SWIG_check_num_args("Set< uint32_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::s",1,"Set< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_s_get",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< unsigned int > * resultptr = new std::set< unsigned int >((const std::set< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Set(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Set< uint32_t >::Set",0,0)
  result = (Set< uint32_t > *)new Set< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::empty",1,"Set< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_empty",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::size",1,"Set< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_size",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint32_t >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::max_size",1,"Set< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_max_size",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("Set< uint32_t >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::insert",1,"Set< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint32_t >::insert",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_insert",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("Set< uint32_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::erase",1,"Set< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint32_t >::erase",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_erase",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< uint32_t >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::search",1,"Set< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint32_t >::search",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_search",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((unsigned int const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Set< uint32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::clear",1,"Set< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_clear",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< uint32_t > *arg1 = (Set< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< uint32_t >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< uint32_t >::count",1,"Set< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< uint32_t >::count",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Set_count",1,SWIGTYPE_p_SetT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((unsigned int const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Set(void *obj) {
Set< uint32_t > *arg1 = (Set< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Set_attributes[] = {
    { "s", _wrap_UInt32Set_s_get, _wrap_UInt32Set_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Set_methods[]= {
    { "empty", _wrap_UInt32Set_empty},
    { "size", _wrap_UInt32Set_size},
    { "max_size", _wrap_UInt32Set_max_size},
    { "insert", _wrap_UInt32Set_insert},
    { "erase", _wrap_UInt32Set_erase},
    { "search", _wrap_UInt32Set_search},
    { "clear", _wrap_UInt32Set_clear},
    { "count", _wrap_UInt32Set_count},
    {0,0}
};
static swig_lua_method swig_UInt32Set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt32Set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Set_Sf_SwigStatic = {
    "UInt32Set",
    swig_UInt32Set_Sf_SwigStatic_methods,
    swig_UInt32Set_Sf_SwigStatic_attributes,
    swig_UInt32Set_Sf_SwigStatic_constants,
    swig_UInt32Set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Set_bases[] = {0};
static const char *swig_UInt32Set_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Set = { "UInt32Set", "UInt32Set", &SWIGTYPE_p_SetT_unsigned_int_t,_proxy__wrap_new_UInt32Set, swig_delete_UInt32Set, swig_UInt32Set_methods, swig_UInt32Set_attributes, &swig_UInt32Set_Sf_SwigStatic, swig_UInt32Set_meta, swig_UInt32Set_bases, swig_UInt32Set_base_names };

static int _wrap_Int64Set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  std::set< long long > arg2 ;
  std::set< long long > *argp2 ;
  
  SWIG_check_num_args("Set< long long >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::s",1,"Set< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< long long >::s",2,"std::set< long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_s_set",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_s_set",2,SWIGTYPE_p_std__setT_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  std::set< long long > result;
  
  SWIG_check_num_args("Set< long long >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::s",1,"Set< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_s_get",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< long long > * resultptr = new std::set< long long >((const std::set< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Set(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *result = 0 ;
  
  SWIG_check_num_args("Set< long long >::Set",0,0)
  result = (Set< long long > *)new Set< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::empty",1,"Set< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_empty",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::size",1,"Set< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_size",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::max_size",1,"Set< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_max_size",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("Set< long long >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::insert",1,"Set< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< long long >::insert",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_insert",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("Set< long long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::erase",1,"Set< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< long long >::erase",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_erase",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< long long >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::search",1,"Set< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< long long >::search",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_search",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((long long const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  
  SWIG_check_num_args("Set< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::clear",1,"Set< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_clear",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< long long > *arg1 = (Set< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< long long >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< long long >::count",1,"Set< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< long long >::count",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_long_long_t,0))){
    SWIG_fail_ptr("Int64Set_count",1,SWIGTYPE_p_SetT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((long long const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Set(void *obj) {
Set< long long > *arg1 = (Set< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Set_attributes[] = {
    { "s", _wrap_Int64Set_s_get, _wrap_Int64Set_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Set_methods[]= {
    { "empty", _wrap_Int64Set_empty},
    { "size", _wrap_Int64Set_size},
    { "max_size", _wrap_Int64Set_max_size},
    { "insert", _wrap_Int64Set_insert},
    { "erase", _wrap_Int64Set_erase},
    { "search", _wrap_Int64Set_search},
    { "clear", _wrap_Int64Set_clear},
    { "count", _wrap_Int64Set_count},
    {0,0}
};
static swig_lua_method swig_Int64Set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int64Set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Set_Sf_SwigStatic = {
    "Int64Set",
    swig_Int64Set_Sf_SwigStatic_methods,
    swig_Int64Set_Sf_SwigStatic_attributes,
    swig_Int64Set_Sf_SwigStatic_constants,
    swig_Int64Set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Set_bases[] = {0};
static const char *swig_Int64Set_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Set = { "Int64Set", "Int64Set", &SWIGTYPE_p_SetT_long_long_t,_proxy__wrap_new_Int64Set, swig_delete_Int64Set, swig_Int64Set_methods, swig_Int64Set_attributes, &swig_Int64Set_Sf_SwigStatic, swig_Int64Set_meta, swig_Int64Set_bases, swig_Int64Set_base_names };

static int _wrap_UInt64Set_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  std::set< unsigned long long > arg2 ;
  std::set< unsigned long long > *argp2 ;
  
  SWIG_check_num_args("Set< unsigned long long >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::s",1,"Set< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< unsigned long long >::s",2,"std::set< unsigned long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_s_set",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_s_set",2,SWIGTYPE_p_std__setT_unsigned_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  std::set< unsigned long long > result;
  
  SWIG_check_num_args("Set< unsigned long long >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::s",1,"Set< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_s_get",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< unsigned long long > * resultptr = new std::set< unsigned long long >((const std::set< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Set(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Set< unsigned long long >::Set",0,0)
  result = (Set< unsigned long long > *)new Set< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::empty",1,"Set< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_empty",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::size",1,"Set< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_size",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< unsigned long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::max_size",1,"Set< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_max_size",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("Set< unsigned long long >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::insert",1,"Set< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< unsigned long long >::insert",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_insert",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->insert((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("Set< unsigned long long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::erase",1,"Set< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< unsigned long long >::erase",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_erase",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->erase((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< unsigned long long >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::search",1,"Set< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< unsigned long long >::search",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_search",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)(arg1)->search((unsigned long long const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Set< unsigned long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::clear",1,"Set< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_clear",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Set_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< unsigned long long > *arg1 = (Set< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< unsigned long long >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< unsigned long long >::count",1,"Set< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set< unsigned long long >::count",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Set_count",1,SWIGTYPE_p_SetT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->count((unsigned long long const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Set(void *obj) {
Set< unsigned long long > *arg1 = (Set< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Set(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Set);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Set_attributes[] = {
    { "s", _wrap_UInt64Set_s_get, _wrap_UInt64Set_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Set_methods[]= {
    { "empty", _wrap_UInt64Set_empty},
    { "size", _wrap_UInt64Set_size},
    { "max_size", _wrap_UInt64Set_max_size},
    { "insert", _wrap_UInt64Set_insert},
    { "erase", _wrap_UInt64Set_erase},
    { "search", _wrap_UInt64Set_search},
    { "clear", _wrap_UInt64Set_clear},
    { "count", _wrap_UInt64Set_count},
    {0,0}
};
static swig_lua_method swig_UInt64Set_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt64Set_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Set_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Set_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Set_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Set_Sf_SwigStatic = {
    "UInt64Set",
    swig_UInt64Set_Sf_SwigStatic_methods,
    swig_UInt64Set_Sf_SwigStatic_attributes,
    swig_UInt64Set_Sf_SwigStatic_constants,
    swig_UInt64Set_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Set_bases[] = {0};
static const char *swig_UInt64Set_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Set = { "UInt64Set", "UInt64Set", &SWIGTYPE_p_SetT_unsigned_long_long_t,_proxy__wrap_new_UInt64Set, swig_delete_UInt64Set, swig_UInt64Set_methods, swig_UInt64Set_attributes, &swig_UInt64Set_Sf_SwigStatic, swig_UInt64Set_meta, swig_UInt64Set_bases, swig_UInt64Set_base_names };

static int _wrap_StringSet_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  std::set< string > arg2 ;
  std::set< string > *argp2 ;
  
  SWIG_check_num_args("Set< string >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::s",1,"Set< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< string >::s",2,"std::set< string >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_s_set",1,SWIGTYPE_p_SetT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_string_t,0))){
    SWIG_fail_ptr("StringSet_s_set",2,SWIGTYPE_p_std__setT_string_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  std::set< string > result;
  
  SWIG_check_num_args("Set< string >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::s",1,"Set< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_s_get",1,SWIGTYPE_p_SetT_string_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< string > * resultptr = new std::set< string >((const std::set< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringSet(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *result = 0 ;
  
  SWIG_check_num_args("Set< string >::Set",0,0)
  result = (Set< string > *)new Set< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::empty",1,"Set< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_empty",1,SWIGTYPE_p_SetT_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::size",1,"Set< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_size",1,SWIGTYPE_p_SetT_string_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::max_size",1,"Set< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_max_size",1,SWIGTYPE_p_SetT_string_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  string *arg2 = 0 ;
  
  SWIG_check_num_args("Set< string >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::insert",1,"Set< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< string >::insert",2,"string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_insert",1,SWIGTYPE_p_SetT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringSet_insert",2,SWIGTYPE_p_string);
  }
  
  (arg1)->insert((string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  string *arg2 = 0 ;
  
  SWIG_check_num_args("Set< string >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::erase",1,"Set< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< string >::erase",2,"string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_erase",1,SWIGTYPE_p_SetT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringSet_erase",2,SWIGTYPE_p_string);
  }
  
  (arg1)->erase((string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Set< string >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::search",1,"Set< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< string >::search",2,"string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_search",1,SWIGTYPE_p_SetT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringSet_search",2,SWIGTYPE_p_string);
  }
  
  result = (bool)(arg1)->search((string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  
  SWIG_check_num_args("Set< string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::clear",1,"Set< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_clear",1,SWIGTYPE_p_SetT_string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringSet_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< string > *arg1 = (Set< string > *) 0 ;
  string *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< string >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< string >::count",1,"Set< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< string >::count",2,"string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_string_t,0))){
    SWIG_fail_ptr("StringSet_count",1,SWIGTYPE_p_SetT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringSet_count",2,SWIGTYPE_p_string);
  }
  
  result = (arg1)->count((string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringSet(void *obj) {
Set< string > *arg1 = (Set< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringSet_attributes[] = {
    { "s", _wrap_StringSet_s_get, _wrap_StringSet_s_set },
    {0,0,0}
};
static swig_lua_method swig_StringSet_methods[]= {
    { "empty", _wrap_StringSet_empty},
    { "size", _wrap_StringSet_size},
    { "max_size", _wrap_StringSet_max_size},
    { "insert", _wrap_StringSet_insert},
    { "erase", _wrap_StringSet_erase},
    { "search", _wrap_StringSet_search},
    { "clear", _wrap_StringSet_clear},
    { "count", _wrap_StringSet_count},
    {0,0}
};
static swig_lua_method swig_StringSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StringSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringSet_Sf_SwigStatic = {
    "StringSet",
    swig_StringSet_Sf_SwigStatic_methods,
    swig_StringSet_Sf_SwigStatic_attributes,
    swig_StringSet_Sf_SwigStatic_constants,
    swig_StringSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringSet_bases[] = {0};
static const char *swig_StringSet_base_names[] = {0};
static swig_lua_class _wrap_class_StringSet = { "StringSet", "StringSet", &SWIGTYPE_p_SetT_string_t,_proxy__wrap_new_StringSet, swig_delete_StringSet, swig_StringSet_methods, swig_StringSet_attributes, &swig_StringSet_Sf_SwigStatic, swig_StringSet_meta, swig_StringSet_bases, swig_StringSet_base_names };

static int _wrap_PtrSet_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  std::set< void * > arg2 ;
  std::set< void * > *argp2 ;
  
  SWIG_check_num_args("Set< void * >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::s",1,"Set< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Set< void * >::s",2,"std::set< void * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_s_set",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__setT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_s_set",2,SWIGTYPE_p_std__setT_void_p_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  std::set< void * > result;
  
  SWIG_check_num_args("Set< void * >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::s",1,"Set< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_s_get",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  result =  ((arg1)->s);
  {
    std::set< void * > * resultptr = new std::set< void * >((const std::set< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrSet(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *result = 0 ;
  
  SWIG_check_num_args("Set< void * >::Set",0,0)
  result = (Set< void * > *)new Set< void * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SetT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_empty(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Set< void * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::empty",1,"Set< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_empty",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< void * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::size",1,"Set< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_size",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Set< void * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::max_size",1,"Set< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_max_size",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_insert(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  void **arg2 = 0 ;
  void *temp2 ;
  
  SWIG_check_num_args("Set< void * >::insert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::insert",1,"Set< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Set< void * >::insert",2,"void *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_insert",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  temp2=(void *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_void,0,2,"PtrSet_insert");
  arg2=(void **)&temp2;
  (arg1)->insert((void *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_erase(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  void **arg2 = 0 ;
  void *temp2 ;
  
  SWIG_check_num_args("Set< void * >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::erase",1,"Set< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Set< void * >::erase",2,"void *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_erase",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  temp2=(void *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_void,0,2,"PtrSet_erase");
  arg2=(void **)&temp2;
  (arg1)->erase((void *const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_search(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  void **arg2 = 0 ;
  void *temp2 ;
  bool result;
  
  SWIG_check_num_args("Set< void * >::search",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::search",1,"Set< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Set< void * >::search",2,"void *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_search",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  temp2=(void *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_void,0,2,"PtrSet_search");
  arg2=(void **)&temp2;
  result = (bool)(arg1)->search((void *const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_clear(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  
  SWIG_check_num_args("Set< void * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::clear",1,"Set< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_clear",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrSet_count(lua_State* L) {
  int SWIG_arg = 0;
  Set< void * > *arg1 = (Set< void * > *) 0 ;
  void **arg2 = 0 ;
  void *temp2 ;
  size_t result;
  
  SWIG_check_num_args("Set< void * >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set< void * >::count",1,"Set< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Set< void * >::count",2,"void *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SetT_void_p_t,0))){
    SWIG_fail_ptr("PtrSet_count",1,SWIGTYPE_p_SetT_void_p_t);
  }
  
  temp2=(void *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_void,0,2,"PtrSet_count");
  arg2=(void **)&temp2;
  result = (arg1)->count((void *const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PtrSet(void *obj) {
Set< void * > *arg1 = (Set< void * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PtrSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PtrSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PtrSet_attributes[] = {
    { "s", _wrap_PtrSet_s_get, _wrap_PtrSet_s_set },
    {0,0,0}
};
static swig_lua_method swig_PtrSet_methods[]= {
    { "empty", _wrap_PtrSet_empty},
    { "size", _wrap_PtrSet_size},
    { "max_size", _wrap_PtrSet_max_size},
    { "insert", _wrap_PtrSet_insert},
    { "erase", _wrap_PtrSet_erase},
    { "search", _wrap_PtrSet_search},
    { "clear", _wrap_PtrSet_clear},
    { "count", _wrap_PtrSet_count},
    {0,0}
};
static swig_lua_method swig_PtrSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PtrSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PtrSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PtrSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PtrSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PtrSet_Sf_SwigStatic = {
    "PtrSet",
    swig_PtrSet_Sf_SwigStatic_methods,
    swig_PtrSet_Sf_SwigStatic_attributes,
    swig_PtrSet_Sf_SwigStatic_constants,
    swig_PtrSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PtrSet_bases[] = {0};
static const char *swig_PtrSet_base_names[] = {0};
static swig_lua_class _wrap_class_PtrSet = { "PtrSet", "PtrSet", &SWIGTYPE_p_SetT_void_p_t,_proxy__wrap_new_PtrSet, swig_delete_PtrSet, swig_PtrSet_methods, swig_PtrSet_attributes, &swig_PtrSet_Sf_SwigStatic, swig_PtrSet_meta, swig_PtrSet_bases, swig_PtrSet_base_names };

static int _wrap_FloatStack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *arg1 = (Stack< float > *) 0 ;
  std::stack< float > arg2 ;
  std::stack< float > *argp2 ;
  
  SWIG_check_num_args("Stack< float >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< float >::s",1,"Stack< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< float >::s",2,"std::stack< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_s_set",1,SWIGTYPE_p_StackT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_s_set",2,SWIGTYPE_p_std__stackT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatStack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *arg1 = (Stack< float > *) 0 ;
  std::stack< float > result;
  
  SWIG_check_num_args("Stack< float >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< float >::s",1,"Stack< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_s_get",1,SWIGTYPE_p_StackT_float_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< float > * resultptr = new std::stack< float >((const std::stack< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatStack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *result = 0 ;
  
  SWIG_check_num_args("Stack< float >::Stack",0,0)
  result = (Stack< float > *)new Stack< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatStack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *arg1 = (Stack< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< float >::empty",1,"Stack< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_empty",1,SWIGTYPE_p_StackT_float_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatStack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *arg1 = (Stack< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< float >::size",1,"Stack< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_size",1,SWIGTYPE_p_StackT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatStack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *arg1 = (Stack< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Stack< float >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< float >::top",1,"Stack< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_top",1,SWIGTYPE_p_StackT_float_t);
  }
  
  result = (float *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatStack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *arg1 = (Stack< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Stack< float >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< float >::push",1,"Stack< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< float >::push",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_push",1,SWIGTYPE_p_StackT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatStack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< float > *arg1 = (Stack< float > *) 0 ;
  
  SWIG_check_num_args("Stack< float >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< float >::pop",1,"Stack< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_float_t,0))){
    SWIG_fail_ptr("FloatStack_pop",1,SWIGTYPE_p_StackT_float_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatStack(void *obj) {
Stack< float > *arg1 = (Stack< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatStack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatStack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatStack_attributes[] = {
    { "s", _wrap_FloatStack_s_get, _wrap_FloatStack_s_set },
    {0,0,0}
};
static swig_lua_method swig_FloatStack_methods[]= {
    { "empty", _wrap_FloatStack_empty},
    { "size", _wrap_FloatStack_size},
    { "top", _wrap_FloatStack_top},
    { "push", _wrap_FloatStack_push},
    { "pop", _wrap_FloatStack_pop},
    {0,0}
};
static swig_lua_method swig_FloatStack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatStack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatStack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatStack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatStack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatStack_Sf_SwigStatic = {
    "FloatStack",
    swig_FloatStack_Sf_SwigStatic_methods,
    swig_FloatStack_Sf_SwigStatic_attributes,
    swig_FloatStack_Sf_SwigStatic_constants,
    swig_FloatStack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatStack_bases[] = {0};
static const char *swig_FloatStack_base_names[] = {0};
static swig_lua_class _wrap_class_FloatStack = { "FloatStack", "FloatStack", &SWIGTYPE_p_StackT_float_t,_proxy__wrap_new_FloatStack, swig_delete_FloatStack, swig_FloatStack_methods, swig_FloatStack_attributes, &swig_FloatStack_Sf_SwigStatic, swig_FloatStack_meta, swig_FloatStack_bases, swig_FloatStack_base_names };

static int _wrap_DoubleStack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *arg1 = (Stack< double > *) 0 ;
  std::stack< double > arg2 ;
  std::stack< double > *argp2 ;
  
  SWIG_check_num_args("Stack< double >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< double >::s",1,"Stack< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< double >::s",2,"std::stack< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_s_set",1,SWIGTYPE_p_StackT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_s_set",2,SWIGTYPE_p_std__stackT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleStack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *arg1 = (Stack< double > *) 0 ;
  std::stack< double > result;
  
  SWIG_check_num_args("Stack< double >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< double >::s",1,"Stack< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_s_get",1,SWIGTYPE_p_StackT_double_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< double > * resultptr = new std::stack< double >((const std::stack< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleStack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *result = 0 ;
  
  SWIG_check_num_args("Stack< double >::Stack",0,0)
  result = (Stack< double > *)new Stack< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleStack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *arg1 = (Stack< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< double >::empty",1,"Stack< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_empty",1,SWIGTYPE_p_StackT_double_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleStack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *arg1 = (Stack< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< double >::size",1,"Stack< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_size",1,SWIGTYPE_p_StackT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleStack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *arg1 = (Stack< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Stack< double >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< double >::top",1,"Stack< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_top",1,SWIGTYPE_p_StackT_double_t);
  }
  
  result = (double *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleStack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *arg1 = (Stack< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Stack< double >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< double >::push",1,"Stack< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< double >::push",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_push",1,SWIGTYPE_p_StackT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleStack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< double > *arg1 = (Stack< double > *) 0 ;
  
  SWIG_check_num_args("Stack< double >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< double >::pop",1,"Stack< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_double_t,0))){
    SWIG_fail_ptr("DoubleStack_pop",1,SWIGTYPE_p_StackT_double_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleStack(void *obj) {
Stack< double > *arg1 = (Stack< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleStack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleStack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleStack_attributes[] = {
    { "s", _wrap_DoubleStack_s_get, _wrap_DoubleStack_s_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleStack_methods[]= {
    { "empty", _wrap_DoubleStack_empty},
    { "size", _wrap_DoubleStack_size},
    { "top", _wrap_DoubleStack_top},
    { "push", _wrap_DoubleStack_push},
    { "pop", _wrap_DoubleStack_pop},
    {0,0}
};
static swig_lua_method swig_DoubleStack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleStack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleStack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleStack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleStack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleStack_Sf_SwigStatic = {
    "DoubleStack",
    swig_DoubleStack_Sf_SwigStatic_methods,
    swig_DoubleStack_Sf_SwigStatic_attributes,
    swig_DoubleStack_Sf_SwigStatic_constants,
    swig_DoubleStack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleStack_bases[] = {0};
static const char *swig_DoubleStack_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleStack = { "DoubleStack", "DoubleStack", &SWIGTYPE_p_StackT_double_t,_proxy__wrap_new_DoubleStack, swig_delete_DoubleStack, swig_DoubleStack_methods, swig_DoubleStack_attributes, &swig_DoubleStack_Sf_SwigStatic, swig_DoubleStack_meta, swig_DoubleStack_bases, swig_DoubleStack_base_names };

static int _wrap_Int8Stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *arg1 = (Stack< int8_t > *) 0 ;
  std::stack< signed char > arg2 ;
  std::stack< signed char > *argp2 ;
  
  SWIG_check_num_args("Stack< int8_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int8_t >::s",1,"Stack< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< int8_t >::s",2,"std::stack< signed char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_s_set",1,SWIGTYPE_p_StackT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_s_set",2,SWIGTYPE_p_std__stackT_signed_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *arg1 = (Stack< int8_t > *) 0 ;
  std::stack< signed char > result;
  
  SWIG_check_num_args("Stack< int8_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int8_t >::s",1,"Stack< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_s_get",1,SWIGTYPE_p_StackT_signed_char_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< signed char > * resultptr = new std::stack< signed char >((const std::stack< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Stack< int8_t >::Stack",0,0)
  result = (Stack< int8_t > *)new Stack< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *arg1 = (Stack< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int8_t >::empty",1,"Stack< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_empty",1,SWIGTYPE_p_StackT_signed_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *arg1 = (Stack< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int8_t >::size",1,"Stack< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_size",1,SWIGTYPE_p_StackT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *arg1 = (Stack< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Stack< int8_t >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int8_t >::top",1,"Stack< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_top",1,SWIGTYPE_p_StackT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *arg1 = (Stack< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("Stack< int8_t >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int8_t >::push",1,"Stack< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< int8_t >::push",2,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_push",1,SWIGTYPE_p_StackT_signed_char_t);
  }
  
  arg2 = (signed char const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int8_t > *arg1 = (Stack< int8_t > *) 0 ;
  
  SWIG_check_num_args("Stack< int8_t >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int8_t >::pop",1,"Stack< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Stack_pop",1,SWIGTYPE_p_StackT_signed_char_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Stack(void *obj) {
Stack< int8_t > *arg1 = (Stack< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Stack_attributes[] = {
    { "s", _wrap_Int8Stack_s_get, _wrap_Int8Stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Stack_methods[]= {
    { "empty", _wrap_Int8Stack_empty},
    { "size", _wrap_Int8Stack_size},
    { "top", _wrap_Int8Stack_top},
    { "push", _wrap_Int8Stack_push},
    { "pop", _wrap_Int8Stack_pop},
    {0,0}
};
static swig_lua_method swig_Int8Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int8Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Stack_Sf_SwigStatic = {
    "Int8Stack",
    swig_Int8Stack_Sf_SwigStatic_methods,
    swig_Int8Stack_Sf_SwigStatic_attributes,
    swig_Int8Stack_Sf_SwigStatic_constants,
    swig_Int8Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Stack_bases[] = {0};
static const char *swig_Int8Stack_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Stack = { "Int8Stack", "Int8Stack", &SWIGTYPE_p_StackT_signed_char_t,_proxy__wrap_new_Int8Stack, swig_delete_Int8Stack, swig_Int8Stack_methods, swig_Int8Stack_attributes, &swig_Int8Stack_Sf_SwigStatic, swig_Int8Stack_meta, swig_Int8Stack_bases, swig_Int8Stack_base_names };

static int _wrap_UInt8stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *arg1 = (Stack< uint8_t > *) 0 ;
  std::stack< unsigned char > arg2 ;
  std::stack< unsigned char > *argp2 ;
  
  SWIG_check_num_args("Stack< uint8_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint8_t >::s",1,"Stack< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< uint8_t >::s",2,"std::stack< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_s_set",1,SWIGTYPE_p_StackT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_s_set",2,SWIGTYPE_p_std__stackT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *arg1 = (Stack< uint8_t > *) 0 ;
  std::stack< unsigned char > result;
  
  SWIG_check_num_args("Stack< uint8_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint8_t >::s",1,"Stack< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_s_get",1,SWIGTYPE_p_StackT_unsigned_char_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< unsigned char > * resultptr = new std::stack< unsigned char >((const std::stack< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Stack< uint8_t >::Stack",0,0)
  result = (Stack< uint8_t > *)new Stack< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *arg1 = (Stack< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint8_t >::empty",1,"Stack< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_empty",1,SWIGTYPE_p_StackT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *arg1 = (Stack< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint8_t >::size",1,"Stack< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_size",1,SWIGTYPE_p_StackT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *arg1 = (Stack< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Stack< uint8_t >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint8_t >::top",1,"Stack< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_top",1,SWIGTYPE_p_StackT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *arg1 = (Stack< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Stack< uint8_t >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint8_t >::push",1,"Stack< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< uint8_t >::push",2,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_push",1,SWIGTYPE_p_StackT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint8_t > *arg1 = (Stack< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Stack< uint8_t >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint8_t >::pop",1,"Stack< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8stack_pop",1,SWIGTYPE_p_StackT_unsigned_char_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8stack(void *obj) {
Stack< uint8_t > *arg1 = (Stack< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8stack_attributes[] = {
    { "s", _wrap_UInt8stack_s_get, _wrap_UInt8stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8stack_methods[]= {
    { "empty", _wrap_UInt8stack_empty},
    { "size", _wrap_UInt8stack_size},
    { "top", _wrap_UInt8stack_top},
    { "push", _wrap_UInt8stack_push},
    { "pop", _wrap_UInt8stack_pop},
    {0,0}
};
static swig_lua_method swig_UInt8stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt8stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8stack_Sf_SwigStatic = {
    "UInt8stack",
    swig_UInt8stack_Sf_SwigStatic_methods,
    swig_UInt8stack_Sf_SwigStatic_attributes,
    swig_UInt8stack_Sf_SwigStatic_constants,
    swig_UInt8stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8stack_bases[] = {0};
static const char *swig_UInt8stack_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8stack = { "UInt8stack", "UInt8stack", &SWIGTYPE_p_StackT_unsigned_char_t,_proxy__wrap_new_UInt8stack, swig_delete_UInt8stack, swig_UInt8stack_methods, swig_UInt8stack_attributes, &swig_UInt8stack_Sf_SwigStatic, swig_UInt8stack_meta, swig_UInt8stack_bases, swig_UInt8stack_base_names };

static int _wrap_Int16Stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *arg1 = (Stack< int16_t > *) 0 ;
  std::stack< short > arg2 ;
  std::stack< short > *argp2 ;
  
  SWIG_check_num_args("Stack< int16_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int16_t >::s",1,"Stack< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< int16_t >::s",2,"std::stack< short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_s_set",1,SWIGTYPE_p_StackT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_s_set",2,SWIGTYPE_p_std__stackT_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *arg1 = (Stack< int16_t > *) 0 ;
  std::stack< short > result;
  
  SWIG_check_num_args("Stack< int16_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int16_t >::s",1,"Stack< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_s_get",1,SWIGTYPE_p_StackT_short_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< short > * resultptr = new std::stack< short >((const std::stack< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Stack< int16_t >::Stack",0,0)
  result = (Stack< int16_t > *)new Stack< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *arg1 = (Stack< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int16_t >::empty",1,"Stack< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_empty",1,SWIGTYPE_p_StackT_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *arg1 = (Stack< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int16_t >::size",1,"Stack< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_size",1,SWIGTYPE_p_StackT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *arg1 = (Stack< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Stack< int16_t >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int16_t >::top",1,"Stack< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_top",1,SWIGTYPE_p_StackT_short_t);
  }
  
  result = (short *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *arg1 = (Stack< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("Stack< int16_t >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int16_t >::push",1,"Stack< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< int16_t >::push",2,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_push",1,SWIGTYPE_p_StackT_short_t);
  }
  
  arg2 = (short const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int16_t > *arg1 = (Stack< int16_t > *) 0 ;
  
  SWIG_check_num_args("Stack< int16_t >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int16_t >::pop",1,"Stack< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_short_t,0))){
    SWIG_fail_ptr("Int16Stack_pop",1,SWIGTYPE_p_StackT_short_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Stack(void *obj) {
Stack< int16_t > *arg1 = (Stack< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Stack_attributes[] = {
    { "s", _wrap_Int16Stack_s_get, _wrap_Int16Stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Stack_methods[]= {
    { "empty", _wrap_Int16Stack_empty},
    { "size", _wrap_Int16Stack_size},
    { "top", _wrap_Int16Stack_top},
    { "push", _wrap_Int16Stack_push},
    { "pop", _wrap_Int16Stack_pop},
    {0,0}
};
static swig_lua_method swig_Int16Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int16Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Stack_Sf_SwigStatic = {
    "Int16Stack",
    swig_Int16Stack_Sf_SwigStatic_methods,
    swig_Int16Stack_Sf_SwigStatic_attributes,
    swig_Int16Stack_Sf_SwigStatic_constants,
    swig_Int16Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Stack_bases[] = {0};
static const char *swig_Int16Stack_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Stack = { "Int16Stack", "Int16Stack", &SWIGTYPE_p_StackT_short_t,_proxy__wrap_new_Int16Stack, swig_delete_Int16Stack, swig_Int16Stack_methods, swig_Int16Stack_attributes, &swig_Int16Stack_Sf_SwigStatic, swig_Int16Stack_meta, swig_Int16Stack_bases, swig_Int16Stack_base_names };

static int _wrap_UInt16Stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *arg1 = (Stack< uint16_t > *) 0 ;
  std::stack< unsigned short > arg2 ;
  std::stack< unsigned short > *argp2 ;
  
  SWIG_check_num_args("Stack< uint16_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint16_t >::s",1,"Stack< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< uint16_t >::s",2,"std::stack< unsigned short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_s_set",1,SWIGTYPE_p_StackT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_s_set",2,SWIGTYPE_p_std__stackT_unsigned_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *arg1 = (Stack< uint16_t > *) 0 ;
  std::stack< unsigned short > result;
  
  SWIG_check_num_args("Stack< uint16_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint16_t >::s",1,"Stack< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_s_get",1,SWIGTYPE_p_StackT_unsigned_short_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< unsigned short > * resultptr = new std::stack< unsigned short >((const std::stack< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Stack< uint16_t >::Stack",0,0)
  result = (Stack< uint16_t > *)new Stack< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *arg1 = (Stack< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint16_t >::empty",1,"Stack< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_empty",1,SWIGTYPE_p_StackT_unsigned_short_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *arg1 = (Stack< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint16_t >::size",1,"Stack< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_size",1,SWIGTYPE_p_StackT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *arg1 = (Stack< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Stack< uint16_t >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint16_t >::top",1,"Stack< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_top",1,SWIGTYPE_p_StackT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *arg1 = (Stack< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("Stack< uint16_t >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint16_t >::push",1,"Stack< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< uint16_t >::push",2,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_push",1,SWIGTYPE_p_StackT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint16_t > *arg1 = (Stack< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Stack< uint16_t >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint16_t >::pop",1,"Stack< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Stack_pop",1,SWIGTYPE_p_StackT_unsigned_short_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Stack(void *obj) {
Stack< uint16_t > *arg1 = (Stack< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Stack_attributes[] = {
    { "s", _wrap_UInt16Stack_s_get, _wrap_UInt16Stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Stack_methods[]= {
    { "empty", _wrap_UInt16Stack_empty},
    { "size", _wrap_UInt16Stack_size},
    { "top", _wrap_UInt16Stack_top},
    { "push", _wrap_UInt16Stack_push},
    { "pop", _wrap_UInt16Stack_pop},
    {0,0}
};
static swig_lua_method swig_UInt16Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt16Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Stack_Sf_SwigStatic = {
    "UInt16Stack",
    swig_UInt16Stack_Sf_SwigStatic_methods,
    swig_UInt16Stack_Sf_SwigStatic_attributes,
    swig_UInt16Stack_Sf_SwigStatic_constants,
    swig_UInt16Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Stack_bases[] = {0};
static const char *swig_UInt16Stack_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Stack = { "UInt16Stack", "UInt16Stack", &SWIGTYPE_p_StackT_unsigned_short_t,_proxy__wrap_new_UInt16Stack, swig_delete_UInt16Stack, swig_UInt16Stack_methods, swig_UInt16Stack_attributes, &swig_UInt16Stack_Sf_SwigStatic, swig_UInt16Stack_meta, swig_UInt16Stack_bases, swig_UInt16Stack_base_names };

static int _wrap_Int32Stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *arg1 = (Stack< int32_t > *) 0 ;
  std::stack< int > arg2 ;
  std::stack< int > *argp2 ;
  
  SWIG_check_num_args("Stack< int32_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int32_t >::s",1,"Stack< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< int32_t >::s",2,"std::stack< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_s_set",1,SWIGTYPE_p_StackT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_s_set",2,SWIGTYPE_p_std__stackT_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *arg1 = (Stack< int32_t > *) 0 ;
  std::stack< int > result;
  
  SWIG_check_num_args("Stack< int32_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int32_t >::s",1,"Stack< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_s_get",1,SWIGTYPE_p_StackT_int_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< int > * resultptr = new std::stack< int >((const std::stack< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Stack< int32_t >::Stack",0,0)
  result = (Stack< int32_t > *)new Stack< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *arg1 = (Stack< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int32_t >::empty",1,"Stack< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_empty",1,SWIGTYPE_p_StackT_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *arg1 = (Stack< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int32_t >::size",1,"Stack< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_size",1,SWIGTYPE_p_StackT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *arg1 = (Stack< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Stack< int32_t >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int32_t >::top",1,"Stack< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_top",1,SWIGTYPE_p_StackT_int_t);
  }
  
  result = (int *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *arg1 = (Stack< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Stack< int32_t >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int32_t >::push",1,"Stack< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< int32_t >::push",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_push",1,SWIGTYPE_p_StackT_int_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< int32_t > *arg1 = (Stack< int32_t > *) 0 ;
  
  SWIG_check_num_args("Stack< int32_t >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< int32_t >::pop",1,"Stack< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_int_t,0))){
    SWIG_fail_ptr("Int32Stack_pop",1,SWIGTYPE_p_StackT_int_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Stack(void *obj) {
Stack< int32_t > *arg1 = (Stack< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Stack_attributes[] = {
    { "s", _wrap_Int32Stack_s_get, _wrap_Int32Stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Stack_methods[]= {
    { "empty", _wrap_Int32Stack_empty},
    { "size", _wrap_Int32Stack_size},
    { "top", _wrap_Int32Stack_top},
    { "push", _wrap_Int32Stack_push},
    { "pop", _wrap_Int32Stack_pop},
    {0,0}
};
static swig_lua_method swig_Int32Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int32Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Stack_Sf_SwigStatic = {
    "Int32Stack",
    swig_Int32Stack_Sf_SwigStatic_methods,
    swig_Int32Stack_Sf_SwigStatic_attributes,
    swig_Int32Stack_Sf_SwigStatic_constants,
    swig_Int32Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Stack_bases[] = {0};
static const char *swig_Int32Stack_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Stack = { "Int32Stack", "Int32Stack", &SWIGTYPE_p_StackT_int_t,_proxy__wrap_new_Int32Stack, swig_delete_Int32Stack, swig_Int32Stack_methods, swig_Int32Stack_attributes, &swig_Int32Stack_Sf_SwigStatic, swig_Int32Stack_meta, swig_Int32Stack_bases, swig_Int32Stack_base_names };

static int _wrap_UInt32Stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *arg1 = (Stack< uint32_t > *) 0 ;
  std::stack< unsigned int > arg2 ;
  std::stack< unsigned int > *argp2 ;
  
  SWIG_check_num_args("Stack< uint32_t >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint32_t >::s",1,"Stack< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< uint32_t >::s",2,"std::stack< unsigned int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_s_set",1,SWIGTYPE_p_StackT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_s_set",2,SWIGTYPE_p_std__stackT_unsigned_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *arg1 = (Stack< uint32_t > *) 0 ;
  std::stack< unsigned int > result;
  
  SWIG_check_num_args("Stack< uint32_t >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint32_t >::s",1,"Stack< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_s_get",1,SWIGTYPE_p_StackT_unsigned_int_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< unsigned int > * resultptr = new std::stack< unsigned int >((const std::stack< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Stack< uint32_t >::Stack",0,0)
  result = (Stack< uint32_t > *)new Stack< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *arg1 = (Stack< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint32_t >::empty",1,"Stack< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_empty",1,SWIGTYPE_p_StackT_unsigned_int_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *arg1 = (Stack< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint32_t >::size",1,"Stack< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_size",1,SWIGTYPE_p_StackT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *arg1 = (Stack< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Stack< uint32_t >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint32_t >::top",1,"Stack< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_top",1,SWIGTYPE_p_StackT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *arg1 = (Stack< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Stack< uint32_t >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint32_t >::push",1,"Stack< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< uint32_t >::push",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_push",1,SWIGTYPE_p_StackT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< uint32_t > *arg1 = (Stack< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Stack< uint32_t >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< uint32_t >::pop",1,"Stack< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Stack_pop",1,SWIGTYPE_p_StackT_unsigned_int_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Stack(void *obj) {
Stack< uint32_t > *arg1 = (Stack< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Stack_attributes[] = {
    { "s", _wrap_UInt32Stack_s_get, _wrap_UInt32Stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Stack_methods[]= {
    { "empty", _wrap_UInt32Stack_empty},
    { "size", _wrap_UInt32Stack_size},
    { "top", _wrap_UInt32Stack_top},
    { "push", _wrap_UInt32Stack_push},
    { "pop", _wrap_UInt32Stack_pop},
    {0,0}
};
static swig_lua_method swig_UInt32Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt32Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Stack_Sf_SwigStatic = {
    "UInt32Stack",
    swig_UInt32Stack_Sf_SwigStatic_methods,
    swig_UInt32Stack_Sf_SwigStatic_attributes,
    swig_UInt32Stack_Sf_SwigStatic_constants,
    swig_UInt32Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Stack_bases[] = {0};
static const char *swig_UInt32Stack_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Stack = { "UInt32Stack", "UInt32Stack", &SWIGTYPE_p_StackT_unsigned_int_t,_proxy__wrap_new_UInt32Stack, swig_delete_UInt32Stack, swig_UInt32Stack_methods, swig_UInt32Stack_attributes, &swig_UInt32Stack_Sf_SwigStatic, swig_UInt32Stack_meta, swig_UInt32Stack_bases, swig_UInt32Stack_base_names };

static int _wrap_Int64Stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *arg1 = (Stack< long long > *) 0 ;
  std::stack< long long > arg2 ;
  std::stack< long long > *argp2 ;
  
  SWIG_check_num_args("Stack< long long >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< long long >::s",1,"Stack< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< long long >::s",2,"std::stack< long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_s_set",1,SWIGTYPE_p_StackT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_s_set",2,SWIGTYPE_p_std__stackT_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *arg1 = (Stack< long long > *) 0 ;
  std::stack< long long > result;
  
  SWIG_check_num_args("Stack< long long >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< long long >::s",1,"Stack< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_s_get",1,SWIGTYPE_p_StackT_long_long_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< long long > * resultptr = new std::stack< long long >((const std::stack< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *result = 0 ;
  
  SWIG_check_num_args("Stack< long long >::Stack",0,0)
  result = (Stack< long long > *)new Stack< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *arg1 = (Stack< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< long long >::empty",1,"Stack< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_empty",1,SWIGTYPE_p_StackT_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *arg1 = (Stack< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< long long >::size",1,"Stack< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_size",1,SWIGTYPE_p_StackT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *arg1 = (Stack< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Stack< long long >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< long long >::top",1,"Stack< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_top",1,SWIGTYPE_p_StackT_long_long_t);
  }
  
  result = (long long *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *arg1 = (Stack< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("Stack< long long >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< long long >::push",1,"Stack< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< long long >::push",2,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_push",1,SWIGTYPE_p_StackT_long_long_t);
  }
  
  arg2 = (long long const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< long long > *arg1 = (Stack< long long > *) 0 ;
  
  SWIG_check_num_args("Stack< long long >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< long long >::pop",1,"Stack< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_long_long_t,0))){
    SWIG_fail_ptr("Int64Stack_pop",1,SWIGTYPE_p_StackT_long_long_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Stack(void *obj) {
Stack< long long > *arg1 = (Stack< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Stack_attributes[] = {
    { "s", _wrap_Int64Stack_s_get, _wrap_Int64Stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Stack_methods[]= {
    { "empty", _wrap_Int64Stack_empty},
    { "size", _wrap_Int64Stack_size},
    { "top", _wrap_Int64Stack_top},
    { "push", _wrap_Int64Stack_push},
    { "pop", _wrap_Int64Stack_pop},
    {0,0}
};
static swig_lua_method swig_Int64Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Int64Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Stack_Sf_SwigStatic = {
    "Int64Stack",
    swig_Int64Stack_Sf_SwigStatic_methods,
    swig_Int64Stack_Sf_SwigStatic_attributes,
    swig_Int64Stack_Sf_SwigStatic_constants,
    swig_Int64Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Stack_bases[] = {0};
static const char *swig_Int64Stack_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Stack = { "Int64Stack", "Int64Stack", &SWIGTYPE_p_StackT_long_long_t,_proxy__wrap_new_Int64Stack, swig_delete_Int64Stack, swig_Int64Stack_methods, swig_Int64Stack_attributes, &swig_Int64Stack_Sf_SwigStatic, swig_Int64Stack_meta, swig_Int64Stack_bases, swig_Int64Stack_base_names };

static int _wrap_UInt64Stack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) 0 ;
  std::stack< unsigned long long > arg2 ;
  std::stack< unsigned long long > *argp2 ;
  
  SWIG_check_num_args("Stack< unsigned long long >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< unsigned long long >::s",1,"Stack< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< unsigned long long >::s",2,"std::stack< unsigned long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_s_set",1,SWIGTYPE_p_StackT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_s_set",2,SWIGTYPE_p_std__stackT_unsigned_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Stack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) 0 ;
  std::stack< unsigned long long > result;
  
  SWIG_check_num_args("Stack< unsigned long long >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< unsigned long long >::s",1,"Stack< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_s_get",1,SWIGTYPE_p_StackT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< unsigned long long > * resultptr = new std::stack< unsigned long long >((const std::stack< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Stack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Stack< unsigned long long >::Stack",0,0)
  result = (Stack< unsigned long long > *)new Stack< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Stack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< unsigned long long >::empty",1,"Stack< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_empty",1,SWIGTYPE_p_StackT_unsigned_long_long_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Stack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< unsigned long long >::size",1,"Stack< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_size",1,SWIGTYPE_p_StackT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Stack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Stack< unsigned long long >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< unsigned long long >::top",1,"Stack< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_top",1,SWIGTYPE_p_StackT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Stack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("Stack< unsigned long long >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< unsigned long long >::push",1,"Stack< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Stack< unsigned long long >::push",2,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_push",1,SWIGTYPE_p_StackT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long const)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Stack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Stack< unsigned long long >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< unsigned long long >::pop",1,"Stack< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Stack_pop",1,SWIGTYPE_p_StackT_unsigned_long_long_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Stack(void *obj) {
Stack< unsigned long long > *arg1 = (Stack< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Stack_attributes[] = {
    { "s", _wrap_UInt64Stack_s_get, _wrap_UInt64Stack_s_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Stack_methods[]= {
    { "empty", _wrap_UInt64Stack_empty},
    { "size", _wrap_UInt64Stack_size},
    { "top", _wrap_UInt64Stack_top},
    { "push", _wrap_UInt64Stack_push},
    { "pop", _wrap_UInt64Stack_pop},
    {0,0}
};
static swig_lua_method swig_UInt64Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UInt64Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Stack_Sf_SwigStatic = {
    "UInt64Stack",
    swig_UInt64Stack_Sf_SwigStatic_methods,
    swig_UInt64Stack_Sf_SwigStatic_attributes,
    swig_UInt64Stack_Sf_SwigStatic_constants,
    swig_UInt64Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Stack_bases[] = {0};
static const char *swig_UInt64Stack_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Stack = { "UInt64Stack", "UInt64Stack", &SWIGTYPE_p_StackT_unsigned_long_long_t,_proxy__wrap_new_UInt64Stack, swig_delete_UInt64Stack, swig_UInt64Stack_methods, swig_UInt64Stack_attributes, &swig_UInt64Stack_Sf_SwigStatic, swig_UInt64Stack_meta, swig_UInt64Stack_bases, swig_UInt64Stack_base_names };

static int _wrap_StringStack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *arg1 = (Stack< string > *) 0 ;
  std::stack< string > arg2 ;
  std::stack< string > *argp2 ;
  
  SWIG_check_num_args("Stack< string >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< string >::s",1,"Stack< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< string >::s",2,"std::stack< string >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_string_t,0))){
    SWIG_fail_ptr("StringStack_s_set",1,SWIGTYPE_p_StackT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_string_t,0))){
    SWIG_fail_ptr("StringStack_s_set",2,SWIGTYPE_p_std__stackT_string_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringStack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *arg1 = (Stack< string > *) 0 ;
  std::stack< string > result;
  
  SWIG_check_num_args("Stack< string >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< string >::s",1,"Stack< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_string_t,0))){
    SWIG_fail_ptr("StringStack_s_get",1,SWIGTYPE_p_StackT_string_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< string > * resultptr = new std::stack< string >((const std::stack< string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringStack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *result = 0 ;
  
  SWIG_check_num_args("Stack< string >::Stack",0,0)
  result = (Stack< string > *)new Stack< string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringStack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *arg1 = (Stack< string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< string >::empty",1,"Stack< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_string_t,0))){
    SWIG_fail_ptr("StringStack_empty",1,SWIGTYPE_p_StackT_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringStack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *arg1 = (Stack< string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< string >::size",1,"Stack< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_string_t,0))){
    SWIG_fail_ptr("StringStack_size",1,SWIGTYPE_p_StackT_string_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringStack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *arg1 = (Stack< string > *) 0 ;
  string *result = 0 ;
  
  SWIG_check_num_args("Stack< string >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< string >::top",1,"Stack< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_string_t,0))){
    SWIG_fail_ptr("StringStack_top",1,SWIGTYPE_p_StackT_string_t);
  }
  
  result = (string *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringStack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *arg1 = (Stack< string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("Stack< string >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< string >::push",1,"Stack< string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< string >::push",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_string_t,0))){
    SWIG_fail_ptr("StringStack_push",1,SWIGTYPE_p_StackT_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StringStack_push",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringStack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< string > *arg1 = (Stack< string > *) 0 ;
  
  SWIG_check_num_args("Stack< string >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< string >::pop",1,"Stack< string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_string_t,0))){
    SWIG_fail_ptr("StringStack_pop",1,SWIGTYPE_p_StackT_string_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringStack(void *obj) {
Stack< string > *arg1 = (Stack< string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringStack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringStack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringStack_attributes[] = {
    { "s", _wrap_StringStack_s_get, _wrap_StringStack_s_set },
    {0,0,0}
};
static swig_lua_method swig_StringStack_methods[]= {
    { "empty", _wrap_StringStack_empty},
    { "size", _wrap_StringStack_size},
    { "top", _wrap_StringStack_top},
    { "push", _wrap_StringStack_push},
    { "pop", _wrap_StringStack_pop},
    {0,0}
};
static swig_lua_method swig_StringStack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StringStack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringStack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringStack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringStack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringStack_Sf_SwigStatic = {
    "StringStack",
    swig_StringStack_Sf_SwigStatic_methods,
    swig_StringStack_Sf_SwigStatic_attributes,
    swig_StringStack_Sf_SwigStatic_constants,
    swig_StringStack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringStack_bases[] = {0};
static const char *swig_StringStack_base_names[] = {0};
static swig_lua_class _wrap_class_StringStack = { "StringStack", "StringStack", &SWIGTYPE_p_StackT_string_t,_proxy__wrap_new_StringStack, swig_delete_StringStack, swig_StringStack_methods, swig_StringStack_attributes, &swig_StringStack_Sf_SwigStatic, swig_StringStack_meta, swig_StringStack_bases, swig_StringStack_base_names };

static int _wrap_PtrStack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *arg1 = (Stack< void * > *) 0 ;
  std::stack< void * > arg2 ;
  std::stack< void * > *argp2 ;
  
  SWIG_check_num_args("Stack< void * >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< void * >::s",1,"Stack< void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< void * >::s",2,"std::stack< void * >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_s_set",1,SWIGTYPE_p_StackT_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_s_set",2,SWIGTYPE_p_std__stackT_void_p_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrStack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *arg1 = (Stack< void * > *) 0 ;
  std::stack< void * > result;
  
  SWIG_check_num_args("Stack< void * >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< void * >::s",1,"Stack< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_s_get",1,SWIGTYPE_p_StackT_void_p_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< void * > * resultptr = new std::stack< void * >((const std::stack< void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrStack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *result = 0 ;
  
  SWIG_check_num_args("Stack< void * >::Stack",0,0)
  result = (Stack< void * > *)new Stack< void * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrStack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *arg1 = (Stack< void * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< void * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< void * >::empty",1,"Stack< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_empty",1,SWIGTYPE_p_StackT_void_p_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrStack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *arg1 = (Stack< void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< void * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< void * >::size",1,"Stack< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_size",1,SWIGTYPE_p_StackT_void_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrStack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *arg1 = (Stack< void * > *) 0 ;
  void **result = 0 ;
  
  SWIG_check_num_args("Stack< void * >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< void * >::top",1,"Stack< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_top",1,SWIGTYPE_p_StackT_void_p_t);
  }
  
  result = (void **) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrStack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *arg1 = (Stack< void * > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  SWIG_check_num_args("Stack< void * >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< void * >::push",1,"Stack< void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Stack< void * >::push",2,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_push",1,SWIGTYPE_p_StackT_void_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PtrStack_push");
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrStack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< void * > *arg1 = (Stack< void * > *) 0 ;
  
  SWIG_check_num_args("Stack< void * >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< void * >::pop",1,"Stack< void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_void_p_t,0))){
    SWIG_fail_ptr("PtrStack_pop",1,SWIGTYPE_p_StackT_void_p_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PtrStack(void *obj) {
Stack< void * > *arg1 = (Stack< void * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PtrStack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PtrStack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PtrStack_attributes[] = {
    { "s", _wrap_PtrStack_s_get, _wrap_PtrStack_s_set },
    {0,0,0}
};
static swig_lua_method swig_PtrStack_methods[]= {
    { "empty", _wrap_PtrStack_empty},
    { "size", _wrap_PtrStack_size},
    { "top", _wrap_PtrStack_top},
    { "push", _wrap_PtrStack_push},
    { "pop", _wrap_PtrStack_pop},
    {0,0}
};
static swig_lua_method swig_PtrStack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PtrStack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PtrStack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PtrStack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PtrStack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PtrStack_Sf_SwigStatic = {
    "PtrStack",
    swig_PtrStack_Sf_SwigStatic_methods,
    swig_PtrStack_Sf_SwigStatic_attributes,
    swig_PtrStack_Sf_SwigStatic_constants,
    swig_PtrStack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PtrStack_bases[] = {0};
static const char *swig_PtrStack_base_names[] = {0};
static swig_lua_class _wrap_class_PtrStack = { "PtrStack", "PtrStack", &SWIGTYPE_p_StackT_void_p_t,_proxy__wrap_new_PtrStack, swig_delete_PtrStack, swig_PtrStack_methods, swig_PtrStack_attributes, &swig_PtrStack_Sf_SwigStatic, swig_PtrStack_meta, swig_PtrStack_bases, swig_PtrStack_base_names };

static int _wrap_BasicStack_s_set(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *arg1 = (Stack< BasicType > *) 0 ;
  std::stack< BasicType > arg2 ;
  std::stack< BasicType > *argp2 ;
  
  SWIG_check_num_args("Stack< BasicType >::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< BasicType >::s",1,"Stack< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< BasicType >::s",2,"std::stack< BasicType >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_s_set",1,SWIGTYPE_p_StackT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__stackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_s_set",2,SWIGTYPE_p_std__stackT_BasicType_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicStack_s_get(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *arg1 = (Stack< BasicType > *) 0 ;
  std::stack< BasicType > result;
  
  SWIG_check_num_args("Stack< BasicType >::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< BasicType >::s",1,"Stack< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_s_get",1,SWIGTYPE_p_StackT_BasicType_t);
  }
  
  result =  ((arg1)->s);
  {
    std::stack< BasicType > * resultptr = new std::stack< BasicType >((const std::stack< BasicType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_BasicType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicStack(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *result = 0 ;
  
  SWIG_check_num_args("Stack< BasicType >::Stack",0,0)
  result = (Stack< BasicType > *)new Stack< BasicType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StackT_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicStack_empty(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *arg1 = (Stack< BasicType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Stack< BasicType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< BasicType >::empty",1,"Stack< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_empty",1,SWIGTYPE_p_StackT_BasicType_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicStack_size(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *arg1 = (Stack< BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Stack< BasicType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< BasicType >::size",1,"Stack< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_size",1,SWIGTYPE_p_StackT_BasicType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicStack_top(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *arg1 = (Stack< BasicType > *) 0 ;
  BasicType *result = 0 ;
  
  SWIG_check_num_args("Stack< BasicType >::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< BasicType >::top",1,"Stack< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_top",1,SWIGTYPE_p_StackT_BasicType_t);
  }
  
  result = (BasicType *) &(arg1)->top();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BasicType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicStack_push(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *arg1 = (Stack< BasicType > *) 0 ;
  BasicType arg2 ;
  BasicType *argp2 ;
  
  SWIG_check_num_args("Stack< BasicType >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< BasicType >::push",1,"Stack< BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stack< BasicType >::push",2,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_push",1,SWIGTYPE_p_StackT_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("BasicStack_push",2,SWIGTYPE_p_BasicType);
  }
  arg2 = *argp2;
  
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicStack_pop(lua_State* L) {
  int SWIG_arg = 0;
  Stack< BasicType > *arg1 = (Stack< BasicType > *) 0 ;
  
  SWIG_check_num_args("Stack< BasicType >::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stack< BasicType >::pop",1,"Stack< BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StackT_BasicType_t,0))){
    SWIG_fail_ptr("BasicStack_pop",1,SWIGTYPE_p_StackT_BasicType_t);
  }
  
  (arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicStack(void *obj) {
Stack< BasicType > *arg1 = (Stack< BasicType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicStack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicStack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicStack_attributes[] = {
    { "s", _wrap_BasicStack_s_get, _wrap_BasicStack_s_set },
    {0,0,0}
};
static swig_lua_method swig_BasicStack_methods[]= {
    { "empty", _wrap_BasicStack_empty},
    { "size", _wrap_BasicStack_size},
    { "top", _wrap_BasicStack_top},
    { "push", _wrap_BasicStack_push},
    { "pop", _wrap_BasicStack_pop},
    {0,0}
};
static swig_lua_method swig_BasicStack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BasicStack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicStack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicStack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicStack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicStack_Sf_SwigStatic = {
    "BasicStack",
    swig_BasicStack_Sf_SwigStatic_methods,
    swig_BasicStack_Sf_SwigStatic_attributes,
    swig_BasicStack_Sf_SwigStatic_constants,
    swig_BasicStack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicStack_bases[] = {0};
static const char *swig_BasicStack_base_names[] = {0};
static swig_lua_class _wrap_class_BasicStack = { "BasicStack", "BasicStack", &SWIGTYPE_p_StackT_BasicType_t,_proxy__wrap_new_BasicStack, swig_delete_BasicStack, swig_BasicStack_methods, swig_BasicStack_attributes, &swig_BasicStack_Sf_SwigStatic, swig_BasicStack_meta, swig_BasicStack_bases, swig_BasicStack_base_names };

static int _wrap_StrMap_m_set(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,string >::m",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::m",1,"AssociativeArray< string,string > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AssociativeArray< string,string >::m",2,"std::map< std::string,std::string,std::less< std::string > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_m_set",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("StrMap_m_set",2,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t);
  }
  
  if (arg1) (arg1)->m = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_m_get(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,string >::m",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::m",1,"AssociativeArray< string,string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_m_get",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  result = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->m);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StrMap(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *result = 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,string >::AssociativeArray",0,0)
  result = (AssociativeArray< string,string > *)new AssociativeArray< string,string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AssociativeArrayT_string_string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_insert(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  string arg2 ;
  string *arg3 = 0 ;
  string *argp2 ;
  
  SWIG_check_num_args("AssociativeArray< string,string >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::insert",1,"AssociativeArray< string,string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,string >::insert",2,"string const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AssociativeArray< string,string >::insert",3,"string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_insert",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap_insert",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap_insert",3,SWIGTYPE_p_string);
  }
  
  (arg1)->insert(arg2,(string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_erase(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("AssociativeArray< string,string >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::erase",1,"AssociativeArray< string,string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,string >::erase",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_erase",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap_erase",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::clear",1,"AssociativeArray< string,string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_clear",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_empty(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("AssociativeArray< string,string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::empty",1,"AssociativeArray< string,string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_empty",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_size(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::size",1,"AssociativeArray< string,string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_size",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_max_size(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::max_size",1,"AssociativeArray< string,string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_max_size",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap___getitem(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  string result;
  
  SWIG_check_num_args("AssociativeArray< string,string >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::__getitem",1,"AssociativeArray< string,string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,string >::__getitem",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap___getitem",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap___getitem",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (arg1)->__getitem(arg2);
  {
    string * resultptr = new string((const string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap___setitem(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  string arg2 ;
  string arg3 ;
  string *argp2 ;
  string *argp3 ;
  
  SWIG_check_num_args("AssociativeArray< string,string >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::__setitem",1,"AssociativeArray< string,string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,string >::__setitem",2,"string const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AssociativeArray< string,string >::__setitem",3,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap___setitem",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap___setitem",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap___setitem",3,SWIGTYPE_p_string);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_find(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  bool result;
  
  SWIG_check_num_args("AssociativeArray< string,string >::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::find",1,"AssociativeArray< string,string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,string >::find",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_find",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap_find",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->find(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StrMap_count(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) 0 ;
  string arg2 ;
  string *argp2 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,string >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,string >::count",1,"AssociativeArray< string,string > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,string >::count",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_string_t,0))){
    SWIG_fail_ptr("StrMap_count",1,SWIGTYPE_p_AssociativeArrayT_string_string_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("StrMap_count",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (arg1)->count(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StrMap(void *obj) {
AssociativeArray< string,string > *arg1 = (AssociativeArray< string,string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StrMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StrMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StrMap_attributes[] = {
    { "m", _wrap_StrMap_m_get, _wrap_StrMap_m_set },
    {0,0,0}
};
static swig_lua_method swig_StrMap_methods[]= {
    { "insert", _wrap_StrMap_insert},
    { "erase", _wrap_StrMap_erase},
    { "clear", _wrap_StrMap_clear},
    { "empty", _wrap_StrMap_empty},
    { "size", _wrap_StrMap_size},
    { "max_size", _wrap_StrMap_max_size},
    { "__getitem", _wrap_StrMap___getitem},
    { "__setitem", _wrap_StrMap___setitem},
    { "find", _wrap_StrMap_find},
    { "count", _wrap_StrMap_count},
    {0,0}
};
static swig_lua_method swig_StrMap_meta[] = {
    { "__getitem", _wrap_StrMap___getitem},
    { "__setitem", _wrap_StrMap___setitem},
    {0,0}
};

static swig_lua_attribute swig_StrMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StrMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StrMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StrMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StrMap_SwigStatic = {
    "StrMap",
    swig_StrMap_SwigStatic_methods,
    swig_StrMap_SwigStatic_attributes,
    swig_StrMap_SwigStatic_constants,
    swig_StrMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StrMap_bases[] = {0};
static const char *swig_StrMap_base_names[] = {0};
static swig_lua_class _wrap_class_StrMap = { "StrMap", "StrMap", &SWIGTYPE_p_AssociativeArrayT_string_string_t,_proxy__wrap_new_StrMap, swig_delete_StrMap, swig_StrMap_methods, swig_StrMap_attributes, &swig_StrMap_SwigStatic, swig_StrMap_meta, swig_StrMap_bases, swig_StrMap_base_names };

static int _wrap_PtrMap_m_set(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  std::map< std::string,void *,std::less< std::string > > *arg2 = (std::map< std::string,void *,std::less< std::string > > *) 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::m",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::m",1,"AssociativeArray< string,void * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AssociativeArray< string,void * >::m",2,"std::map< std::string,void *,std::less< std::string > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_m_set",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_void_p_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("PtrMap_m_set",2,SWIGTYPE_p_std__mapT_std__string_void_p_std__lessT_std__string_t_t);
  }
  
  if (arg1) (arg1)->m = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_m_get(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  std::map< std::string,void *,std::less< std::string > > *result = 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::m",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::m",1,"AssociativeArray< string,void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_m_get",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  result = (std::map< std::string,void *,std::less< std::string > > *)& ((arg1)->m);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_void_p_std__lessT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PtrMap(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *result = 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::AssociativeArray",0,0)
  result = (AssociativeArray< string,void * > *)new AssociativeArray< string,void * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_insert(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  string arg2 ;
  void **arg3 = 0 ;
  string *argp2 ;
  void *temp3 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::insert",1,"AssociativeArray< string,void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,void * >::insert",2,"string const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AssociativeArray< string,void * >::insert",3,"void *const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_insert",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("PtrMap_insert",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  temp3=(void *)SWIG_MustGetPtr(L,3,SWIGTYPE_p_void,0,3,"PtrMap_insert");
  arg3=(void **)&temp3;
  (arg1)->insert(arg2,(void *const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_erase(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::erase",1,"AssociativeArray< string,void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,void * >::erase",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_erase",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("PtrMap_erase",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::clear",1,"AssociativeArray< string,void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_clear",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_empty(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::empty",1,"AssociativeArray< string,void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_empty",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_size(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::size",1,"AssociativeArray< string,void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_size",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_max_size(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::max_size",1,"AssociativeArray< string,void * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_max_size",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap___getitem(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  string arg2 ;
  string *argp2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::__getitem",1,"AssociativeArray< string,void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,void * >::__getitem",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap___getitem",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("PtrMap___getitem",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (void *)(arg1)->__getitem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap___setitem(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  string arg2 ;
  void *arg3 = (void *) (void *)0 ;
  string *argp2 ;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::__setitem",1,"AssociativeArray< string,void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,void * >::__setitem",2,"string const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AssociativeArray< string,void * >::__setitem",3,"void *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap___setitem",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("PtrMap___setitem",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PtrMap___setitem");
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_find(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  string arg2 ;
  string *argp2 ;
  bool result;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::find",1,"AssociativeArray< string,void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,void * >::find",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_find",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("PtrMap_find",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->find(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PtrMap_count(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) 0 ;
  string arg2 ;
  string *argp2 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,void * >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,void * >::count",1,"AssociativeArray< string,void * > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,void * >::count",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t,0))){
    SWIG_fail_ptr("PtrMap_count",1,SWIGTYPE_p_AssociativeArrayT_string_void_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("PtrMap_count",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (arg1)->count(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PtrMap(void *obj) {
AssociativeArray< string,void * > *arg1 = (AssociativeArray< string,void * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PtrMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PtrMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PtrMap_attributes[] = {
    { "m", _wrap_PtrMap_m_get, _wrap_PtrMap_m_set },
    {0,0,0}
};
static swig_lua_method swig_PtrMap_methods[]= {
    { "insert", _wrap_PtrMap_insert},
    { "erase", _wrap_PtrMap_erase},
    { "clear", _wrap_PtrMap_clear},
    { "empty", _wrap_PtrMap_empty},
    { "size", _wrap_PtrMap_size},
    { "max_size", _wrap_PtrMap_max_size},
    { "__getitem", _wrap_PtrMap___getitem},
    { "__setitem", _wrap_PtrMap___setitem},
    { "find", _wrap_PtrMap_find},
    { "count", _wrap_PtrMap_count},
    {0,0}
};
static swig_lua_method swig_PtrMap_meta[] = {
    { "__getitem", _wrap_PtrMap___getitem},
    { "__setitem", _wrap_PtrMap___setitem},
    {0,0}
};

static swig_lua_attribute swig_PtrMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PtrMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PtrMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PtrMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PtrMap_SwigStatic = {
    "PtrMap",
    swig_PtrMap_SwigStatic_methods,
    swig_PtrMap_SwigStatic_attributes,
    swig_PtrMap_SwigStatic_constants,
    swig_PtrMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PtrMap_bases[] = {0};
static const char *swig_PtrMap_base_names[] = {0};
static swig_lua_class _wrap_class_PtrMap = { "PtrMap", "PtrMap", &SWIGTYPE_p_AssociativeArrayT_string_void_p_t,_proxy__wrap_new_PtrMap, swig_delete_PtrMap, swig_PtrMap_methods, swig_PtrMap_attributes, &swig_PtrMap_SwigStatic, swig_PtrMap_meta, swig_PtrMap_bases, swig_PtrMap_base_names };

static int _wrap_Map_m_set(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  std::map< std::string,BasicType,std::less< std::string > > *arg2 = (std::map< std::string,BasicType,std::less< std::string > > *) 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::m",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::m",1,"AssociativeArray< string,BasicType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AssociativeArray< string,BasicType >::m",2,"std::map< std::string,BasicType,std::less< std::string > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_m_set",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("Map_m_set",2,SWIGTYPE_p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t);
  }
  
  if (arg1) (arg1)->m = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_m_get(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  std::map< std::string,BasicType,std::less< std::string > > *result = 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::m",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::m",1,"AssociativeArray< string,BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_m_get",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  result = (std::map< std::string,BasicType,std::less< std::string > > *)& ((arg1)->m);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Map(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *result = 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::AssociativeArray",0,0)
  result = (AssociativeArray< string,BasicType > *)new AssociativeArray< string,BasicType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_insert(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  string arg2 ;
  BasicType *arg3 = 0 ;
  string *argp2 ;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::insert",1,"AssociativeArray< string,BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,BasicType >::insert",2,"string const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AssociativeArray< string,BasicType >::insert",3,"BasicType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_insert",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("Map_insert",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("Map_insert",3,SWIGTYPE_p_BasicType);
  }
  
  (arg1)->insert(arg2,(BasicType const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_erase(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::erase",1,"AssociativeArray< string,BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,BasicType >::erase",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_erase",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("Map_erase",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_clear(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::clear",1,"AssociativeArray< string,BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_clear",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_empty(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::empty",1,"AssociativeArray< string,BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_empty",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_size(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::size",1,"AssociativeArray< string,BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_size",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_max_size(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::max_size",1,"AssociativeArray< string,BasicType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_max_size",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map___getitem(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  string arg2 ;
  string *argp2 ;
  BasicType result;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::__getitem",1,"AssociativeArray< string,BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,BasicType >::__getitem",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map___getitem",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("Map___getitem",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (arg1)->__getitem(arg2);
  {
    BasicType * resultptr = new BasicType((const BasicType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BasicType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map___setitem(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  string arg2 ;
  BasicType arg3 ;
  string *argp2 ;
  BasicType *argp3 ;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::__setitem",1,"AssociativeArray< string,BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,BasicType >::__setitem",2,"string const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AssociativeArray< string,BasicType >::__setitem",3,"BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map___setitem",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("Map___setitem",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BasicType,0))){
    SWIG_fail_ptr("Map___setitem",3,SWIGTYPE_p_BasicType);
  }
  arg3 = *argp3;
  
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_find(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  string arg2 ;
  string *argp2 ;
  bool result;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::find",1,"AssociativeArray< string,BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,BasicType >::find",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_find",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("Map_find",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->find(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Map_count(lua_State* L) {
  int SWIG_arg = 0;
  AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) 0 ;
  string arg2 ;
  string *argp2 ;
  size_t result;
  
  SWIG_check_num_args("AssociativeArray< string,BasicType >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AssociativeArray< string,BasicType >::count",1,"AssociativeArray< string,BasicType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AssociativeArray< string,BasicType >::count",2,"string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,0))){
    SWIG_fail_ptr("Map_count",1,SWIGTYPE_p_AssociativeArrayT_string_BasicType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_string,0))){
    SWIG_fail_ptr("Map_count",2,SWIGTYPE_p_string);
  }
  arg2 = *argp2;
  
  result = (arg1)->count(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Map(void *obj) {
AssociativeArray< string,BasicType > *arg1 = (AssociativeArray< string,BasicType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Map(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Map);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Map_attributes[] = {
    { "m", _wrap_Map_m_get, _wrap_Map_m_set },
    {0,0,0}
};
static swig_lua_method swig_Map_methods[]= {
    { "insert", _wrap_Map_insert},
    { "erase", _wrap_Map_erase},
    { "clear", _wrap_Map_clear},
    { "empty", _wrap_Map_empty},
    { "size", _wrap_Map_size},
    { "max_size", _wrap_Map_max_size},
    { "__getitem", _wrap_Map___getitem},
    { "__setitem", _wrap_Map___setitem},
    { "find", _wrap_Map_find},
    { "count", _wrap_Map_count},
    {0,0}
};
static swig_lua_method swig_Map_meta[] = {
    { "__getitem", _wrap_Map___getitem},
    { "__setitem", _wrap_Map___setitem},
    {0,0}
};

static swig_lua_attribute swig_Map_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Map_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Map_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Map_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Map_SwigStatic = {
    "Map",
    swig_Map_SwigStatic_methods,
    swig_Map_SwigStatic_attributes,
    swig_Map_SwigStatic_constants,
    swig_Map_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Map_bases[] = {0};
static const char *swig_Map_base_names[] = {0};
static swig_lua_class _wrap_class_Map = { "Map", "Map", &SWIGTYPE_p_AssociativeArrayT_string_BasicType_t,_proxy__wrap_new_Map, swig_delete_Map, swig_Map_methods, swig_Map_attributes, &swig_Map_SwigStatic, swig_Map_meta, swig_Map_bases, swig_Map_base_names };

static int _wrap_FloatBuffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("CBuffer< float >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::buffer",1,"CBuffer< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< float >::buffer",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_buffer_set",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatBuffer_buffer_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBuffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("CBuffer< float >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::buffer",1,"CBuffer< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_buffer_get",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  result = (float *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBuffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< float >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::W",1,"CBuffer< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< float >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_W_set",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBuffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< float >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::W",1,"CBuffer< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_W_get",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< float >::CBuffer",0,0)
  result = (CBuffer< float > *)new CBuffer< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< float > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< float >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< float >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< float > *)new CBuffer< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBuffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatBuffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatBuffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< float >::CBuffer()\n"
    "    CBuffer< float >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatBuffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  CBuffer< float > *arg2 = 0 ;
  CBuffer< float > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< float >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::copy",1,"CBuffer< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< float >::copy",2,"CBuffer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_copy",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_copy",2,SWIGTYPE_p_CBufferT_float_t);
  }
  
  result = (CBuffer< float > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBuffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("CBuffer< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::__getitem",1,"CBuffer< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer___getitem",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBuffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("CBuffer< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::__setitem",1,"CBuffer< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< float >::__setitem",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer___setitem",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBuffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::size",1,"CBuffer< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_size",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBuffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< float > *arg1 = (CBuffer< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< float >::resize",1,"CBuffer< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_float_t,0))){
    SWIG_fail_ptr("FloatBuffer_resize",1,SWIGTYPE_p_CBufferT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatBuffer(void *obj) {
CBuffer< float > *arg1 = (CBuffer< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBuffer_attributes[] = {
    { "buffer", _wrap_FloatBuffer_buffer_get, _wrap_FloatBuffer_buffer_set },
    { "W", _wrap_FloatBuffer_W_get, _wrap_FloatBuffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBuffer_methods[]= {
    { "copy", _wrap_FloatBuffer_copy},
    { "__getitem", _wrap_FloatBuffer___getitem},
    { "__setitem", _wrap_FloatBuffer___setitem},
    { "size", _wrap_FloatBuffer_size},
    { "resize", _wrap_FloatBuffer_resize},
    {0,0}
};
static swig_lua_method swig_FloatBuffer_meta[] = {
    { "__getitem", _wrap_FloatBuffer___getitem},
    { "__setitem", _wrap_FloatBuffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBuffer_Sf_SwigStatic = {
    "FloatBuffer",
    swig_FloatBuffer_Sf_SwigStatic_methods,
    swig_FloatBuffer_Sf_SwigStatic_attributes,
    swig_FloatBuffer_Sf_SwigStatic_constants,
    swig_FloatBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBuffer_bases[] = {0};
static const char *swig_FloatBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBuffer = { "FloatBuffer", "FloatBuffer", &SWIGTYPE_p_CBufferT_float_t,_proxy__wrap_new_FloatBuffer, swig_delete_FloatBuffer, swig_FloatBuffer_methods, swig_FloatBuffer_attributes, &swig_FloatBuffer_Sf_SwigStatic, swig_FloatBuffer_meta, swig_FloatBuffer_bases, swig_FloatBuffer_base_names };

static int _wrap_DoubleBuffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("CBuffer< double >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::buffer",1,"CBuffer< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< double >::buffer",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_buffer_set",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DoubleBuffer_buffer_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBuffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("CBuffer< double >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::buffer",1,"CBuffer< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_buffer_get",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  result = (double *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBuffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< double >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::W",1,"CBuffer< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< double >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_W_set",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBuffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< double >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::W",1,"CBuffer< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_W_get",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< double >::CBuffer",0,0)
  result = (CBuffer< double > *)new CBuffer< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< double > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< double >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< double >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< double > *)new CBuffer< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBuffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleBuffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleBuffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< double >::CBuffer()\n"
    "    CBuffer< double >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleBuffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  CBuffer< double > *arg2 = 0 ;
  CBuffer< double > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< double >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::copy",1,"CBuffer< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< double >::copy",2,"CBuffer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_copy",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_copy",2,SWIGTYPE_p_CBufferT_double_t);
  }
  
  result = (CBuffer< double > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBuffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("CBuffer< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::__getitem",1,"CBuffer< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer___getitem",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBuffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("CBuffer< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::__setitem",1,"CBuffer< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< double >::__setitem",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer___setitem",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBuffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::size",1,"CBuffer< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_size",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBuffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< double > *arg1 = (CBuffer< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< double >::resize",1,"CBuffer< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_double_t,0))){
    SWIG_fail_ptr("DoubleBuffer_resize",1,SWIGTYPE_p_CBufferT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleBuffer(void *obj) {
CBuffer< double > *arg1 = (CBuffer< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleBuffer_attributes[] = {
    { "buffer", _wrap_DoubleBuffer_buffer_get, _wrap_DoubleBuffer_buffer_set },
    { "W", _wrap_DoubleBuffer_W_get, _wrap_DoubleBuffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleBuffer_methods[]= {
    { "copy", _wrap_DoubleBuffer_copy},
    { "__getitem", _wrap_DoubleBuffer___getitem},
    { "__setitem", _wrap_DoubleBuffer___setitem},
    { "size", _wrap_DoubleBuffer_size},
    { "resize", _wrap_DoubleBuffer_resize},
    {0,0}
};
static swig_lua_method swig_DoubleBuffer_meta[] = {
    { "__getitem", _wrap_DoubleBuffer___getitem},
    { "__setitem", _wrap_DoubleBuffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_DoubleBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleBuffer_Sf_SwigStatic = {
    "DoubleBuffer",
    swig_DoubleBuffer_Sf_SwigStatic_methods,
    swig_DoubleBuffer_Sf_SwigStatic_attributes,
    swig_DoubleBuffer_Sf_SwigStatic_constants,
    swig_DoubleBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleBuffer_bases[] = {0};
static const char *swig_DoubleBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleBuffer = { "DoubleBuffer", "DoubleBuffer", &SWIGTYPE_p_CBufferT_double_t,_proxy__wrap_new_DoubleBuffer, swig_delete_DoubleBuffer, swig_DoubleBuffer_methods, swig_DoubleBuffer_attributes, &swig_DoubleBuffer_Sf_SwigStatic, swig_DoubleBuffer_meta, swig_DoubleBuffer_bases, swig_DoubleBuffer_base_names };

static int _wrap_CharBuffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CBuffer< char >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::buffer",1,"CBuffer< char > *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CBuffer< char >::buffer",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_buffer_set",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->buffer;
    if (arg2) {
      arg1->buffer = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->buffer, (const char *)arg2);
    } else {
      arg1->buffer = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharBuffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CBuffer< char >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::buffer",1,"CBuffer< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_buffer_get",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  result = (char *) ((arg1)->buffer);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharBuffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< char >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::W",1,"CBuffer< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< char >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_W_set",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharBuffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< char >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::W",1,"CBuffer< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_W_get",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CharBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< char >::CBuffer",0,0)
  result = (CBuffer< char > *)new CBuffer< char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CharBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< char > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< char >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< char >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< char > *)new CBuffer< char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CharBuffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CharBuffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CharBuffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CharBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< char >::CBuffer()\n"
    "    CBuffer< char >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_CharBuffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  CBuffer< char > *arg2 = 0 ;
  CBuffer< char > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< char >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::copy",1,"CBuffer< char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< char >::copy",2,"CBuffer< char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_copy",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_copy",2,SWIGTYPE_p_CBufferT_char_t);
  }
  
  result = (CBuffer< char > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharBuffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("CBuffer< char >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::__getitem",1,"CBuffer< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< char >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer___getitem",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)(arg1)->__getitem(arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharBuffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("CBuffer< char >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::__setitem",1,"CBuffer< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< char >::__setitem",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CBuffer< char >::__setitem",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer___setitem",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharBuffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::size",1,"CBuffer< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_size",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharBuffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< char > *arg1 = (CBuffer< char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< char >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< char >::resize",1,"CBuffer< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< char >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_char_t,0))){
    SWIG_fail_ptr("CharBuffer_resize",1,SWIGTYPE_p_CBufferT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CharBuffer(void *obj) {
CBuffer< char > *arg1 = (CBuffer< char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_CharBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CharBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CharBuffer_attributes[] = {
    { "buffer", _wrap_CharBuffer_buffer_get, _wrap_CharBuffer_buffer_set },
    { "W", _wrap_CharBuffer_W_get, _wrap_CharBuffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_CharBuffer_methods[]= {
    { "copy", _wrap_CharBuffer_copy},
    { "__getitem", _wrap_CharBuffer___getitem},
    { "__setitem", _wrap_CharBuffer___setitem},
    { "size", _wrap_CharBuffer_size},
    { "resize", _wrap_CharBuffer_resize},
    {0,0}
};
static swig_lua_method swig_CharBuffer_meta[] = {
    { "__getitem", _wrap_CharBuffer___getitem},
    { "__setitem", _wrap_CharBuffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_CharBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CharBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CharBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CharBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CharBuffer_Sf_SwigStatic = {
    "CharBuffer",
    swig_CharBuffer_Sf_SwigStatic_methods,
    swig_CharBuffer_Sf_SwigStatic_attributes,
    swig_CharBuffer_Sf_SwigStatic_constants,
    swig_CharBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CharBuffer_bases[] = {0};
static const char *swig_CharBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_CharBuffer = { "CharBuffer", "CharBuffer", &SWIGTYPE_p_CBufferT_char_t,_proxy__wrap_new_CharBuffer, swig_delete_CharBuffer, swig_CharBuffer_methods, swig_CharBuffer_attributes, &swig_CharBuffer_Sf_SwigStatic, swig_CharBuffer_meta, swig_CharBuffer_bases, swig_CharBuffer_base_names };

static int _wrap_Int8Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  signed char *arg2 = (signed char *) 0 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::buffer",1,"CBuffer< int8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< int8_t >::buffer",2,"signed char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_signed_char,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Int8Buffer_buffer_set",2,SWIGTYPE_p_signed_char);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::buffer",1,"CBuffer< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  result = (signed char *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::W",1,"CBuffer< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int8_t >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_W_set",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< int8_t >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::W",1,"CBuffer< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_W_get",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::CBuffer",0,0)
  result = (CBuffer< int8_t > *)new CBuffer< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< int8_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< int8_t >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< int8_t > *)new CBuffer< int8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< int8_t >::CBuffer()\n"
    "    CBuffer< int8_t >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  CBuffer< signed char > *arg2 = 0 ;
  CBuffer< signed char > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::copy",1,"CBuffer< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< int8_t >::copy",2,"CBuffer< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_copy",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_copy",2,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  result = (CBuffer< signed char > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("CBuffer< int8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::__getitem",1,"CBuffer< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer___getitem",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::__setitem",1,"CBuffer< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int8_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< int8_t >::__setitem",3,"signed char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer___setitem",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::size",1,"CBuffer< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_size",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< int8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int8_t >::resize",1,"CBuffer< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Buffer_resize",1,SWIGTYPE_p_CBufferT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Buffer(void *obj) {
CBuffer< int8_t > *arg1 = (CBuffer< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Buffer_attributes[] = {
    { "buffer", _wrap_Int8Buffer_buffer_get, _wrap_Int8Buffer_buffer_set },
    { "W", _wrap_Int8Buffer_W_get, _wrap_Int8Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Buffer_methods[]= {
    { "copy", _wrap_Int8Buffer_copy},
    { "__getitem", _wrap_Int8Buffer___getitem},
    { "__setitem", _wrap_Int8Buffer___setitem},
    { "size", _wrap_Int8Buffer_size},
    { "resize", _wrap_Int8Buffer_resize},
    {0,0}
};
static swig_lua_method swig_Int8Buffer_meta[] = {
    { "__getitem", _wrap_Int8Buffer___getitem},
    { "__setitem", _wrap_Int8Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int8Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Buffer_Sf_SwigStatic = {
    "Int8Buffer",
    swig_Int8Buffer_Sf_SwigStatic_methods,
    swig_Int8Buffer_Sf_SwigStatic_attributes,
    swig_Int8Buffer_Sf_SwigStatic_constants,
    swig_Int8Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Buffer_bases[] = {0};
static const char *swig_Int8Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Buffer = { "Int8Buffer", "Int8Buffer", &SWIGTYPE_p_CBufferT_signed_char_t,_proxy__wrap_new_Int8Buffer, swig_delete_Int8Buffer, swig_Int8Buffer_methods, swig_Int8Buffer_attributes, &swig_Int8Buffer_Sf_SwigStatic, swig_Int8Buffer_meta, swig_Int8Buffer_bases, swig_Int8Buffer_base_names };

static int _wrap_UInt8Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::buffer",1,"CBuffer< uint8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< uint8_t >::buffer",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("UInt8Buffer_buffer_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::buffer",1,"CBuffer< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  result = (unsigned char *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::W",1,"CBuffer< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint8_t >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_W_set",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< uint8_t >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::W",1,"CBuffer< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_W_get",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::CBuffer",0,0)
  result = (CBuffer< uint8_t > *)new CBuffer< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< uint8_t > *)new CBuffer< uint8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< uint8_t >::CBuffer()\n"
    "    CBuffer< uint8_t >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  CBuffer< unsigned char > *arg2 = 0 ;
  CBuffer< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::copy",1,"CBuffer< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< uint8_t >::copy",2,"CBuffer< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_copy",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_copy",2,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  result = (CBuffer< unsigned char > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("CBuffer< uint8_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::__getitem",1,"CBuffer< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint8_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer___getitem",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::__setitem",1,"CBuffer< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint8_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< uint8_t >::__setitem",3,"unsigned char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer___setitem",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::size",1,"CBuffer< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_size",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< uint8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint8_t >::resize",1,"CBuffer< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Buffer_resize",1,SWIGTYPE_p_CBufferT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8Buffer(void *obj) {
CBuffer< uint8_t > *arg1 = (CBuffer< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Buffer_attributes[] = {
    { "buffer", _wrap_UInt8Buffer_buffer_get, _wrap_UInt8Buffer_buffer_set },
    { "W", _wrap_UInt8Buffer_W_get, _wrap_UInt8Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Buffer_methods[]= {
    { "copy", _wrap_UInt8Buffer_copy},
    { "__getitem", _wrap_UInt8Buffer___getitem},
    { "__setitem", _wrap_UInt8Buffer___setitem},
    { "size", _wrap_UInt8Buffer_size},
    { "resize", _wrap_UInt8Buffer_resize},
    {0,0}
};
static swig_lua_method swig_UInt8Buffer_meta[] = {
    { "__getitem", _wrap_UInt8Buffer___getitem},
    { "__setitem", _wrap_UInt8Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt8Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Buffer_Sf_SwigStatic = {
    "UInt8Buffer",
    swig_UInt8Buffer_Sf_SwigStatic_methods,
    swig_UInt8Buffer_Sf_SwigStatic_attributes,
    swig_UInt8Buffer_Sf_SwigStatic_constants,
    swig_UInt8Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Buffer_bases[] = {0};
static const char *swig_UInt8Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8Buffer = { "UInt8Buffer", "UInt8Buffer", &SWIGTYPE_p_CBufferT_unsigned_char_t,_proxy__wrap_new_UInt8Buffer, swig_delete_UInt8Buffer, swig_UInt8Buffer_methods, swig_UInt8Buffer_attributes, &swig_UInt8Buffer_Sf_SwigStatic, swig_UInt8Buffer_meta, swig_UInt8Buffer_bases, swig_UInt8Buffer_base_names };

static int _wrap_Int16Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  short *arg2 = (short *) 0 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::buffer",1,"CBuffer< int16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< int16_t >::buffer",2,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Int16Buffer_buffer_set",2,SWIGTYPE_p_short);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::buffer",1,"CBuffer< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  result = (short *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::W",1,"CBuffer< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int16_t >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_W_set",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< int16_t >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::W",1,"CBuffer< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_W_get",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::CBuffer",0,0)
  result = (CBuffer< int16_t > *)new CBuffer< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< int16_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< int16_t >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< int16_t > *)new CBuffer< int16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< int16_t >::CBuffer()\n"
    "    CBuffer< int16_t >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  CBuffer< short > *arg2 = 0 ;
  CBuffer< short > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::copy",1,"CBuffer< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< int16_t >::copy",2,"CBuffer< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_copy",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_copy",2,SWIGTYPE_p_CBufferT_short_t);
  }
  
  result = (CBuffer< short > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("CBuffer< int16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::__getitem",1,"CBuffer< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer___getitem",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::__setitem",1,"CBuffer< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int16_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< int16_t >::__setitem",3,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer___setitem",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::size",1,"CBuffer< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_size",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< int16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int16_t >::resize",1,"CBuffer< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_short_t,0))){
    SWIG_fail_ptr("Int16Buffer_resize",1,SWIGTYPE_p_CBufferT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Buffer(void *obj) {
CBuffer< int16_t > *arg1 = (CBuffer< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Buffer_attributes[] = {
    { "buffer", _wrap_Int16Buffer_buffer_get, _wrap_Int16Buffer_buffer_set },
    { "W", _wrap_Int16Buffer_W_get, _wrap_Int16Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Buffer_methods[]= {
    { "copy", _wrap_Int16Buffer_copy},
    { "__getitem", _wrap_Int16Buffer___getitem},
    { "__setitem", _wrap_Int16Buffer___setitem},
    { "size", _wrap_Int16Buffer_size},
    { "resize", _wrap_Int16Buffer_resize},
    {0,0}
};
static swig_lua_method swig_Int16Buffer_meta[] = {
    { "__getitem", _wrap_Int16Buffer___getitem},
    { "__setitem", _wrap_Int16Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int16Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Buffer_Sf_SwigStatic = {
    "Int16Buffer",
    swig_Int16Buffer_Sf_SwigStatic_methods,
    swig_Int16Buffer_Sf_SwigStatic_attributes,
    swig_Int16Buffer_Sf_SwigStatic_constants,
    swig_Int16Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Buffer_bases[] = {0};
static const char *swig_Int16Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Buffer = { "Int16Buffer", "Int16Buffer", &SWIGTYPE_p_CBufferT_short_t,_proxy__wrap_new_Int16Buffer, swig_delete_Int16Buffer, swig_Int16Buffer_methods, swig_Int16Buffer_attributes, &swig_Int16Buffer_Sf_SwigStatic, swig_Int16Buffer_meta, swig_Int16Buffer_bases, swig_Int16Buffer_base_names };

static int _wrap_UInt16Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::buffer",1,"CBuffer< uint16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< uint16_t >::buffer",2,"unsigned short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("UInt16Buffer_buffer_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::buffer",1,"CBuffer< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  result = (unsigned short *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::W",1,"CBuffer< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint16_t >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_W_set",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< uint16_t >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::W",1,"CBuffer< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_W_get",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::CBuffer",0,0)
  result = (CBuffer< uint16_t > *)new CBuffer< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< uint16_t > *)new CBuffer< uint16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< uint16_t >::CBuffer()\n"
    "    CBuffer< uint16_t >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  CBuffer< unsigned short > *arg2 = 0 ;
  CBuffer< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::copy",1,"CBuffer< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< uint16_t >::copy",2,"CBuffer< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_copy",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_copy",2,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  result = (CBuffer< unsigned short > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("CBuffer< uint16_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::__getitem",1,"CBuffer< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint16_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer___getitem",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::__setitem",1,"CBuffer< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint16_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< uint16_t >::__setitem",3,"unsigned short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer___setitem",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::size",1,"CBuffer< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_size",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< uint16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint16_t >::resize",1,"CBuffer< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Buffer_resize",1,SWIGTYPE_p_CBufferT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Buffer(void *obj) {
CBuffer< uint16_t > *arg1 = (CBuffer< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Buffer_attributes[] = {
    { "buffer", _wrap_UInt16Buffer_buffer_get, _wrap_UInt16Buffer_buffer_set },
    { "W", _wrap_UInt16Buffer_W_get, _wrap_UInt16Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Buffer_methods[]= {
    { "copy", _wrap_UInt16Buffer_copy},
    { "__getitem", _wrap_UInt16Buffer___getitem},
    { "__setitem", _wrap_UInt16Buffer___setitem},
    { "size", _wrap_UInt16Buffer_size},
    { "resize", _wrap_UInt16Buffer_resize},
    {0,0}
};
static swig_lua_method swig_UInt16Buffer_meta[] = {
    { "__getitem", _wrap_UInt16Buffer___getitem},
    { "__setitem", _wrap_UInt16Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt16Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Buffer_Sf_SwigStatic = {
    "UInt16Buffer",
    swig_UInt16Buffer_Sf_SwigStatic_methods,
    swig_UInt16Buffer_Sf_SwigStatic_attributes,
    swig_UInt16Buffer_Sf_SwigStatic_constants,
    swig_UInt16Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Buffer_bases[] = {0};
static const char *swig_UInt16Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Buffer = { "UInt16Buffer", "UInt16Buffer", &SWIGTYPE_p_CBufferT_unsigned_short_t,_proxy__wrap_new_UInt16Buffer, swig_delete_UInt16Buffer, swig_UInt16Buffer_methods, swig_UInt16Buffer_attributes, &swig_UInt16Buffer_Sf_SwigStatic, swig_UInt16Buffer_meta, swig_UInt16Buffer_bases, swig_UInt16Buffer_base_names };

static int _wrap_Int32Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::buffer",1,"CBuffer< int32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< int32_t >::buffer",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Int32Buffer_buffer_set",2,SWIGTYPE_p_int);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::buffer",1,"CBuffer< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  result = (int *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::W",1,"CBuffer< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int32_t >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_W_set",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< int32_t >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::W",1,"CBuffer< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_W_get",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::CBuffer",0,0)
  result = (CBuffer< int32_t > *)new CBuffer< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< int32_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< int32_t >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< int32_t > *)new CBuffer< int32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< int32_t >::CBuffer()\n"
    "    CBuffer< int32_t >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  CBuffer< int > *arg2 = 0 ;
  CBuffer< int > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::copy",1,"CBuffer< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< int32_t >::copy",2,"CBuffer< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_copy",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_copy",2,SWIGTYPE_p_CBufferT_int_t);
  }
  
  result = (CBuffer< int > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("CBuffer< int32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::__getitem",1,"CBuffer< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer___getitem",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::__setitem",1,"CBuffer< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int32_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< int32_t >::__setitem",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer___setitem",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::size",1,"CBuffer< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_size",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< int32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< int32_t >::resize",1,"CBuffer< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< int32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_int_t,0))){
    SWIG_fail_ptr("Int32Buffer_resize",1,SWIGTYPE_p_CBufferT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Buffer(void *obj) {
CBuffer< int32_t > *arg1 = (CBuffer< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Buffer_attributes[] = {
    { "buffer", _wrap_Int32Buffer_buffer_get, _wrap_Int32Buffer_buffer_set },
    { "W", _wrap_Int32Buffer_W_get, _wrap_Int32Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Buffer_methods[]= {
    { "copy", _wrap_Int32Buffer_copy},
    { "__getitem", _wrap_Int32Buffer___getitem},
    { "__setitem", _wrap_Int32Buffer___setitem},
    { "size", _wrap_Int32Buffer_size},
    { "resize", _wrap_Int32Buffer_resize},
    {0,0}
};
static swig_lua_method swig_Int32Buffer_meta[] = {
    { "__getitem", _wrap_Int32Buffer___getitem},
    { "__setitem", _wrap_Int32Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int32Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Buffer_Sf_SwigStatic = {
    "Int32Buffer",
    swig_Int32Buffer_Sf_SwigStatic_methods,
    swig_Int32Buffer_Sf_SwigStatic_attributes,
    swig_Int32Buffer_Sf_SwigStatic_constants,
    swig_Int32Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Buffer_bases[] = {0};
static const char *swig_Int32Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Buffer = { "Int32Buffer", "Int32Buffer", &SWIGTYPE_p_CBufferT_int_t,_proxy__wrap_new_Int32Buffer, swig_delete_Int32Buffer, swig_Int32Buffer_methods, swig_Int32Buffer_attributes, &swig_Int32Buffer_Sf_SwigStatic, swig_Int32Buffer_meta, swig_Int32Buffer_bases, swig_Int32Buffer_base_names };

static int _wrap_UInt32Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::buffer",1,"CBuffer< uint32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< uint32_t >::buffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("UInt32Buffer_buffer_set",2,SWIGTYPE_p_unsigned_int);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::buffer",1,"CBuffer< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  result = (unsigned int *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::W",1,"CBuffer< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint32_t >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_W_set",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< uint32_t >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::W",1,"CBuffer< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_W_get",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::CBuffer",0,0)
  result = (CBuffer< uint32_t > *)new CBuffer< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< uint32_t > *)new CBuffer< uint32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< uint32_t >::CBuffer()\n"
    "    CBuffer< uint32_t >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  CBuffer< unsigned int > *arg2 = 0 ;
  CBuffer< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::copy",1,"CBuffer< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< uint32_t >::copy",2,"CBuffer< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_copy",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_copy",2,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  result = (CBuffer< unsigned int > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("CBuffer< uint32_t >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::__getitem",1,"CBuffer< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint32_t >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer___getitem",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::__setitem",1,"CBuffer< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint32_t >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< uint32_t >::__setitem",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer___setitem",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::size",1,"CBuffer< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_size",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< uint32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< uint32_t >::resize",1,"CBuffer< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< uint32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Buffer_resize",1,SWIGTYPE_p_CBufferT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Buffer(void *obj) {
CBuffer< uint32_t > *arg1 = (CBuffer< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Buffer_attributes[] = {
    { "buffer", _wrap_UInt32Buffer_buffer_get, _wrap_UInt32Buffer_buffer_set },
    { "W", _wrap_UInt32Buffer_W_get, _wrap_UInt32Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Buffer_methods[]= {
    { "copy", _wrap_UInt32Buffer_copy},
    { "__getitem", _wrap_UInt32Buffer___getitem},
    { "__setitem", _wrap_UInt32Buffer___setitem},
    { "size", _wrap_UInt32Buffer_size},
    { "resize", _wrap_UInt32Buffer_resize},
    {0,0}
};
static swig_lua_method swig_UInt32Buffer_meta[] = {
    { "__getitem", _wrap_UInt32Buffer___getitem},
    { "__setitem", _wrap_UInt32Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt32Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Buffer_Sf_SwigStatic = {
    "UInt32Buffer",
    swig_UInt32Buffer_Sf_SwigStatic_methods,
    swig_UInt32Buffer_Sf_SwigStatic_attributes,
    swig_UInt32Buffer_Sf_SwigStatic_constants,
    swig_UInt32Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Buffer_bases[] = {0};
static const char *swig_UInt32Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Buffer = { "UInt32Buffer", "UInt32Buffer", &SWIGTYPE_p_CBufferT_unsigned_int_t,_proxy__wrap_new_UInt32Buffer, swig_delete_UInt32Buffer, swig_UInt32Buffer_methods, swig_UInt32Buffer_attributes, &swig_UInt32Buffer_Sf_SwigStatic, swig_UInt32Buffer_meta, swig_UInt32Buffer_bases, swig_UInt32Buffer_base_names };

static int _wrap_Int64Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  long long *arg2 = (long long *) 0 ;
  
  SWIG_check_num_args("CBuffer< long long >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::buffer",1,"CBuffer< long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< long long >::buffer",2,"long long *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Int64Buffer_buffer_set",2,SWIGTYPE_p_long_long);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("CBuffer< long long >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::buffer",1,"CBuffer< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  result = (long long *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< long long >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::W",1,"CBuffer< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< long long >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_W_set",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< long long >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::W",1,"CBuffer< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_W_get",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< long long >::CBuffer",0,0)
  result = (CBuffer< long long > *)new CBuffer< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< long long > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< long long >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< long long >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< long long > *)new CBuffer< long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int64Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< long long >::CBuffer()\n"
    "    CBuffer< long long >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  CBuffer< long long > *arg2 = 0 ;
  CBuffer< long long > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::copy",1,"CBuffer< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< long long >::copy",2,"CBuffer< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_copy",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_copy",2,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  result = (CBuffer< long long > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("CBuffer< long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::__getitem",1,"CBuffer< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer___getitem",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("CBuffer< long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::__setitem",1,"CBuffer< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< long long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< long long >::__setitem",3,"long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer___setitem",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::size",1,"CBuffer< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_size",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< long long > *arg1 = (CBuffer< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< long long >::resize",1,"CBuffer< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_long_long_t,0))){
    SWIG_fail_ptr("Int64Buffer_resize",1,SWIGTYPE_p_CBufferT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Buffer(void *obj) {
CBuffer< long long > *arg1 = (CBuffer< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Buffer_attributes[] = {
    { "buffer", _wrap_Int64Buffer_buffer_get, _wrap_Int64Buffer_buffer_set },
    { "W", _wrap_Int64Buffer_W_get, _wrap_Int64Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Buffer_methods[]= {
    { "copy", _wrap_Int64Buffer_copy},
    { "__getitem", _wrap_Int64Buffer___getitem},
    { "__setitem", _wrap_Int64Buffer___setitem},
    { "size", _wrap_Int64Buffer_size},
    { "resize", _wrap_Int64Buffer_resize},
    {0,0}
};
static swig_lua_method swig_Int64Buffer_meta[] = {
    { "__getitem", _wrap_Int64Buffer___getitem},
    { "__setitem", _wrap_Int64Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_Int64Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Buffer_Sf_SwigStatic = {
    "Int64Buffer",
    swig_Int64Buffer_Sf_SwigStatic_methods,
    swig_Int64Buffer_Sf_SwigStatic_attributes,
    swig_Int64Buffer_Sf_SwigStatic_constants,
    swig_Int64Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Buffer_bases[] = {0};
static const char *swig_Int64Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Buffer = { "Int64Buffer", "Int64Buffer", &SWIGTYPE_p_CBufferT_long_long_t,_proxy__wrap_new_Int64Buffer, swig_delete_Int64Buffer, swig_Int64Buffer_methods, swig_Int64Buffer_attributes, &swig_Int64Buffer_Sf_SwigStatic, swig_Int64Buffer_meta, swig_Int64Buffer_bases, swig_Int64Buffer_base_names };

static int _wrap_UInt64Buffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::buffer",1,"CBuffer< unsigned long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBuffer< unsigned long long >::buffer",2,"unsigned long long *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_buffer_set",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_long_long,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("UInt64Buffer_buffer_set",2,SWIGTYPE_p_unsigned_long_long);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Buffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::buffer",1,"CBuffer< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_buffer_get",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Buffer_W_set(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::W",1,"CBuffer< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< unsigned long long >::W",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_W_set",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Buffer_W_get(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::W",1,"CBuffer< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_W_get",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::CBuffer",0,0)
  result = (CBuffer< unsigned long long > *)new CBuffer< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  CBuffer< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::CBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::CBuffer",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (CBuffer< unsigned long long > *)new CBuffer< unsigned long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Buffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64Buffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt64Buffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64Buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBuffer< unsigned long long >::CBuffer()\n"
    "    CBuffer< unsigned long long >::CBuffer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Buffer_copy(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  CBuffer< unsigned long long > *arg2 = 0 ;
  CBuffer< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::copy",1,"CBuffer< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CBuffer< unsigned long long >::copy",2,"CBuffer< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_copy",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_copy",2,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  result = (CBuffer< unsigned long long > *) &(arg1)->copy(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Buffer___getitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::__getitem",1,"CBuffer< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< unsigned long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer___getitem",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Buffer___setitem(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::__setitem",1,"CBuffer< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< unsigned long long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBuffer< unsigned long long >::__setitem",3,"unsigned long long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer___setitem",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long const)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Buffer_size(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::size",1,"CBuffer< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_size",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Buffer_resize(lua_State* L) {
  int SWIG_arg = 0;
  CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CBuffer< unsigned long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBuffer< unsigned long long >::resize",1,"CBuffer< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBuffer< unsigned long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBufferT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Buffer_resize",1,SWIGTYPE_p_CBufferT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Buffer(void *obj) {
CBuffer< unsigned long long > *arg1 = (CBuffer< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Buffer_attributes[] = {
    { "buffer", _wrap_UInt64Buffer_buffer_get, _wrap_UInt64Buffer_buffer_set },
    { "W", _wrap_UInt64Buffer_W_get, _wrap_UInt64Buffer_W_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Buffer_methods[]= {
    { "copy", _wrap_UInt64Buffer_copy},
    { "__getitem", _wrap_UInt64Buffer___getitem},
    { "__setitem", _wrap_UInt64Buffer___setitem},
    { "size", _wrap_UInt64Buffer_size},
    { "resize", _wrap_UInt64Buffer_resize},
    {0,0}
};
static swig_lua_method swig_UInt64Buffer_meta[] = {
    { "__getitem", _wrap_UInt64Buffer___getitem},
    { "__setitem", _wrap_UInt64Buffer___setitem},
    {0,0}
};

static swig_lua_attribute swig_UInt64Buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Buffer_Sf_SwigStatic = {
    "UInt64Buffer",
    swig_UInt64Buffer_Sf_SwigStatic_methods,
    swig_UInt64Buffer_Sf_SwigStatic_attributes,
    swig_UInt64Buffer_Sf_SwigStatic_constants,
    swig_UInt64Buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Buffer_bases[] = {0};
static const char *swig_UInt64Buffer_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Buffer = { "UInt64Buffer", "UInt64Buffer", &SWIGTYPE_p_CBufferT_unsigned_long_long_t,_proxy__wrap_new_UInt64Buffer, swig_delete_UInt64Buffer, swig_UInt64Buffer_methods, swig_UInt64Buffer_attributes, &swig_UInt64Buffer_Sf_SwigStatic, swig_UInt64Buffer_meta, swig_UInt64Buffer_bases, swig_UInt64Buffer_base_names };

static int _wrap_CSVParser_m_set(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  std::vector< std::vector< std::string > > *arg2 = (std::vector< std::vector< std::string > > *) 0 ;
  
  SWIG_check_num_args("CSVParser::m",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::m",1,"CSVParser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSVParser::m",2,"std::vector< std::vector< std::string > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_m_set",1,SWIGTYPE_p_CSVParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t,0))){
    SWIG_fail_ptr("CSVParser_m_set",2,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t);
  }
  
  if (arg1) (arg1)->m = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_m_get(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  SWIG_check_num_args("CSVParser::m",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::m",1,"CSVParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_m_get",1,SWIGTYPE_p_CSVParser);
  }
  
  result = (std::vector< std::vector< std::string > > *)& ((arg1)->m);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CSVParser(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  CSVParser *result = 0 ;
  
  SWIG_check_num_args("CSVParser::CSVParser",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CSVParser::CSVParser",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (CSVParser *)new CSVParser((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSVParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_num_rows(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CSVParser::num_rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::num_rows",1,"CSVParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_num_rows",1,SWIGTYPE_p_CSVParser);
  }
  
  result = (arg1)->num_rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_num_cols(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("CSVParser::num_cols",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::num_cols",1,"CSVParser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CSVParser::num_cols",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_num_cols",1,SWIGTYPE_p_CSVParser);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->num_cols(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_get_row(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< Array< std::string > > result;
  
  SWIG_check_num_args("CSVParser::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::get_row",1,"CSVParser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CSVParser::get_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_get_row",1,SWIGTYPE_p_CSVParser);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Array< std::string > * resultptr = new Array< std::string >((const Array< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_get_col(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("CSVParser::get_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::get_col",1,"CSVParser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CSVParser::get_col",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CSVParser::get_col",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_get_col",1,SWIGTYPE_p_CSVParser);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->get_col(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_get_data(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  Matrix< std::string > *arg2 = 0 ;
  Matrix< std::string > *result = 0 ;
  
  SWIG_check_num_args("CSVParser::get_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::get_data",1,"CSVParser *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSVParser::get_data",2,"Matrix< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_get_data",1,SWIGTYPE_p_CSVParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixT_std__string_t,0))){
    SWIG_fail_ptr("CSVParser_get_data",2,SWIGTYPE_p_MatrixT_std__string_t);
  }
  
  result = (Matrix< std::string > *) &(arg1)->get_data(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MatrixT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_write_file(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CSVParser::write_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::write_file",1,"CSVParser *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CSVParser::write_file",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_write_file",1,SWIGTYPE_p_CSVParser);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->write_file((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSVParser_print_row(lua_State* L) {
  int SWIG_arg = 0;
  CSVParser *arg1 = (CSVParser *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CSVParser::print_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSVParser::print_row",1,"CSVParser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CSVParser::print_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSVParser,0))){
    SWIG_fail_ptr("CSVParser_print_row",1,SWIGTYPE_p_CSVParser);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->print_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CSVParser(void *obj) {
CSVParser *arg1 = (CSVParser *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSVParser(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSVParser);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSVParser_attributes[] = {
    { "m", _wrap_CSVParser_m_get, _wrap_CSVParser_m_set },
    {0,0,0}
};
static swig_lua_method swig_CSVParser_methods[]= {
    { "num_rows", _wrap_CSVParser_num_rows},
    { "num_cols", _wrap_CSVParser_num_cols},
    { "get_row", _wrap_CSVParser_get_row},
    { "get_col", _wrap_CSVParser_get_col},
    { "get_data", _wrap_CSVParser_get_data},
    { "write_file", _wrap_CSVParser_write_file},
    { "print_row", _wrap_CSVParser_print_row},
    {0,0}
};
static swig_lua_method swig_CSVParser_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSVParser_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSVParser_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSVParser_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSVParser_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSVParser_Sf_SwigStatic = {
    "CSVParser",
    swig_CSVParser_Sf_SwigStatic_methods,
    swig_CSVParser_Sf_SwigStatic_attributes,
    swig_CSVParser_Sf_SwigStatic_constants,
    swig_CSVParser_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSVParser_bases[] = {0};
static const char *swig_CSVParser_base_names[] = {0};
static swig_lua_class _wrap_class_CSVParser = { "CSVParser", "CSVParser", &SWIGTYPE_p_CSVParser,_proxy__wrap_new_CSVParser, swig_delete_CSVParser, swig_CSVParser_methods, swig_CSVParser_attributes, &swig_CSVParser_Sf_SwigStatic, swig_CSVParser_meta, swig_CSVParser_bases, swig_CSVParser_base_names };

static int _wrap_SwigRefTableGet(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SwigRefTableGet",2,2)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableGet",2,"size_t");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)SwigRefTableGet(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefTableGet2(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("SwigRefTableGet2",3,3)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableGet2",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SwigRefTableGet2",3,"size_t");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double)SwigRefTableGet2(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefTableSet(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SwigRefTableSet",3,3)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableSet",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SwigRefTableSet",3,"double");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  SwigRefTableSet(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefTableSet2(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SwigRefTableSet2",4,4)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableSet2",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SwigRefTableSet2",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SwigRefTableSet2",4,"double");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  SwigRefTableSet2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefGetTableSize(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t result;
  
  SWIG_check_num_args("SwigRefGetTableSize",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = SwigRefGetTableSize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayFloat(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< float > result;
  
  SWIG_check_num_args("CreateArray< float >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< float >(arg1);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayDouble(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< double > result;
  
  SWIG_check_num_args("CreateArray< double >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< double >(arg1);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayInt8(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< signed char > result;
  
  SWIG_check_num_args("CreateArray< int8_t >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< int8_t >(arg1);
  {
    Array< signed char > * resultptr = new Array< signed char >((const Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayInt16(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< short > result;
  
  SWIG_check_num_args("CreateArray< int16_t >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< int16_t >(arg1);
  {
    Array< short > * resultptr = new Array< short >((const Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayInt32(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< int > result;
  
  SWIG_check_num_args("CreateArray< int32_t >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< int32_t >(arg1);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayInt64(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< long long > result;
  
  SWIG_check_num_args("CreateArray< long long >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< long long >(arg1);
  {
    Array< long long > * resultptr = new Array< long long >((const Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayUInt8(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< unsigned char > result;
  
  SWIG_check_num_args("CreateArray< uint8_t >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< uint8_t >(arg1);
  {
    Array< unsigned char > * resultptr = new Array< unsigned char >((const Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayUInt16(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< unsigned short > result;
  
  SWIG_check_num_args("CreateArray< uint16_t >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< uint16_t >(arg1);
  {
    Array< unsigned short > * resultptr = new Array< unsigned short >((const Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayUInt32(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< unsigned int > result;
  
  SWIG_check_num_args("CreateArray< uint32_t >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< uint32_t >(arg1);
  {
    Array< unsigned int > * resultptr = new Array< unsigned int >((const Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayUInt64(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  Array< unsigned long long > result;
  
  SWIG_check_num_args("CreateArray< unsigned long long >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< unsigned long long >(arg1);
  {
    Array< unsigned long long > * resultptr = new Array< unsigned long long >((const Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayString(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SwigValueWrapper< Array< std::string > > result;
  
  SWIG_check_num_args("CreateArray< std::string >",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray< std::string >(arg1);
  {
    Array< std::string > * resultptr = new Array< std::string >((const Array< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sort_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("sort< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("sort< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("sort_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  sort< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsort_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("rsort< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("rsort< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("rsort_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  rsort< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverse_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("reverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("reverse< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("reverse_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  reverse< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bsearch_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("binary_search< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("binary_search< float >",1,"Array< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("binary_search< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("bsearch_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (bool)binary_search< float >(*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_count_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  float arg2 ;
  int result;
  
  SWIG_check_num_args("count< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("count< float >",1,"Array< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("count< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("count_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (int)count< float >(*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fill_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = 0 ;
  float temp4 ;
  
  SWIG_check_num_args("fill< float >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("fill< float >",1,"Array< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fill< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fill< float >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fill< float >",4,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("fill_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(float)lua_tonumber(L,4); arg4=&temp4;
  fill< float >(*arg1,arg2,arg3,(float const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_heap_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("make_heap< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("make_heap< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("make_heap_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  make_heap< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pop_heap_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("pop_heap< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("pop_heap< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("pop_heap_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  pop_heap< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_push_heap_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("push_heap< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("push_heap< float >",1,"Array< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("push_heap< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("push_heap_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  push_heap< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sort_heap_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("sort_heap< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("sort_heap< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("sort_heap_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  sort_heap< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("get_max< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("get_max< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("max_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (float)get_max< float >(*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("get_min< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("get_min< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("min_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (float)get_min< float >(*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_next_permutation_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("next_permutation< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("next_permutation< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("next_permutation_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (bool)next_permutation< float >(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_is_sorted_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("is_sorted< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("is_sorted< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("is_sorted_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (bool)is_sorted< float >(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_is_heap_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("is_heap< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("is_heap< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("is_heap_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (bool)is_heap< float >(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_is_permutation_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  Array< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("is_permutation< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("is_permutation< float >",1,"Array< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("is_permutation< float >",2,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("is_permutation_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("is_permutation_float_vector",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (bool)is_permutation< float >((Array< float > const &)*arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_merge_front_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  Array< float > *arg2 = 0 ;
  Array< float > *arg3 = 0 ;
  
  SWIG_check_num_args("merge_front< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("merge_front< float >",1,"Array< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("merge_front< float >",2,"Array< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("merge_front< float >",3,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("merge_front_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("merge_front_float_vector",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("merge_front_float_vector",3,SWIGTYPE_p_ArrayT_float_t);
  }
  
  merge_front< float >((Array< float > const &)*arg1,(Array< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_merge_back_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  Array< float > *arg2 = 0 ;
  Array< float > *arg3 = 0 ;
  
  SWIG_check_num_args("merge_back< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("merge_back< float >",1,"Array< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("merge_back< float >",2,"Array< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("merge_back< float >",3,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("merge_back_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("merge_back_float_vector",2,SWIGTYPE_p_ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("merge_back_float_vector",3,SWIGTYPE_p_ArrayT_float_t);
  }
  
  merge_back< float >((Array< float > const &)*arg1,(Array< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_shuffle_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("random_shuffle< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("random_shuffle< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("random_shuffle_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  random_shuffle< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replace_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("replace< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("replace< float >",1,"Array< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("replace< float >",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("replace< float >",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("replace_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  replace< float >(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shuffle_float_vector(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  
  SWIG_check_num_args("shuffle< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("shuffle< float >",1,"Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("shuffle_float_vector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  shuffle< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "SwigRefTableGet", _wrap_SwigRefTableGet},
    { "SwigRefTableGet2", _wrap_SwigRefTableGet2},
    { "SwigRefTableSet", _wrap_SwigRefTableSet},
    { "SwigRefTableSet2", _wrap_SwigRefTableSet2},
    { "SwigRefGetTableSize", _wrap_SwigRefGetTableSize},
    { "CreateArrayFloat", _wrap_CreateArrayFloat},
    { "CreateArrayDouble", _wrap_CreateArrayDouble},
    { "CreateArrayInt8", _wrap_CreateArrayInt8},
    { "CreateArrayInt16", _wrap_CreateArrayInt16},
    { "CreateArrayInt32", _wrap_CreateArrayInt32},
    { "CreateArrayInt64", _wrap_CreateArrayInt64},
    { "CreateArrayUInt8", _wrap_CreateArrayUInt8},
    { "CreateArrayUInt16", _wrap_CreateArrayUInt16},
    { "CreateArrayUInt32", _wrap_CreateArrayUInt32},
    { "CreateArrayUInt64", _wrap_CreateArrayUInt64},
    { "CreateArrayString", _wrap_CreateArrayString},
    { "sort_float_vector", _wrap_sort_float_vector},
    { "rsort_float_vector", _wrap_rsort_float_vector},
    { "reverse_float_vector", _wrap_reverse_float_vector},
    { "bsearch_float_vector", _wrap_bsearch_float_vector},
    { "count_float_vector", _wrap_count_float_vector},
    { "fill_float_vector", _wrap_fill_float_vector},
    { "make_heap_float_vector", _wrap_make_heap_float_vector},
    { "pop_heap_vector", _wrap_pop_heap_vector},
    { "push_heap_float_vector", _wrap_push_heap_float_vector},
    { "sort_heap_float_vector", _wrap_sort_heap_float_vector},
    { "max_float_vector", _wrap_max_float_vector},
    { "min_float_vector", _wrap_min_float_vector},
    { "next_permutation_float_vector", _wrap_next_permutation_float_vector},
    { "is_sorted_float_vector", _wrap_is_sorted_float_vector},
    { "is_heap_float_vector", _wrap_is_heap_float_vector},
    { "is_permutation_float_vector", _wrap_is_permutation_float_vector},
    { "merge_front_float_vector", _wrap_merge_front_float_vector},
    { "merge_back_float_vector", _wrap_merge_back_float_vector},
    { "random_shuffle_float_vector", _wrap_random_shuffle_float_vector},
    { "replace_float_vector", _wrap_replace_float_vector},
    { "shuffle_float_vector", _wrap_shuffle_float_vector},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_string_vector,
&_wrap_class_RefVector,
&_wrap_class_FuncVector,
&_wrap_class_RefMap,
&_wrap_class_FuncMap,
&_wrap_class_BitArray,
&_wrap_class_RegEx,
&_wrap_class_String,
&_wrap_class_FloatArray,
&_wrap_class_DoubleArray,
&_wrap_class_Int8Array,
&_wrap_class_UInt8Array,
&_wrap_class_Int16Array,
&_wrap_class_UInt16Array,
&_wrap_class_Int32Array,
&_wrap_class_UInt32Array,
&_wrap_class_Int64Array,
&_wrap_class_UInt64Array,
&_wrap_class_StringArray,
&_wrap_class_PtrArray,
&_wrap_class_BasicArray,
&_wrap_class_RefArray,
&_wrap_class_FloatMatrix,
&_wrap_class_DoubleMatrix,
&_wrap_class_Int8Matrix,
&_wrap_class_UInt8Matrix,
&_wrap_class_Int16Matrix,
&_wrap_class_UInt16Matrix,
&_wrap_class_Int32Matrix,
&_wrap_class_UInt32Matrix,
&_wrap_class_Int64Matrix,
&_wrap_class_UInt64Matrix,
&_wrap_class_StringMatrix,
&_wrap_class_BasicMatrix,
&_wrap_class_FloatList,
&_wrap_class_DoubleList,
&_wrap_class_Int8List,
&_wrap_class_UInt8list,
&_wrap_class_Int16List,
&_wrap_class_UInt16list,
&_wrap_class_Int32List,
&_wrap_class_UInt32List,
&_wrap_class_Int64List,
&_wrap_class_UInt64List,
&_wrap_class_StringList,
&_wrap_class_PtrList,
&_wrap_class_BasicList,
&_wrap_class_FloatForwardList,
&_wrap_class_DoubleForwardList,
&_wrap_class_Int8ForwardList,
&_wrap_class_UInt8forwardlist,
&_wrap_class_Int16ForwardList,
&_wrap_class_UInt16forwardlist,
&_wrap_class_Int32ForwardList,
&_wrap_class_UInt32ForwardList,
&_wrap_class_Int64ForwardList,
&_wrap_class_UInt64ForwardList,
&_wrap_class_StringForwardList,
&_wrap_class_PtrForwardList,
&_wrap_class_BasicForwardList,
&_wrap_class_FloatDeque,
&_wrap_class_DoubleDeque,
&_wrap_class_Int8Deque,
&_wrap_class_UInt8deque,
&_wrap_class_Int16Deque,
&_wrap_class_UInt16Deque,
&_wrap_class_Int32Deque,
&_wrap_class_UInt32Deque,
&_wrap_class_Int64Deque,
&_wrap_class_UInt64Deque,
&_wrap_class_StringDeque,
&_wrap_class_PtrDeque,
&_wrap_class_FloatSet,
&_wrap_class_DoubleSet,
&_wrap_class_Int8Set,
&_wrap_class_UInt8set,
&_wrap_class_Int16Set,
&_wrap_class_UInt16Set,
&_wrap_class_Int32Set,
&_wrap_class_UInt32Set,
&_wrap_class_Int64Set,
&_wrap_class_UInt64Set,
&_wrap_class_StringSet,
&_wrap_class_PtrSet,
&_wrap_class_FloatStack,
&_wrap_class_DoubleStack,
&_wrap_class_Int8Stack,
&_wrap_class_UInt8stack,
&_wrap_class_Int16Stack,
&_wrap_class_UInt16Stack,
&_wrap_class_Int32Stack,
&_wrap_class_UInt32Stack,
&_wrap_class_Int64Stack,
&_wrap_class_UInt64Stack,
&_wrap_class_StringStack,
&_wrap_class_PtrStack,
&_wrap_class_BasicStack,
&_wrap_class_StrMap,
&_wrap_class_PtrMap,
&_wrap_class_Map,
&_wrap_class_FloatBuffer,
&_wrap_class_DoubleBuffer,
&_wrap_class_CharBuffer,
&_wrap_class_Int8Buffer,
&_wrap_class_UInt8Buffer,
&_wrap_class_Int16Buffer,
&_wrap_class_UInt16Buffer,
&_wrap_class_Int32Buffer,
&_wrap_class_UInt32Buffer,
&_wrap_class_Int64Buffer,
&_wrap_class_UInt64Buffer,
&_wrap_class_CSVParser,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "dl",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_ArrayT_BasicType_t = {"_p_ArrayT_BasicType_t", "Array< BasicType > *", 0, 0, (void*)&_wrap_class_BasicArray, 0};
static swig_type_info _swigt__p_ArrayT_SWIGLUA_REF_t = {"_p_ArrayT_SWIGLUA_REF_t", "Array< SWIGLUA_REF > *", 0, 0, (void*)&_wrap_class_RefArray, 0};
static swig_type_info _swigt__p_ArrayT_double_t = {"_p_ArrayT_double_t", "Array< double > *", 0, 0, (void*)&_wrap_class_DoubleArray, 0};
static swig_type_info _swigt__p_ArrayT_float_t = {"_p_ArrayT_float_t", "Array< float > *", 0, 0, (void*)&_wrap_class_FloatArray, 0};
static swig_type_info _swigt__p_ArrayT_int_t = {"_p_ArrayT_int_t", "Array< int32_t > *|Array< int > *", 0, 0, (void*)&_wrap_class_Int32Array, 0};
static swig_type_info _swigt__p_ArrayT_long_long_t = {"_p_ArrayT_long_long_t", "Array< long long > *", 0, 0, (void*)&_wrap_class_Int64Array, 0};
static swig_type_info _swigt__p_ArrayT_short_t = {"_p_ArrayT_short_t", "Array< short > *|Array< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Array, 0};
static swig_type_info _swigt__p_ArrayT_signed_char_t = {"_p_ArrayT_signed_char_t", "Array< signed char > *|Array< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Array, 0};
static swig_type_info _swigt__p_ArrayT_std__string_t = {"_p_ArrayT_std__string_t", "Array< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_string_t = {"_p_ArrayT_string_t", "Array< string > *", 0, 0, (void*)&_wrap_class_StringArray, 0};
static swig_type_info _swigt__p_ArrayT_unsigned_char_t = {"_p_ArrayT_unsigned_char_t", "Array< unsigned char > *|Array< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8Array, 0};
static swig_type_info _swigt__p_ArrayT_unsigned_int_t = {"_p_ArrayT_unsigned_int_t", "Array< uint32_t > *|Array< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Array, 0};
static swig_type_info _swigt__p_ArrayT_unsigned_long_long_t = {"_p_ArrayT_unsigned_long_long_t", "Array< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64Array, 0};
static swig_type_info _swigt__p_ArrayT_unsigned_short_t = {"_p_ArrayT_unsigned_short_t", "Array< unsigned short > *|Array< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Array, 0};
static swig_type_info _swigt__p_ArrayT_void_p_t = {"_p_ArrayT_void_p_t", "Array< void * > *", 0, 0, (void*)&_wrap_class_PtrArray, 0};
static swig_type_info _swigt__p_AssociativeArrayT_string_BasicType_t = {"_p_AssociativeArrayT_string_BasicType_t", "AssociativeArray< string,BasicType > *", 0, 0, (void*)&_wrap_class_Map, 0};
static swig_type_info _swigt__p_AssociativeArrayT_string_string_t = {"_p_AssociativeArrayT_string_string_t", "AssociativeArray< string,string > *", 0, 0, (void*)&_wrap_class_StrMap, 0};
static swig_type_info _swigt__p_AssociativeArrayT_string_void_p_t = {"_p_AssociativeArrayT_string_void_p_t", "AssociativeArray< string,void * > *", 0, 0, (void*)&_wrap_class_PtrMap, 0};
static swig_type_info _swigt__p_BasicType = {"_p_BasicType", "BasicType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BitArray = {"_p_BitArray", "BitArray *", 0, 0, (void*)&_wrap_class_BitArray, 0};
static swig_type_info _swigt__p_CBufferT_char_t = {"_p_CBufferT_char_t", "CBuffer< char > *", 0, 0, (void*)&_wrap_class_CharBuffer, 0};
static swig_type_info _swigt__p_CBufferT_double_t = {"_p_CBufferT_double_t", "CBuffer< double > *", 0, 0, (void*)&_wrap_class_DoubleBuffer, 0};
static swig_type_info _swigt__p_CBufferT_float_t = {"_p_CBufferT_float_t", "CBuffer< float > *", 0, 0, (void*)&_wrap_class_FloatBuffer, 0};
static swig_type_info _swigt__p_CBufferT_int_t = {"_p_CBufferT_int_t", "CBuffer< int32_t > *|CBuffer< int > *", 0, 0, (void*)&_wrap_class_Int32Buffer, 0};
static swig_type_info _swigt__p_CBufferT_long_long_t = {"_p_CBufferT_long_long_t", "CBuffer< long long > *", 0, 0, (void*)&_wrap_class_Int64Buffer, 0};
static swig_type_info _swigt__p_CBufferT_short_t = {"_p_CBufferT_short_t", "CBuffer< short > *|CBuffer< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Buffer, 0};
static swig_type_info _swigt__p_CBufferT_signed_char_t = {"_p_CBufferT_signed_char_t", "CBuffer< signed char > *|CBuffer< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Buffer, 0};
static swig_type_info _swigt__p_CBufferT_unsigned_char_t = {"_p_CBufferT_unsigned_char_t", "CBuffer< unsigned char > *|CBuffer< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8Buffer, 0};
static swig_type_info _swigt__p_CBufferT_unsigned_int_t = {"_p_CBufferT_unsigned_int_t", "CBuffer< uint32_t > *|CBuffer< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Buffer, 0};
static swig_type_info _swigt__p_CBufferT_unsigned_long_long_t = {"_p_CBufferT_unsigned_long_long_t", "CBuffer< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64Buffer, 0};
static swig_type_info _swigt__p_CBufferT_unsigned_short_t = {"_p_CBufferT_unsigned_short_t", "CBuffer< unsigned short > *|CBuffer< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Buffer, 0};
static swig_type_info _swigt__p_CSVParser = {"_p_CSVParser", "CSVParser *", 0, 0, (void*)&_wrap_class_CSVParser, 0};
static swig_type_info _swigt__p_DequeT_double_t = {"_p_DequeT_double_t", "Deque< double > *", 0, 0, (void*)&_wrap_class_DoubleDeque, 0};
static swig_type_info _swigt__p_DequeT_float_t = {"_p_DequeT_float_t", "Deque< float > *", 0, 0, (void*)&_wrap_class_FloatDeque, 0};
static swig_type_info _swigt__p_DequeT_int_t = {"_p_DequeT_int_t", "Deque< int32_t > *|Deque< int > *", 0, 0, (void*)&_wrap_class_Int32Deque, 0};
static swig_type_info _swigt__p_DequeT_long_long_t = {"_p_DequeT_long_long_t", "Deque< long long > *", 0, 0, (void*)&_wrap_class_Int64Deque, 0};
static swig_type_info _swigt__p_DequeT_short_t = {"_p_DequeT_short_t", "Deque< short > *|Deque< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Deque, 0};
static swig_type_info _swigt__p_DequeT_signed_char_t = {"_p_DequeT_signed_char_t", "Deque< signed char > *|Deque< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Deque, 0};
static swig_type_info _swigt__p_DequeT_string_t = {"_p_DequeT_string_t", "Deque< string > *", 0, 0, (void*)&_wrap_class_StringDeque, 0};
static swig_type_info _swigt__p_DequeT_unsigned_char_t = {"_p_DequeT_unsigned_char_t", "Deque< unsigned char > *|Deque< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8deque, 0};
static swig_type_info _swigt__p_DequeT_unsigned_int_t = {"_p_DequeT_unsigned_int_t", "Deque< uint32_t > *|Deque< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Deque, 0};
static swig_type_info _swigt__p_DequeT_unsigned_long_long_t = {"_p_DequeT_unsigned_long_long_t", "Deque< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64Deque, 0};
static swig_type_info _swigt__p_DequeT_unsigned_short_t = {"_p_DequeT_unsigned_short_t", "Deque< unsigned short > *|Deque< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Deque, 0};
static swig_type_info _swigt__p_DequeT_void_p_t = {"_p_DequeT_void_p_t", "Deque< void * > *", 0, 0, (void*)&_wrap_class_PtrDeque, 0};
static swig_type_info _swigt__p_ForwardListT_BasicType_t = {"_p_ForwardListT_BasicType_t", "ForwardList< BasicType > *", 0, 0, (void*)&_wrap_class_BasicForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_double_t = {"_p_ForwardListT_double_t", "ForwardList< double > *", 0, 0, (void*)&_wrap_class_DoubleForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_float_t = {"_p_ForwardListT_float_t", "ForwardList< float > *", 0, 0, (void*)&_wrap_class_FloatForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_int_t = {"_p_ForwardListT_int_t", "ForwardList< int32_t > *|ForwardList< int > *", 0, 0, (void*)&_wrap_class_Int32ForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_long_long_t = {"_p_ForwardListT_long_long_t", "ForwardList< long long > *", 0, 0, (void*)&_wrap_class_Int64ForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_short_t = {"_p_ForwardListT_short_t", "ForwardList< short > *|ForwardList< int16_t > *", 0, 0, (void*)&_wrap_class_Int16ForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_signed_char_t = {"_p_ForwardListT_signed_char_t", "ForwardList< signed char > *|ForwardList< int8_t > *", 0, 0, (void*)&_wrap_class_Int8ForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_string_t = {"_p_ForwardListT_string_t", "ForwardList< string > *", 0, 0, (void*)&_wrap_class_StringForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_unsigned_char_t = {"_p_ForwardListT_unsigned_char_t", "ForwardList< unsigned char > *|ForwardList< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8forwardlist, 0};
static swig_type_info _swigt__p_ForwardListT_unsigned_int_t = {"_p_ForwardListT_unsigned_int_t", "ForwardList< uint32_t > *|ForwardList< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32ForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_unsigned_long_long_t = {"_p_ForwardListT_unsigned_long_long_t", "ForwardList< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64ForwardList, 0};
static swig_type_info _swigt__p_ForwardListT_unsigned_short_t = {"_p_ForwardListT_unsigned_short_t", "ForwardList< unsigned short > *|ForwardList< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16forwardlist, 0};
static swig_type_info _swigt__p_ForwardListT_void_p_t = {"_p_ForwardListT_void_p_t", "ForwardList< void * > *", 0, 0, (void*)&_wrap_class_PtrForwardList, 0};
static swig_type_info _swigt__p_ListT_BasicType_t = {"_p_ListT_BasicType_t", "List< BasicType > *", 0, 0, (void*)&_wrap_class_BasicList, 0};
static swig_type_info _swigt__p_ListT_double_t = {"_p_ListT_double_t", "List< double > *", 0, 0, (void*)&_wrap_class_DoubleList, 0};
static swig_type_info _swigt__p_ListT_float_t = {"_p_ListT_float_t", "List< float > *", 0, 0, (void*)&_wrap_class_FloatList, 0};
static swig_type_info _swigt__p_ListT_int_t = {"_p_ListT_int_t", "List< int32_t > *|List< int > *", 0, 0, (void*)&_wrap_class_Int32List, 0};
static swig_type_info _swigt__p_ListT_long_long_t = {"_p_ListT_long_long_t", "List< long long > *", 0, 0, (void*)&_wrap_class_Int64List, 0};
static swig_type_info _swigt__p_ListT_short_t = {"_p_ListT_short_t", "List< short > *|List< int16_t > *", 0, 0, (void*)&_wrap_class_Int16List, 0};
static swig_type_info _swigt__p_ListT_signed_char_t = {"_p_ListT_signed_char_t", "List< signed char > *|List< int8_t > *", 0, 0, (void*)&_wrap_class_Int8List, 0};
static swig_type_info _swigt__p_ListT_string_t = {"_p_ListT_string_t", "List< string > *", 0, 0, (void*)&_wrap_class_StringList, 0};
static swig_type_info _swigt__p_ListT_unsigned_char_t = {"_p_ListT_unsigned_char_t", "List< unsigned char > *|List< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8list, 0};
static swig_type_info _swigt__p_ListT_unsigned_int_t = {"_p_ListT_unsigned_int_t", "List< uint32_t > *|List< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32List, 0};
static swig_type_info _swigt__p_ListT_unsigned_long_long_t = {"_p_ListT_unsigned_long_long_t", "List< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64List, 0};
static swig_type_info _swigt__p_ListT_unsigned_short_t = {"_p_ListT_unsigned_short_t", "List< unsigned short > *|List< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16list, 0};
static swig_type_info _swigt__p_ListT_void_p_t = {"_p_ListT_void_p_t", "List< void * > *", 0, 0, (void*)&_wrap_class_PtrList, 0};
static swig_type_info _swigt__p_MatrixT_BasicType_t = {"_p_MatrixT_BasicType_t", "Matrix< BasicType > *", 0, 0, (void*)&_wrap_class_BasicMatrix, 0};
static swig_type_info _swigt__p_MatrixT_double_t = {"_p_MatrixT_double_t", "Matrix< double > *", 0, 0, (void*)&_wrap_class_DoubleMatrix, 0};
static swig_type_info _swigt__p_MatrixT_float_t = {"_p_MatrixT_float_t", "Matrix< float > *", 0, 0, (void*)&_wrap_class_FloatMatrix, 0};
static swig_type_info _swigt__p_MatrixT_int_t = {"_p_MatrixT_int_t", "Matrix< int32_t > *|Matrix< int > *", 0, 0, (void*)&_wrap_class_Int32Matrix, 0};
static swig_type_info _swigt__p_MatrixT_long_long_t = {"_p_MatrixT_long_long_t", "Matrix< long long > *", 0, 0, (void*)&_wrap_class_Int64Matrix, 0};
static swig_type_info _swigt__p_MatrixT_short_t = {"_p_MatrixT_short_t", "Matrix< short > *|Matrix< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Matrix, 0};
static swig_type_info _swigt__p_MatrixT_signed_char_t = {"_p_MatrixT_signed_char_t", "Matrix< signed char > *|Matrix< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Matrix, 0};
static swig_type_info _swigt__p_MatrixT_std__string_t = {"_p_MatrixT_std__string_t", "Matrix< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixT_string_t = {"_p_MatrixT_string_t", "Matrix< string > *", 0, 0, (void*)&_wrap_class_StringMatrix, 0};
static swig_type_info _swigt__p_MatrixT_unsigned_char_t = {"_p_MatrixT_unsigned_char_t", "Matrix< unsigned char > *|Matrix< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8Matrix, 0};
static swig_type_info _swigt__p_MatrixT_unsigned_int_t = {"_p_MatrixT_unsigned_int_t", "Matrix< uint32_t > *|Matrix< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Matrix, 0};
static swig_type_info _swigt__p_MatrixT_unsigned_long_long_t = {"_p_MatrixT_unsigned_long_long_t", "Matrix< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64Matrix, 0};
static swig_type_info _swigt__p_MatrixT_unsigned_short_t = {"_p_MatrixT_unsigned_short_t", "Matrix< unsigned short > *|Matrix< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Matrix, 0};
static swig_type_info _swigt__p_RegEx = {"_p_RegEx", "RegEx *", 0, 0, (void*)&_wrap_class_RegEx, 0};
static swig_type_info _swigt__p_SWIGLUA_FN = {"_p_SWIGLUA_FN", "SWIGLUA_FN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SWIGLUA_REF = {"_p_SWIGLUA_REF", "SWIGLUA_REF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_double_t = {"_p_SetT_double_t", "Set< double > *", 0, 0, (void*)&_wrap_class_DoubleSet, 0};
static swig_type_info _swigt__p_SetT_float_t = {"_p_SetT_float_t", "Set< float > *", 0, 0, (void*)&_wrap_class_FloatSet, 0};
static swig_type_info _swigt__p_SetT_int_t = {"_p_SetT_int_t", "Set< int32_t > *|Set< int > *", 0, 0, (void*)&_wrap_class_Int32Set, 0};
static swig_type_info _swigt__p_SetT_long_long_t = {"_p_SetT_long_long_t", "Set< long long > *", 0, 0, (void*)&_wrap_class_Int64Set, 0};
static swig_type_info _swigt__p_SetT_short_t = {"_p_SetT_short_t", "Set< short > *|Set< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Set, 0};
static swig_type_info _swigt__p_SetT_signed_char_t = {"_p_SetT_signed_char_t", "Set< signed char > *|Set< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Set, 0};
static swig_type_info _swigt__p_SetT_string_t = {"_p_SetT_string_t", "Set< string > *", 0, 0, (void*)&_wrap_class_StringSet, 0};
static swig_type_info _swigt__p_SetT_unsigned_char_t = {"_p_SetT_unsigned_char_t", "Set< unsigned char > *|Set< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8set, 0};
static swig_type_info _swigt__p_SetT_unsigned_int_t = {"_p_SetT_unsigned_int_t", "Set< uint32_t > *|Set< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Set, 0};
static swig_type_info _swigt__p_SetT_unsigned_long_long_t = {"_p_SetT_unsigned_long_long_t", "Set< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64Set, 0};
static swig_type_info _swigt__p_SetT_unsigned_short_t = {"_p_SetT_unsigned_short_t", "Set< unsigned short > *|Set< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Set, 0};
static swig_type_info _swigt__p_SetT_void_p_t = {"_p_SetT_void_p_t", "Set< void * > *", 0, 0, (void*)&_wrap_class_PtrSet, 0};
static swig_type_info _swigt__p_StackT_BasicType_t = {"_p_StackT_BasicType_t", "Stack< BasicType > *", 0, 0, (void*)&_wrap_class_BasicStack, 0};
static swig_type_info _swigt__p_StackT_double_t = {"_p_StackT_double_t", "Stack< double > *", 0, 0, (void*)&_wrap_class_DoubleStack, 0};
static swig_type_info _swigt__p_StackT_float_t = {"_p_StackT_float_t", "Stack< float > *", 0, 0, (void*)&_wrap_class_FloatStack, 0};
static swig_type_info _swigt__p_StackT_int_t = {"_p_StackT_int_t", "Stack< int32_t > *|Stack< int > *", 0, 0, (void*)&_wrap_class_Int32Stack, 0};
static swig_type_info _swigt__p_StackT_long_long_t = {"_p_StackT_long_long_t", "Stack< long long > *", 0, 0, (void*)&_wrap_class_Int64Stack, 0};
static swig_type_info _swigt__p_StackT_short_t = {"_p_StackT_short_t", "Stack< short > *|Stack< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Stack, 0};
static swig_type_info _swigt__p_StackT_signed_char_t = {"_p_StackT_signed_char_t", "Stack< signed char > *|Stack< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Stack, 0};
static swig_type_info _swigt__p_StackT_string_t = {"_p_StackT_string_t", "Stack< string > *", 0, 0, (void*)&_wrap_class_StringStack, 0};
static swig_type_info _swigt__p_StackT_unsigned_char_t = {"_p_StackT_unsigned_char_t", "Stack< unsigned char > *|Stack< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8stack, 0};
static swig_type_info _swigt__p_StackT_unsigned_int_t = {"_p_StackT_unsigned_int_t", "Stack< uint32_t > *|Stack< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Stack, 0};
static swig_type_info _swigt__p_StackT_unsigned_long_long_t = {"_p_StackT_unsigned_long_long_t", "Stack< unsigned long long > *", 0, 0, (void*)&_wrap_class_UInt64Stack, 0};
static swig_type_info _swigt__p_StackT_unsigned_short_t = {"_p_StackT_unsigned_short_t", "Stack< unsigned short > *|Stack< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Stack, 0};
static swig_type_info _swigt__p_StackT_void_p_t = {"_p_StackT_void_p_t", "Stack< void * > *", 0, 0, (void*)&_wrap_class_PtrStack, 0};
static swig_type_info _swigt__p_String = {"_p_String", "String *", 0, 0, (void*)&_wrap_class_String, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_double_t = {"_p_std__dequeT_double_t", "std::deque< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_float_t = {"_p_std__dequeT_float_t", "std::deque< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_int_t = {"_p_std__dequeT_int_t", "std::deque< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_long_long_t = {"_p_std__dequeT_long_long_t", "std::deque< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_short_t = {"_p_std__dequeT_short_t", "std::deque< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_signed_char_t = {"_p_std__dequeT_signed_char_t", "std::deque< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_std__string_t = {"_p_std__dequeT_std__string_t", "std::deque< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_unsigned_char_t = {"_p_std__dequeT_unsigned_char_t", "std::deque< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_unsigned_int_t = {"_p_std__dequeT_unsigned_int_t", "std::deque< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_unsigned_long_long_t = {"_p_std__dequeT_unsigned_long_long_t", "std::deque< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_unsigned_short_t = {"_p_std__dequeT_unsigned_short_t", "std::deque< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_void_p_t = {"_p_std__dequeT_void_p_t", "std::deque< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BasicType_t = {"_p_std__listT_BasicType_t", "std::list< BasicType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_double_t = {"_p_std__listT_double_t", "std::list< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_float_t = {"_p_std__listT_float_t", "std::list< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_int_t = {"_p_std__listT_int_t", "std::list< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_long_long_t = {"_p_std__listT_long_long_t", "std::list< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_short_t = {"_p_std__listT_short_t", "std::list< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_signed_char_t = {"_p_std__listT_signed_char_t", "std::list< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_string_t = {"_p_std__listT_string_t", "std::list< string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_unsigned_char_t = {"_p_std__listT_unsigned_char_t", "std::list< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_unsigned_int_t = {"_p_std__listT_unsigned_int_t", "std::list< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_unsigned_long_long_t = {"_p_std__listT_unsigned_long_long_t", "std::list< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_unsigned_short_t = {"_p_std__listT_unsigned_short_t", "std::list< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_void_p_t = {"_p_std__listT_void_p_t", "std::list< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t", "std::map< std::string,BasicType,std::less< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t", "std::map< string,SWIGLUA_FN > *|std::map< std::string,SWIGLUA_FN > *|std::map< std::string,SWIGLUA_FN,std::less< std::string > > *", 0, 0, (void*)&_wrap_class_FuncMap, 0};
static swig_type_info _swigt__p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t", "std::map< string,SWIGLUA_REF > *|std::map< std::string,SWIGLUA_REF > *|std::map< std::string,SWIGLUA_REF,std::less< std::string > > *", 0, 0, (void*)&_wrap_class_RefMap, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t", "std::map< std::string,std::string,std::less< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_void_p_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_void_p_std__lessT_std__string_t_t", "std::map< std::string,void *,std::less< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__regex = {"_p_std__regex", "std::regex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_double_t = {"_p_std__setT_double_t", "std::set< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_float_t = {"_p_std__setT_float_t", "std::set< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_int_t = {"_p_std__setT_int_t", "std::set< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_long_long_t = {"_p_std__setT_long_long_t", "std::set< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_short_t = {"_p_std__setT_short_t", "std::set< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_signed_char_t = {"_p_std__setT_signed_char_t", "std::set< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_string_t = {"_p_std__setT_string_t", "std::set< string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_char_t = {"_p_std__setT_unsigned_char_t", "std::set< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_int_t = {"_p_std__setT_unsigned_int_t", "std::set< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_long_long_t = {"_p_std__setT_unsigned_long_long_t", "std::set< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_short_t = {"_p_std__setT_unsigned_short_t", "std::set< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_void_p_t = {"_p_std__setT_void_p_t", "std::set< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_BasicType_t = {"_p_std__stackT_BasicType_t", "std::stack< BasicType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_double_t = {"_p_std__stackT_double_t", "std::stack< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_float_t = {"_p_std__stackT_float_t", "std::stack< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_int_t = {"_p_std__stackT_int_t", "std::stack< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_long_long_t = {"_p_std__stackT_long_long_t", "std::stack< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_short_t = {"_p_std__stackT_short_t", "std::stack< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_signed_char_t = {"_p_std__stackT_signed_char_t", "std::stack< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_string_t = {"_p_std__stackT_string_t", "std::stack< string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_unsigned_char_t = {"_p_std__stackT_unsigned_char_t", "std::stack< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_unsigned_int_t = {"_p_std__stackT_unsigned_int_t", "std::stack< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_unsigned_long_long_t = {"_p_std__stackT_unsigned_long_long_t", "std::stack< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_unsigned_short_t = {"_p_std__stackT_unsigned_short_t", "std::stack< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stackT_void_p_t = {"_p_std__stackT_void_p_t", "std::stack< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_BasicType_t = {"_p_std__vectorT_BasicType_t", "std::vector< BasicType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_SWIGLUA_FN_t = {"_p_std__vectorT_SWIGLUA_FN_t", "std::vector< SWIGLUA_FN > *", 0, 0, (void*)&_wrap_class_FuncVector, 0};
static swig_type_info _swigt__p_std__vectorT_SWIGLUA_REF_t = {"_p_std__vectorT_SWIGLUA_REF_t", "std::vector< SWIGLUA_REF > *", 0, 0, (void*)&_wrap_class_RefVector, 0};
static swig_type_info _swigt__p_std__vectorT_bool_t = {"_p_std__vectorT_bool_t", "std::vector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_t = {"_p_std__vectorT_long_long_t", "std::vector< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< string > *|std::vector< std::string > *", 0, 0, (void*)&_wrap_class_string_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_BasicType_t_t = {"_p_std__vectorT_std__vectorT_BasicType_t_t", "std::vector< std::vector< BasicType > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_float_t_t = {"_p_std__vectorT_std__vectorT_float_t_t", "std::vector< std::vector< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_t_t = {"_p_std__vectorT_std__vectorT_int_t_t", "std::vector< std::vector< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_long_long_t_t = {"_p_std__vectorT_std__vectorT_long_long_t_t", "std::vector< std::vector< long long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_short_t_t = {"_p_std__vectorT_std__vectorT_short_t_t", "std::vector< std::vector< short > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_signed_char_t_t = {"_p_std__vectorT_std__vectorT_signed_char_t_t", "std::vector< std::vector< signed char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__string_t_t = {"_p_std__vectorT_std__vectorT_std__string_t_t", "std::vector< std::vector< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_char_t_t = {"_p_std__vectorT_std__vectorT_unsigned_char_t_t", "std::vector< std::vector< unsigned char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t = {"_p_std__vectorT_std__vectorT_unsigned_int_t_t", "std::vector< std::vector< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_long_long_t_t = {"_p_std__vectorT_std__vectorT_unsigned_long_long_t_t", "std::vector< std::vector< unsigned long long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_short_t_t = {"_p_std__vectorT_std__vectorT_unsigned_short_t_t", "std::vector< std::vector< unsigned short > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_long_t = {"_p_std__vectorT_unsigned_long_long_t", "std::vector< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_void_p_t = {"_p_std__vectorT_void_p_t", "std::vector< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ArrayT_BasicType_t,
  &_swigt__p_ArrayT_SWIGLUA_REF_t,
  &_swigt__p_ArrayT_double_t,
  &_swigt__p_ArrayT_float_t,
  &_swigt__p_ArrayT_int_t,
  &_swigt__p_ArrayT_long_long_t,
  &_swigt__p_ArrayT_short_t,
  &_swigt__p_ArrayT_signed_char_t,
  &_swigt__p_ArrayT_std__string_t,
  &_swigt__p_ArrayT_string_t,
  &_swigt__p_ArrayT_unsigned_char_t,
  &_swigt__p_ArrayT_unsigned_int_t,
  &_swigt__p_ArrayT_unsigned_long_long_t,
  &_swigt__p_ArrayT_unsigned_short_t,
  &_swigt__p_ArrayT_void_p_t,
  &_swigt__p_AssociativeArrayT_string_BasicType_t,
  &_swigt__p_AssociativeArrayT_string_string_t,
  &_swigt__p_AssociativeArrayT_string_void_p_t,
  &_swigt__p_BasicType,
  &_swigt__p_BitArray,
  &_swigt__p_CBufferT_char_t,
  &_swigt__p_CBufferT_double_t,
  &_swigt__p_CBufferT_float_t,
  &_swigt__p_CBufferT_int_t,
  &_swigt__p_CBufferT_long_long_t,
  &_swigt__p_CBufferT_short_t,
  &_swigt__p_CBufferT_signed_char_t,
  &_swigt__p_CBufferT_unsigned_char_t,
  &_swigt__p_CBufferT_unsigned_int_t,
  &_swigt__p_CBufferT_unsigned_long_long_t,
  &_swigt__p_CBufferT_unsigned_short_t,
  &_swigt__p_CSVParser,
  &_swigt__p_DequeT_double_t,
  &_swigt__p_DequeT_float_t,
  &_swigt__p_DequeT_int_t,
  &_swigt__p_DequeT_long_long_t,
  &_swigt__p_DequeT_short_t,
  &_swigt__p_DequeT_signed_char_t,
  &_swigt__p_DequeT_string_t,
  &_swigt__p_DequeT_unsigned_char_t,
  &_swigt__p_DequeT_unsigned_int_t,
  &_swigt__p_DequeT_unsigned_long_long_t,
  &_swigt__p_DequeT_unsigned_short_t,
  &_swigt__p_DequeT_void_p_t,
  &_swigt__p_ForwardListT_BasicType_t,
  &_swigt__p_ForwardListT_double_t,
  &_swigt__p_ForwardListT_float_t,
  &_swigt__p_ForwardListT_int_t,
  &_swigt__p_ForwardListT_long_long_t,
  &_swigt__p_ForwardListT_short_t,
  &_swigt__p_ForwardListT_signed_char_t,
  &_swigt__p_ForwardListT_string_t,
  &_swigt__p_ForwardListT_unsigned_char_t,
  &_swigt__p_ForwardListT_unsigned_int_t,
  &_swigt__p_ForwardListT_unsigned_long_long_t,
  &_swigt__p_ForwardListT_unsigned_short_t,
  &_swigt__p_ForwardListT_void_p_t,
  &_swigt__p_ListT_BasicType_t,
  &_swigt__p_ListT_double_t,
  &_swigt__p_ListT_float_t,
  &_swigt__p_ListT_int_t,
  &_swigt__p_ListT_long_long_t,
  &_swigt__p_ListT_short_t,
  &_swigt__p_ListT_signed_char_t,
  &_swigt__p_ListT_string_t,
  &_swigt__p_ListT_unsigned_char_t,
  &_swigt__p_ListT_unsigned_int_t,
  &_swigt__p_ListT_unsigned_long_long_t,
  &_swigt__p_ListT_unsigned_short_t,
  &_swigt__p_ListT_void_p_t,
  &_swigt__p_MatrixT_BasicType_t,
  &_swigt__p_MatrixT_double_t,
  &_swigt__p_MatrixT_float_t,
  &_swigt__p_MatrixT_int_t,
  &_swigt__p_MatrixT_long_long_t,
  &_swigt__p_MatrixT_short_t,
  &_swigt__p_MatrixT_signed_char_t,
  &_swigt__p_MatrixT_std__string_t,
  &_swigt__p_MatrixT_string_t,
  &_swigt__p_MatrixT_unsigned_char_t,
  &_swigt__p_MatrixT_unsigned_int_t,
  &_swigt__p_MatrixT_unsigned_long_long_t,
  &_swigt__p_MatrixT_unsigned_short_t,
  &_swigt__p_RegEx,
  &_swigt__p_SWIGLUA_FN,
  &_swigt__p_SWIGLUA_REF,
  &_swigt__p_SetT_double_t,
  &_swigt__p_SetT_float_t,
  &_swigt__p_SetT_int_t,
  &_swigt__p_SetT_long_long_t,
  &_swigt__p_SetT_short_t,
  &_swigt__p_SetT_signed_char_t,
  &_swigt__p_SetT_string_t,
  &_swigt__p_SetT_unsigned_char_t,
  &_swigt__p_SetT_unsigned_int_t,
  &_swigt__p_SetT_unsigned_long_long_t,
  &_swigt__p_SetT_unsigned_short_t,
  &_swigt__p_SetT_void_p_t,
  &_swigt__p_StackT_BasicType_t,
  &_swigt__p_StackT_double_t,
  &_swigt__p_StackT_float_t,
  &_swigt__p_StackT_int_t,
  &_swigt__p_StackT_long_long_t,
  &_swigt__p_StackT_short_t,
  &_swigt__p_StackT_signed_char_t,
  &_swigt__p_StackT_string_t,
  &_swigt__p_StackT_unsigned_char_t,
  &_swigt__p_StackT_unsigned_int_t,
  &_swigt__p_StackT_unsigned_long_long_t,
  &_swigt__p_StackT_unsigned_short_t,
  &_swigt__p_StackT_void_p_t,
  &_swigt__p_String,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__dequeT_double_t,
  &_swigt__p_std__dequeT_float_t,
  &_swigt__p_std__dequeT_int_t,
  &_swigt__p_std__dequeT_long_long_t,
  &_swigt__p_std__dequeT_short_t,
  &_swigt__p_std__dequeT_signed_char_t,
  &_swigt__p_std__dequeT_std__string_t,
  &_swigt__p_std__dequeT_unsigned_char_t,
  &_swigt__p_std__dequeT_unsigned_int_t,
  &_swigt__p_std__dequeT_unsigned_long_long_t,
  &_swigt__p_std__dequeT_unsigned_short_t,
  &_swigt__p_std__dequeT_void_p_t,
  &_swigt__p_std__listT_BasicType_t,
  &_swigt__p_std__listT_double_t,
  &_swigt__p_std__listT_float_t,
  &_swigt__p_std__listT_int_t,
  &_swigt__p_std__listT_long_long_t,
  &_swigt__p_std__listT_short_t,
  &_swigt__p_std__listT_signed_char_t,
  &_swigt__p_std__listT_string_t,
  &_swigt__p_std__listT_unsigned_char_t,
  &_swigt__p_std__listT_unsigned_int_t,
  &_swigt__p_std__listT_unsigned_long_long_t,
  &_swigt__p_std__listT_unsigned_short_t,
  &_swigt__p_std__listT_void_p_t,
  &_swigt__p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t,
  &_swigt__p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,
  &_swigt__p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t,
  &_swigt__p_std__mapT_std__string_void_p_std__lessT_std__string_t_t,
  &_swigt__p_std__regex,
  &_swigt__p_std__setT_double_t,
  &_swigt__p_std__setT_float_t,
  &_swigt__p_std__setT_int_t,
  &_swigt__p_std__setT_long_long_t,
  &_swigt__p_std__setT_short_t,
  &_swigt__p_std__setT_signed_char_t,
  &_swigt__p_std__setT_string_t,
  &_swigt__p_std__setT_unsigned_char_t,
  &_swigt__p_std__setT_unsigned_int_t,
  &_swigt__p_std__setT_unsigned_long_long_t,
  &_swigt__p_std__setT_unsigned_short_t,
  &_swigt__p_std__setT_void_p_t,
  &_swigt__p_std__stackT_BasicType_t,
  &_swigt__p_std__stackT_double_t,
  &_swigt__p_std__stackT_float_t,
  &_swigt__p_std__stackT_int_t,
  &_swigt__p_std__stackT_long_long_t,
  &_swigt__p_std__stackT_short_t,
  &_swigt__p_std__stackT_signed_char_t,
  &_swigt__p_std__stackT_string_t,
  &_swigt__p_std__stackT_unsigned_char_t,
  &_swigt__p_std__stackT_unsigned_int_t,
  &_swigt__p_std__stackT_unsigned_long_long_t,
  &_swigt__p_std__stackT_unsigned_short_t,
  &_swigt__p_std__stackT_void_p_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_BasicType_t,
  &_swigt__p_std__vectorT_SWIGLUA_FN_t,
  &_swigt__p_std__vectorT_SWIGLUA_REF_t,
  &_swigt__p_std__vectorT_bool_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_long_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_std__vectorT_BasicType_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_std__vectorT_std__vectorT_float_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_t_t,
  &_swigt__p_std__vectorT_std__vectorT_long_long_t_t,
  &_swigt__p_std__vectorT_std__vectorT_short_t_t,
  &_swigt__p_std__vectorT_std__vectorT_signed_char_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_char_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_long_long_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_short_t_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_std__vectorT_void_p_t,
  &_swigt__p_string,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ArrayT_BasicType_t[] = {  {&_swigt__p_ArrayT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_SWIGLUA_REF_t[] = {  {&_swigt__p_ArrayT_SWIGLUA_REF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_double_t[] = {  {&_swigt__p_ArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_float_t[] = {  {&_swigt__p_ArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_int_t[] = {  {&_swigt__p_ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_long_long_t[] = {  {&_swigt__p_ArrayT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_short_t[] = {  {&_swigt__p_ArrayT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_signed_char_t[] = {  {&_swigt__p_ArrayT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_std__string_t[] = {  {&_swigt__p_ArrayT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_string_t[] = {  {&_swigt__p_ArrayT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_unsigned_char_t[] = {  {&_swigt__p_ArrayT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_unsigned_int_t[] = {  {&_swigt__p_ArrayT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_unsigned_long_long_t[] = {  {&_swigt__p_ArrayT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_unsigned_short_t[] = {  {&_swigt__p_ArrayT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_void_p_t[] = {  {&_swigt__p_ArrayT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AssociativeArrayT_string_BasicType_t[] = {  {&_swigt__p_AssociativeArrayT_string_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AssociativeArrayT_string_string_t[] = {  {&_swigt__p_AssociativeArrayT_string_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AssociativeArrayT_string_void_p_t[] = {  {&_swigt__p_AssociativeArrayT_string_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BasicType[] = {  {&_swigt__p_BasicType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BitArray[] = {  {&_swigt__p_BitArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_char_t[] = {  {&_swigt__p_CBufferT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_double_t[] = {  {&_swigt__p_CBufferT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_float_t[] = {  {&_swigt__p_CBufferT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_int_t[] = {  {&_swigt__p_CBufferT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_long_long_t[] = {  {&_swigt__p_CBufferT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_short_t[] = {  {&_swigt__p_CBufferT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_signed_char_t[] = {  {&_swigt__p_CBufferT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_unsigned_char_t[] = {  {&_swigt__p_CBufferT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_unsigned_int_t[] = {  {&_swigt__p_CBufferT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_unsigned_long_long_t[] = {  {&_swigt__p_CBufferT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBufferT_unsigned_short_t[] = {  {&_swigt__p_CBufferT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSVParser[] = {  {&_swigt__p_CSVParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_double_t[] = {  {&_swigt__p_DequeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_float_t[] = {  {&_swigt__p_DequeT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_int_t[] = {  {&_swigt__p_DequeT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_long_long_t[] = {  {&_swigt__p_DequeT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_short_t[] = {  {&_swigt__p_DequeT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_signed_char_t[] = {  {&_swigt__p_DequeT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_string_t[] = {  {&_swigt__p_DequeT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_unsigned_char_t[] = {  {&_swigt__p_DequeT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_unsigned_int_t[] = {  {&_swigt__p_DequeT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_unsigned_long_long_t[] = {  {&_swigt__p_DequeT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_unsigned_short_t[] = {  {&_swigt__p_DequeT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DequeT_void_p_t[] = {  {&_swigt__p_DequeT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_BasicType_t[] = {  {&_swigt__p_ForwardListT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_double_t[] = {  {&_swigt__p_ForwardListT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_float_t[] = {  {&_swigt__p_ForwardListT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_int_t[] = {  {&_swigt__p_ForwardListT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_long_long_t[] = {  {&_swigt__p_ForwardListT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_short_t[] = {  {&_swigt__p_ForwardListT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_signed_char_t[] = {  {&_swigt__p_ForwardListT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_string_t[] = {  {&_swigt__p_ForwardListT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_unsigned_char_t[] = {  {&_swigt__p_ForwardListT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_unsigned_int_t[] = {  {&_swigt__p_ForwardListT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_unsigned_long_long_t[] = {  {&_swigt__p_ForwardListT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_unsigned_short_t[] = {  {&_swigt__p_ForwardListT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForwardListT_void_p_t[] = {  {&_swigt__p_ForwardListT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_BasicType_t[] = {  {&_swigt__p_ListT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_double_t[] = {  {&_swigt__p_ListT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_float_t[] = {  {&_swigt__p_ListT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_int_t[] = {  {&_swigt__p_ListT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_long_long_t[] = {  {&_swigt__p_ListT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_short_t[] = {  {&_swigt__p_ListT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_signed_char_t[] = {  {&_swigt__p_ListT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_string_t[] = {  {&_swigt__p_ListT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_unsigned_char_t[] = {  {&_swigt__p_ListT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_unsigned_int_t[] = {  {&_swigt__p_ListT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_unsigned_long_long_t[] = {  {&_swigt__p_ListT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_unsigned_short_t[] = {  {&_swigt__p_ListT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListT_void_p_t[] = {  {&_swigt__p_ListT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_BasicType_t[] = {  {&_swigt__p_MatrixT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_double_t[] = {  {&_swigt__p_MatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_float_t[] = {  {&_swigt__p_MatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_int_t[] = {  {&_swigt__p_MatrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_long_long_t[] = {  {&_swigt__p_MatrixT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_short_t[] = {  {&_swigt__p_MatrixT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_signed_char_t[] = {  {&_swigt__p_MatrixT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_std__string_t[] = {  {&_swigt__p_MatrixT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_string_t[] = {  {&_swigt__p_MatrixT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_unsigned_char_t[] = {  {&_swigt__p_MatrixT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_unsigned_int_t[] = {  {&_swigt__p_MatrixT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_unsigned_long_long_t[] = {  {&_swigt__p_MatrixT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_unsigned_short_t[] = {  {&_swigt__p_MatrixT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RegEx[] = {  {&_swigt__p_RegEx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGLUA_FN[] = {  {&_swigt__p_SWIGLUA_FN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGLUA_REF[] = {  {&_swigt__p_SWIGLUA_REF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_double_t[] = {  {&_swigt__p_SetT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_float_t[] = {  {&_swigt__p_SetT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_int_t[] = {  {&_swigt__p_SetT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_long_long_t[] = {  {&_swigt__p_SetT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_short_t[] = {  {&_swigt__p_SetT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_signed_char_t[] = {  {&_swigt__p_SetT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_string_t[] = {  {&_swigt__p_SetT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_unsigned_char_t[] = {  {&_swigt__p_SetT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_unsigned_int_t[] = {  {&_swigt__p_SetT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_unsigned_long_long_t[] = {  {&_swigt__p_SetT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_unsigned_short_t[] = {  {&_swigt__p_SetT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_void_p_t[] = {  {&_swigt__p_SetT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_BasicType_t[] = {  {&_swigt__p_StackT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_double_t[] = {  {&_swigt__p_StackT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_float_t[] = {  {&_swigt__p_StackT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_int_t[] = {  {&_swigt__p_StackT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_long_long_t[] = {  {&_swigt__p_StackT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_short_t[] = {  {&_swigt__p_StackT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_signed_char_t[] = {  {&_swigt__p_StackT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_string_t[] = {  {&_swigt__p_StackT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_unsigned_char_t[] = {  {&_swigt__p_StackT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_unsigned_int_t[] = {  {&_swigt__p_StackT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_unsigned_long_long_t[] = {  {&_swigt__p_StackT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_unsigned_short_t[] = {  {&_swigt__p_StackT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StackT_void_p_t[] = {  {&_swigt__p_StackT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_String[] = {  {&_swigt__p_String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_double_t[] = {  {&_swigt__p_std__dequeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_float_t[] = {  {&_swigt__p_std__dequeT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_int_t[] = {  {&_swigt__p_std__dequeT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_long_long_t[] = {  {&_swigt__p_std__dequeT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_short_t[] = {  {&_swigt__p_std__dequeT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_signed_char_t[] = {  {&_swigt__p_std__dequeT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_std__string_t[] = {  {&_swigt__p_std__dequeT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_unsigned_char_t[] = {  {&_swigt__p_std__dequeT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_unsigned_int_t[] = {  {&_swigt__p_std__dequeT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_unsigned_long_long_t[] = {  {&_swigt__p_std__dequeT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_unsigned_short_t[] = {  {&_swigt__p_std__dequeT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_void_p_t[] = {  {&_swigt__p_std__dequeT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BasicType_t[] = {  {&_swigt__p_std__listT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_double_t[] = {  {&_swigt__p_std__listT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_float_t[] = {  {&_swigt__p_std__listT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_int_t[] = {  {&_swigt__p_std__listT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_long_long_t[] = {  {&_swigt__p_std__listT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_short_t[] = {  {&_swigt__p_std__listT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_signed_char_t[] = {  {&_swigt__p_std__listT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_string_t[] = {  {&_swigt__p_std__listT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_unsigned_char_t[] = {  {&_swigt__p_std__listT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_unsigned_int_t[] = {  {&_swigt__p_std__listT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_unsigned_long_long_t[] = {  {&_swigt__p_std__listT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_unsigned_short_t[] = {  {&_swigt__p_std__listT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_void_p_t[] = {  {&_swigt__p_std__listT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_void_p_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_void_p_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__regex[] = {  {&_swigt__p_std__regex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_double_t[] = {  {&_swigt__p_std__setT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_float_t[] = {  {&_swigt__p_std__setT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_int_t[] = {  {&_swigt__p_std__setT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_long_long_t[] = {  {&_swigt__p_std__setT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_short_t[] = {  {&_swigt__p_std__setT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_signed_char_t[] = {  {&_swigt__p_std__setT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_string_t[] = {  {&_swigt__p_std__setT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_char_t[] = {  {&_swigt__p_std__setT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_int_t[] = {  {&_swigt__p_std__setT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_long_long_t[] = {  {&_swigt__p_std__setT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_short_t[] = {  {&_swigt__p_std__setT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_void_p_t[] = {  {&_swigt__p_std__setT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_BasicType_t[] = {  {&_swigt__p_std__stackT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_double_t[] = {  {&_swigt__p_std__stackT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_float_t[] = {  {&_swigt__p_std__stackT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_int_t[] = {  {&_swigt__p_std__stackT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_long_long_t[] = {  {&_swigt__p_std__stackT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_short_t[] = {  {&_swigt__p_std__stackT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_signed_char_t[] = {  {&_swigt__p_std__stackT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_string_t[] = {  {&_swigt__p_std__stackT_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_unsigned_char_t[] = {  {&_swigt__p_std__stackT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_unsigned_int_t[] = {  {&_swigt__p_std__stackT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_unsigned_long_long_t[] = {  {&_swigt__p_std__stackT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_unsigned_short_t[] = {  {&_swigt__p_std__stackT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_void_p_t[] = {  {&_swigt__p_std__stackT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BasicType_t[] = {  {&_swigt__p_std__vectorT_BasicType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SWIGLUA_FN_t[] = {  {&_swigt__p_std__vectorT_SWIGLUA_FN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SWIGLUA_REF_t[] = {  {&_swigt__p_std__vectorT_SWIGLUA_REF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_t[] = {  {&_swigt__p_std__vectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_t[] = {  {&_swigt__p_std__vectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_BasicType_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_BasicType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_long_long_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_short_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_signed_char_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_signed_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_long_long_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_short_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_void_p_t[] = {  {&_swigt__p_std__vectorT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ArrayT_BasicType_t,
  _swigc__p_ArrayT_SWIGLUA_REF_t,
  _swigc__p_ArrayT_double_t,
  _swigc__p_ArrayT_float_t,
  _swigc__p_ArrayT_int_t,
  _swigc__p_ArrayT_long_long_t,
  _swigc__p_ArrayT_short_t,
  _swigc__p_ArrayT_signed_char_t,
  _swigc__p_ArrayT_std__string_t,
  _swigc__p_ArrayT_string_t,
  _swigc__p_ArrayT_unsigned_char_t,
  _swigc__p_ArrayT_unsigned_int_t,
  _swigc__p_ArrayT_unsigned_long_long_t,
  _swigc__p_ArrayT_unsigned_short_t,
  _swigc__p_ArrayT_void_p_t,
  _swigc__p_AssociativeArrayT_string_BasicType_t,
  _swigc__p_AssociativeArrayT_string_string_t,
  _swigc__p_AssociativeArrayT_string_void_p_t,
  _swigc__p_BasicType,
  _swigc__p_BitArray,
  _swigc__p_CBufferT_char_t,
  _swigc__p_CBufferT_double_t,
  _swigc__p_CBufferT_float_t,
  _swigc__p_CBufferT_int_t,
  _swigc__p_CBufferT_long_long_t,
  _swigc__p_CBufferT_short_t,
  _swigc__p_CBufferT_signed_char_t,
  _swigc__p_CBufferT_unsigned_char_t,
  _swigc__p_CBufferT_unsigned_int_t,
  _swigc__p_CBufferT_unsigned_long_long_t,
  _swigc__p_CBufferT_unsigned_short_t,
  _swigc__p_CSVParser,
  _swigc__p_DequeT_double_t,
  _swigc__p_DequeT_float_t,
  _swigc__p_DequeT_int_t,
  _swigc__p_DequeT_long_long_t,
  _swigc__p_DequeT_short_t,
  _swigc__p_DequeT_signed_char_t,
  _swigc__p_DequeT_string_t,
  _swigc__p_DequeT_unsigned_char_t,
  _swigc__p_DequeT_unsigned_int_t,
  _swigc__p_DequeT_unsigned_long_long_t,
  _swigc__p_DequeT_unsigned_short_t,
  _swigc__p_DequeT_void_p_t,
  _swigc__p_ForwardListT_BasicType_t,
  _swigc__p_ForwardListT_double_t,
  _swigc__p_ForwardListT_float_t,
  _swigc__p_ForwardListT_int_t,
  _swigc__p_ForwardListT_long_long_t,
  _swigc__p_ForwardListT_short_t,
  _swigc__p_ForwardListT_signed_char_t,
  _swigc__p_ForwardListT_string_t,
  _swigc__p_ForwardListT_unsigned_char_t,
  _swigc__p_ForwardListT_unsigned_int_t,
  _swigc__p_ForwardListT_unsigned_long_long_t,
  _swigc__p_ForwardListT_unsigned_short_t,
  _swigc__p_ForwardListT_void_p_t,
  _swigc__p_ListT_BasicType_t,
  _swigc__p_ListT_double_t,
  _swigc__p_ListT_float_t,
  _swigc__p_ListT_int_t,
  _swigc__p_ListT_long_long_t,
  _swigc__p_ListT_short_t,
  _swigc__p_ListT_signed_char_t,
  _swigc__p_ListT_string_t,
  _swigc__p_ListT_unsigned_char_t,
  _swigc__p_ListT_unsigned_int_t,
  _swigc__p_ListT_unsigned_long_long_t,
  _swigc__p_ListT_unsigned_short_t,
  _swigc__p_ListT_void_p_t,
  _swigc__p_MatrixT_BasicType_t,
  _swigc__p_MatrixT_double_t,
  _swigc__p_MatrixT_float_t,
  _swigc__p_MatrixT_int_t,
  _swigc__p_MatrixT_long_long_t,
  _swigc__p_MatrixT_short_t,
  _swigc__p_MatrixT_signed_char_t,
  _swigc__p_MatrixT_std__string_t,
  _swigc__p_MatrixT_string_t,
  _swigc__p_MatrixT_unsigned_char_t,
  _swigc__p_MatrixT_unsigned_int_t,
  _swigc__p_MatrixT_unsigned_long_long_t,
  _swigc__p_MatrixT_unsigned_short_t,
  _swigc__p_RegEx,
  _swigc__p_SWIGLUA_FN,
  _swigc__p_SWIGLUA_REF,
  _swigc__p_SetT_double_t,
  _swigc__p_SetT_float_t,
  _swigc__p_SetT_int_t,
  _swigc__p_SetT_long_long_t,
  _swigc__p_SetT_short_t,
  _swigc__p_SetT_signed_char_t,
  _swigc__p_SetT_string_t,
  _swigc__p_SetT_unsigned_char_t,
  _swigc__p_SetT_unsigned_int_t,
  _swigc__p_SetT_unsigned_long_long_t,
  _swigc__p_SetT_unsigned_short_t,
  _swigc__p_SetT_void_p_t,
  _swigc__p_StackT_BasicType_t,
  _swigc__p_StackT_double_t,
  _swigc__p_StackT_float_t,
  _swigc__p_StackT_int_t,
  _swigc__p_StackT_long_long_t,
  _swigc__p_StackT_short_t,
  _swigc__p_StackT_signed_char_t,
  _swigc__p_StackT_string_t,
  _swigc__p_StackT_unsigned_char_t,
  _swigc__p_StackT_unsigned_int_t,
  _swigc__p_StackT_unsigned_long_long_t,
  _swigc__p_StackT_unsigned_short_t,
  _swigc__p_StackT_void_p_t,
  _swigc__p_String,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__dequeT_double_t,
  _swigc__p_std__dequeT_float_t,
  _swigc__p_std__dequeT_int_t,
  _swigc__p_std__dequeT_long_long_t,
  _swigc__p_std__dequeT_short_t,
  _swigc__p_std__dequeT_signed_char_t,
  _swigc__p_std__dequeT_std__string_t,
  _swigc__p_std__dequeT_unsigned_char_t,
  _swigc__p_std__dequeT_unsigned_int_t,
  _swigc__p_std__dequeT_unsigned_long_long_t,
  _swigc__p_std__dequeT_unsigned_short_t,
  _swigc__p_std__dequeT_void_p_t,
  _swigc__p_std__listT_BasicType_t,
  _swigc__p_std__listT_double_t,
  _swigc__p_std__listT_float_t,
  _swigc__p_std__listT_int_t,
  _swigc__p_std__listT_long_long_t,
  _swigc__p_std__listT_short_t,
  _swigc__p_std__listT_signed_char_t,
  _swigc__p_std__listT_string_t,
  _swigc__p_std__listT_unsigned_char_t,
  _swigc__p_std__listT_unsigned_int_t,
  _swigc__p_std__listT_unsigned_long_long_t,
  _swigc__p_std__listT_unsigned_short_t,
  _swigc__p_std__listT_void_p_t,
  _swigc__p_std__mapT_std__string_BasicType_std__lessT_std__string_t_t,
  _swigc__p_std__mapT_std__string_SWIGLUA_FN_std__lessT_std__string_t_t,
  _swigc__p_std__mapT_std__string_SWIGLUA_REF_std__lessT_std__string_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t,
  _swigc__p_std__mapT_std__string_void_p_std__lessT_std__string_t_t,
  _swigc__p_std__regex,
  _swigc__p_std__setT_double_t,
  _swigc__p_std__setT_float_t,
  _swigc__p_std__setT_int_t,
  _swigc__p_std__setT_long_long_t,
  _swigc__p_std__setT_short_t,
  _swigc__p_std__setT_signed_char_t,
  _swigc__p_std__setT_string_t,
  _swigc__p_std__setT_unsigned_char_t,
  _swigc__p_std__setT_unsigned_int_t,
  _swigc__p_std__setT_unsigned_long_long_t,
  _swigc__p_std__setT_unsigned_short_t,
  _swigc__p_std__setT_void_p_t,
  _swigc__p_std__stackT_BasicType_t,
  _swigc__p_std__stackT_double_t,
  _swigc__p_std__stackT_float_t,
  _swigc__p_std__stackT_int_t,
  _swigc__p_std__stackT_long_long_t,
  _swigc__p_std__stackT_short_t,
  _swigc__p_std__stackT_signed_char_t,
  _swigc__p_std__stackT_string_t,
  _swigc__p_std__stackT_unsigned_char_t,
  _swigc__p_std__stackT_unsigned_int_t,
  _swigc__p_std__stackT_unsigned_long_long_t,
  _swigc__p_std__stackT_unsigned_short_t,
  _swigc__p_std__stackT_void_p_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_BasicType_t,
  _swigc__p_std__vectorT_SWIGLUA_FN_t,
  _swigc__p_std__vectorT_SWIGLUA_REF_t,
  _swigc__p_std__vectorT_bool_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_long_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_std__vectorT_BasicType_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_std__vectorT_std__vectorT_float_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_t_t,
  _swigc__p_std__vectorT_std__vectorT_long_long_t_t,
  _swigc__p_std__vectorT_std__vectorT_short_t_t,
  _swigc__p_std__vectorT_std__vectorT_signed_char_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_char_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_long_long_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_short_t_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_std__vectorT_void_p_t,
  _swigc__p_string,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

